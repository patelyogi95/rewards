{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ag_grid_community_1 = require(\"ag-grid-community\");\n\nvar setFilterModel_1 = require(\"./setFilterModel\");\n\nvar setFilterListItem_1 = require(\"./setFilterListItem\");\n\nvar virtualList_1 = require(\"../rendering/virtualList\");\n\nvar CheckboxState;\n\n(function (CheckboxState) {\n  CheckboxState[CheckboxState[\"CHECKED\"] = 0] = \"CHECKED\";\n  CheckboxState[CheckboxState[\"UNCHECKED\"] = 1] = \"UNCHECKED\";\n  CheckboxState[CheckboxState[\"INTERMEDIATE\"] = 2] = \"INTERMEDIATE\";\n})(CheckboxState || (CheckboxState = {}));\n\nvar SetFilter =\n/** @class */\nfunction (_super) {\n  __extends(SetFilter, _super);\n\n  function SetFilter() {\n    return _super.call(this) || this;\n  }\n\n  SetFilter.prototype.customInit = function () {\n    var _this = this;\n\n    var changeFilter = function changeFilter(applyNow) {\n      if (applyNow === void 0) {\n        applyNow = false;\n      }\n\n      _this.onFilterChanged(applyNow);\n    };\n\n    var debounceMs = this.filterParams && this.filterParams.debounceMs != null ? this.filterParams.debounceMs : 0;\n    this.debounceFilterChanged = ag_grid_community_1._.debounce(changeFilter, debounceMs);\n    this.eCheckedIcon = ag_grid_community_1._.createIconNoSpan('checkboxChecked', this.gridOptionsWrapper, this.filterParams.column);\n    this.eUncheckedIcon = ag_grid_community_1._.createIconNoSpan('checkboxUnchecked', this.gridOptionsWrapper, this.filterParams.column);\n    this.eIndeterminateCheckedIcon = ag_grid_community_1._.createIconNoSpan('checkboxIndeterminate', this.gridOptionsWrapper, this.filterParams.column);\n  };\n\n  SetFilter.prototype.updateCheckboxIcon = function () {\n    ag_grid_community_1._.clearElement(this.eSelectAll);\n\n    var icon;\n\n    switch (this.selectAllState) {\n      case CheckboxState.INTERMEDIATE:\n        icon = this.eIndeterminateCheckedIcon;\n        break;\n\n      case CheckboxState.CHECKED:\n        icon = this.eCheckedIcon;\n        break;\n\n      case CheckboxState.UNCHECKED:\n        icon = this.eUncheckedIcon;\n        break;\n\n      default:\n        // default happens when initialising for first time\n        icon = this.eCheckedIcon;\n        break;\n    }\n\n    this.eSelectAll.appendChild(icon);\n  };\n\n  SetFilter.prototype.setLoading = function (loading) {\n    ag_grid_community_1._.setVisible(this.eFilterLoading, loading);\n  };\n\n  SetFilter.prototype.initialiseFilterBodyUi = function () {\n    var _this = this;\n\n    this.virtualList = new virtualList_1.VirtualList();\n    this.getContext().wireBean(this.virtualList);\n    var richList = this.getGui().querySelector('#richList');\n\n    if (richList) {\n      richList.appendChild(this.virtualList.getGui());\n    }\n\n    if (ag_grid_community_1._.exists(this.filterParams.cellHeight)) {\n      this.virtualList.setRowHeight(this.filterParams.cellHeight);\n    }\n\n    this.virtualList.setComponentCreator(this.createSetListItem.bind(this));\n    this.model = new setFilterModel_1.SetFilterModel(this.filterParams.colDef, this.filterParams.rowModel, this.filterParams.valueGetter, this.filterParams.doesRowPassOtherFilter, this.filterParams.suppressSorting, function (values, toSelect) {\n      return _this.setFilterValues(values, toSelect ? false : true, toSelect ? true : false, toSelect);\n    }, this.setLoading.bind(this), this.valueFormatterService, this.filterParams.column);\n    this.virtualList.setModel(new ModelWrapper(this.model));\n\n    ag_grid_community_1._.setVisible(this.getGui().querySelector('#ag-mini-filter'), !this.filterParams.suppressMiniFilter);\n\n    this.eMiniFilter.value = this.model.getMiniFilter();\n    this.addDestroyableEventListener(this.eMiniFilter, 'input', function () {\n      return _this.onMiniFilterChanged();\n    });\n    this.updateCheckboxIcon();\n    this.addDestroyableEventListener(this.eSelectAllContainer, 'click', this.onSelectAll.bind(this));\n    this.updateSelectAll();\n    this.virtualList.refresh();\n  };\n\n  SetFilter.prototype.modelFromFloatingFilter = function (from) {\n    if (this.gridOptionsWrapper.isEnableOldSetFilterModel()) {\n      return [from];\n    } else {\n      return {\n        values: [from],\n        filterType: 'set'\n      };\n    }\n  };\n\n  SetFilter.prototype.refreshFilterBodyUi = function () {};\n\n  SetFilter.prototype.createSetListItem = function (value) {\n    var _this = this;\n\n    var listItem = new setFilterListItem_1.SetFilterListItem(value, this.filterParams.column);\n    this.getContext().wireBean(listItem);\n    listItem.setSelected(this.model.isValueSelected(value));\n    listItem.addEventListener(setFilterListItem_1.SetFilterListItem.EVENT_SELECTED, function () {\n      _this.onItemSelected(value, listItem.isSelected());\n    });\n    return listItem;\n  }; // we need to have the gui attached before we can draw the virtual rows, as the\n  // virtual row logic needs info about the gui state\n\n\n  SetFilter.prototype.afterGuiAttached = function (params) {\n    this.virtualList.refresh();\n    this.eMiniFilter.focus();\n  };\n\n  SetFilter.prototype.isFilterActive = function () {\n    return this.model.isFilterActive();\n  };\n\n  SetFilter.prototype.doesFilterPass = function (params) {\n    // if no filter, always pass\n    if (this.model.isEverythingSelected() && !this.filterParams.selectAllOnMiniFilter) {\n      return true;\n    } // if nothing selected in filter, always fail\n\n\n    if (this.model.isNothingSelected() && !this.filterParams.selectAllOnMiniFilter) {\n      return false;\n    }\n\n    var value = this.filterParams.valueGetter(params.node);\n\n    if (this.filterParams.colDef.keyCreator) {\n      value = this.filterParams.colDef.keyCreator({\n        value: value\n      });\n    }\n\n    value = ag_grid_community_1._.makeNull(value);\n\n    if (Array.isArray(value)) {\n      for (var i = 0; i < value.length; i++) {\n        if (this.model.isValueSelected(value[i])) {\n          return true;\n        }\n      }\n\n      return false;\n    } else {\n      return this.model.isValueSelected(value);\n    }\n  };\n\n  SetFilter.prototype.onNewRowsLoaded = function () {\n    var keepSelection = this.filterParams && this.filterParams.newRowsAction === 'keep';\n    var isSelectAll = this.selectAllState === CheckboxState.CHECKED; // default is reset\n\n    this.model.refreshAfterNewRowsLoaded(keepSelection, isSelectAll);\n    this.updateSelectAll();\n    this.virtualList.refresh();\n  }; //noinspection JSUnusedGlobalSymbols\n\n  /**\n   * Public method provided so the user can change the value of the filter once\n   * the filter has been already started\n   * @param options The options to use.\n   * @param selectAll If by default all the values should be selected.\n   * @param notify If we should let know the model that the values of the filter have changed\n   * @param toSelect The subset of options to subselect\n   */\n\n\n  SetFilter.prototype.setFilterValues = function (options, selectAll, notify, toSelect) {\n    var _this = this;\n\n    if (selectAll === void 0) {\n      selectAll = false;\n    }\n\n    if (notify === void 0) {\n      notify = true;\n    }\n\n    this.model.onFilterValuesReady(function () {\n      var keepSelection = _this.filterParams && _this.filterParams.newRowsAction === 'keep';\n\n      _this.model.setValuesType(setFilterModel_1.SetFilterModelValuesType.PROVIDED_LIST);\n\n      _this.model.refreshValues(options, keepSelection, selectAll);\n\n      _this.updateSelectAll();\n\n      var actualToSelect = toSelect ? toSelect : options;\n      actualToSelect.forEach(function (option) {\n        return _this.model.selectValue(option);\n      });\n\n      _this.virtualList.refresh();\n\n      if (notify) {\n        _this.debounceFilterChanged(true);\n      }\n    });\n  }; //noinspection JSUnusedGlobalSymbols\n\n  /**\n   * Public method provided so the user can reset the values of the filter once that it has started\n   * @param options The options to use.\n   */\n\n\n  SetFilter.prototype.resetFilterValues = function () {\n    this.model.setValuesType(setFilterModel_1.SetFilterModelValuesType.NOT_PROVIDED);\n    this.onNewRowsLoaded();\n  };\n\n  SetFilter.prototype.onAnyFilterChanged = function () {\n    this.model.refreshAfterAnyFilterChanged();\n    this.virtualList.refresh();\n  };\n\n  SetFilter.prototype.bodyTemplate = function () {\n    var translate = this.translate.bind(this);\n    return \"<div ref=\\\"ag-filter-loading\\\" class=\\\"loading-filter ag-hidden\\\">\" + translate('loadingOoo') + \"</div>\\n                <div>\\n                    <div class=\\\"ag-input-text-wrapper ag-filter-header-container\\\" id=\\\"ag-mini-filter\\\">\\n                        <input class=\\\"ag-filter-filter\\\" type=\\\"text\\\" placeholder=\\\"\" + translate('searchOoo') + \"\\\"/>\\n                    </div>\\n                    <div class=\\\"ag-filter-header-container\\\">\\n                        <label id=\\\"selectAllContainer\\\">\\n                            <div id=\\\"selectAll\\\" class=\\\"ag-filter-checkbox\\\"></div><span class=\\\"ag-filter-value\\\">(\" + translate('selectAll') + \")</span>\\n                        </label>\\n                    </div>\\n                    <div id=\\\"richList\\\" class=\\\"ag-set-filter-list\\\"></div>\\n                </div>\";\n  };\n\n  SetFilter.prototype.updateSelectAll = function () {\n    if (this.model.isEverythingSelected()) {\n      this.selectAllState = CheckboxState.CHECKED;\n    } else if (this.model.isNothingSelected()) {\n      this.selectAllState = CheckboxState.UNCHECKED;\n    } else {\n      this.selectAllState = CheckboxState.INTERMEDIATE;\n    }\n\n    this.updateCheckboxIcon();\n  };\n\n  SetFilter.prototype.onMiniFilterChanged = function () {\n    var miniFilterChanged = this.model.setMiniFilter(this.eMiniFilter.value);\n\n    if (miniFilterChanged) {\n      this.virtualList.refresh();\n    }\n\n    this.updateSelectAll();\n  };\n\n  SetFilter.prototype.onSelectAll = function (event) {\n    ag_grid_community_1._.addAgGridEventPath(event);\n\n    if (this.selectAllState === CheckboxState.CHECKED) {\n      this.selectAllState = CheckboxState.UNCHECKED;\n    } else {\n      this.selectAllState = CheckboxState.CHECKED;\n    }\n\n    this.doSelectAll();\n  };\n\n  SetFilter.prototype.doSelectAll = function () {\n    var checked = this.selectAllState === CheckboxState.CHECKED;\n\n    if (checked) {\n      this.model.selectEverything();\n    } else {\n      this.model.selectNothing();\n    }\n\n    this.virtualList.refresh();\n    this.debounceFilterChanged();\n    this.updateSelectAll();\n  };\n\n  SetFilter.prototype.onItemSelected = function (value, selected) {\n    if (selected) {\n      this.model.selectValue(value);\n    } else {\n      this.model.unselectValue(value);\n    }\n\n    this.updateSelectAll();\n    this.debounceFilterChanged();\n  };\n\n  SetFilter.prototype.setMiniFilter = function (newMiniFilter) {\n    this.model.setMiniFilter(newMiniFilter);\n    this.eMiniFilter.value = this.model.getMiniFilter();\n  };\n\n  SetFilter.prototype.getMiniFilter = function () {\n    return this.model.getMiniFilter();\n  };\n\n  SetFilter.prototype.selectEverything = function () {\n    this.model.selectEverything();\n    this.updateSelectAll();\n    this.virtualList.refresh();\n  };\n\n  SetFilter.prototype.selectNothing = function () {\n    this.model.selectNothing();\n    this.updateSelectAll();\n    this.virtualList.refresh();\n  };\n\n  SetFilter.prototype.unselectValue = function (value) {\n    this.model.unselectValue(value);\n    this.updateSelectAll();\n    this.virtualList.refresh();\n  };\n\n  SetFilter.prototype.selectValue = function (value) {\n    this.model.selectValue(value);\n    this.updateSelectAll();\n    this.virtualList.refresh();\n  };\n\n  SetFilter.prototype.isValueSelected = function (value) {\n    return this.model.isValueSelected(value);\n  };\n\n  SetFilter.prototype.isEverythingSelected = function () {\n    return this.model.isEverythingSelected();\n  };\n\n  SetFilter.prototype.isNothingSelected = function () {\n    return this.model.isNothingSelected();\n  };\n\n  SetFilter.prototype.getUniqueValueCount = function () {\n    return this.model.getUniqueValueCount();\n  };\n\n  SetFilter.prototype.getUniqueValue = function (index) {\n    return this.model.getUniqueValue(index);\n  };\n\n  SetFilter.prototype.serialize = function () {\n    if (this.gridOptionsWrapper.isEnableOldSetFilterModel()) {\n      return this.model.getModel();\n    } else {\n      return {\n        values: this.model.getModel(),\n        filterType: 'set'\n      };\n    }\n  };\n\n  SetFilter.prototype.parse = function (dataModel) {\n    // also supporting old filter model for backwards compatibility\n    var newValues = dataModel instanceof Array ? dataModel : dataModel.values;\n    this.model.setModel(newValues);\n    this.updateSelectAll();\n    this.virtualList.refresh();\n  };\n\n  SetFilter.prototype.resetState = function () {\n    this.setMiniFilter(null);\n    this.model.setModel(null, true);\n    this.selectEverything();\n  };\n\n  SetFilter.prototype.isFilterConditionActive = function () {\n    return false;\n  };\n\n  __decorate([ag_grid_community_1.QuerySelector('#selectAll'), __metadata(\"design:type\", HTMLInputElement)], SetFilter.prototype, \"eSelectAll\", void 0);\n\n  __decorate([ag_grid_community_1.QuerySelector('#selectAllContainer'), __metadata(\"design:type\", HTMLElement)], SetFilter.prototype, \"eSelectAllContainer\", void 0);\n\n  __decorate([ag_grid_community_1.QuerySelector('.ag-filter-filter'), __metadata(\"design:type\", HTMLInputElement)], SetFilter.prototype, \"eMiniFilter\", void 0);\n\n  __decorate([ag_grid_community_1.RefSelector('ag-filter-loading'), __metadata(\"design:type\", HTMLInputElement)], SetFilter.prototype, \"eFilterLoading\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('valueFormatterService'), __metadata(\"design:type\", ag_grid_community_1.ValueFormatterService)], SetFilter.prototype, \"valueFormatterService\", void 0);\n\n  return SetFilter;\n}(ag_grid_community_1.BaseFilter);\n\nexports.SetFilter = SetFilter;\n\nvar ModelWrapper =\n/** @class */\nfunction () {\n  function ModelWrapper(model) {\n    this.model = model;\n  }\n\n  ModelWrapper.prototype.getRowCount = function () {\n    return this.model.getDisplayedValueCount();\n  };\n\n  ModelWrapper.prototype.getRow = function (index) {\n    return this.model.getDisplayedValue(index);\n  };\n\n  return ModelWrapper;\n}();","map":null,"metadata":{},"sourceType":"script"}