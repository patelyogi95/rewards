{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar numberFormats_1 = require(\"./numberFormats\");\n\nvar fonts_1 = require(\"./fonts\");\n\nvar fills_1 = require(\"./fills\");\n\nvar borders_1 = require(\"./borders\");\n\nvar cellStyleXfs_1 = require(\"./cellStyleXfs\");\n\nvar cellXfs_1 = require(\"./cellXfs\");\n\nvar cellStyles_1 = require(\"./cellStyles\");\n\nvar numberFormat_1 = require(\"./numberFormat\");\n\nvar font_1 = require(\"./font\");\n\nvar border_1 = require(\"./border\");\n\nvar registeredNumberFmts = [];\nvar registeredFonts = [{\n  name: 'Calibri',\n  size: 14,\n  colorTheme: '1',\n  family: 2,\n  scheme: 'minor'\n}];\nvar registeredFills = [{\n  patternType: 'none'\n}, {\n  patternType: 'gray125'\n}];\nvar registeredBorders = [{\n  left: undefined,\n  right: undefined,\n  top: undefined,\n  bottom: undefined,\n  diagonal: undefined\n}];\nvar registeredCellStyleXfs = [{\n  borderId: 0,\n  fillId: 0,\n  fontId: 0,\n  numFmtId: 0\n}];\nvar registeredCellXfs = [{\n  borderId: 0,\n  fillId: 0,\n  fontId: 0,\n  numFmtId: 0,\n  xfId: 0\n}];\nvar registeredCellStyles = [{\n  builtinId: 0,\n  name: 'normal',\n  xfId: 0\n}];\nvar stylesMap = {\n  base: 0\n};\n\nvar convertLegacyPattern = function convertLegacyPattern(name) {\n  var colorMap = {\n    None: 'none',\n    Solid: 'solid',\n    Gray50: 'mediumGray',\n    Gray75: 'darkGray',\n    Gray25: 'lightGray',\n    HorzStripe: 'darkHorizontal',\n    VertStripe: 'darkVertical',\n    ReverseDiagStripe: 'darkDown',\n    DiagStripe: 'darkUp',\n    DiagCross: 'darkGrid',\n    ThickDiagCross: 'darkTrellis',\n    ThinHorzStripe: 'lightHorizontal',\n    ThinVertStripe: 'lightVertical',\n    ThinReverseDiagStripe: 'lightDown',\n    ThinDiagStripe: 'lightUp',\n    ThinHorzCross: 'lightGrid',\n    ThinDiagCross: 'lightTrellis',\n    Gray125: 'gray125',\n    Gray0625: 'gray0625'\n  };\n\n  if (!name) {\n    return 'none';\n  }\n\n  return colorMap[name] || name;\n};\n\nexports.convertLegacyColor = function (color) {\n  if (color == undefined) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    color = color.substr(1);\n  }\n\n  return color.length === 6 ? '00' + color : color;\n};\n\nvar registerFill = function registerFill(fill) {\n  var convertedPattern = convertLegacyPattern(fill.pattern);\n  var convertedFillColor = exports.convertLegacyColor(fill.color);\n  var convertedPatternColor = exports.convertLegacyColor(fill.patternColor);\n  var reg = registeredFills.filter(function (currentFill) {\n    if (currentFill.patternType != convertedPattern) {\n      return false;\n    }\n\n    if (currentFill.fgRgb != convertedFillColor) {\n      return false;\n    }\n\n    if (currentFill.bgRgb != convertedPatternColor) {\n      return false;\n    }\n\n    return true;\n  });\n  var pos = reg.length ? registeredFills.indexOf(reg[0]) : -1;\n\n  if (pos === -1) {\n    pos = registeredFills.length;\n    registeredFills.push({\n      patternType: convertedPattern,\n      fgRgb: convertedFillColor,\n      bgRgb: convertedPatternColor\n    });\n  }\n\n  return pos;\n};\n\nvar registerNumberFmt = function registerNumberFmt(format) {\n  if (numberFormat_1.numberFormatMap[format]) {\n    return numberFormat_1.numberFormatMap[format];\n  }\n\n  var reg = registeredNumberFmts.filter(function (currentFmt) {\n    if (currentFmt.formatCode !== format) {\n      return false;\n    }\n  });\n  var pos = reg.length ? reg[0].numFmtId : -1;\n\n  if (pos === -1) {\n    pos = registeredNumberFmts.length + 164;\n    registeredNumberFmts.push({\n      formatCode: format,\n      numFmtId: pos\n    });\n  }\n\n  return pos;\n};\n\nvar registerBorders = function registerBorders(borders) {\n  var borderBottom = borders.borderBottom,\n      borderTop = borders.borderTop,\n      borderLeft = borders.borderLeft,\n      borderRight = borders.borderRight;\n  var bottomStyle, topStyle, leftStyle, rightStyle;\n  var bottomColor, topColor, leftColor, rightColor;\n\n  if (borderLeft) {\n    leftStyle = border_1.convertLegacyBorder(borderLeft.lineStyle, borderLeft.weight);\n    leftColor = exports.convertLegacyColor(borderLeft.color);\n  }\n\n  if (borderRight) {\n    rightStyle = border_1.convertLegacyBorder(borderRight.lineStyle, borderRight.weight);\n    rightColor = exports.convertLegacyColor(borderRight.color);\n  }\n\n  if (borderBottom) {\n    bottomStyle = border_1.convertLegacyBorder(borderBottom.lineStyle, borderBottom.weight);\n    bottomColor = exports.convertLegacyColor(borderBottom.color);\n  }\n\n  if (borderTop) {\n    topStyle = border_1.convertLegacyBorder(borderTop.lineStyle, borderTop.weight);\n    topColor = exports.convertLegacyColor(borderTop.color);\n  }\n\n  var reg = registeredBorders.filter(function (currentBorder) {\n    var left = currentBorder.left,\n        right = currentBorder.right,\n        top = currentBorder.top,\n        bottom = currentBorder.bottom;\n\n    if (!left && (leftStyle || leftColor)) {\n      return false;\n    }\n\n    if (!right && (rightStyle || rightColor)) {\n      return false;\n    }\n\n    if (!top && (topStyle || topColor)) {\n      return false;\n    }\n\n    if (!bottom && (bottomStyle || bottomColor)) {\n      return false;\n    }\n\n    var _a = left || {},\n        clS = _a.style,\n        clC = _a.color;\n\n    var _b = right || {},\n        crS = _b.style,\n        crC = _b.color;\n\n    var _c = top || {},\n        ctS = _c.style,\n        ctC = _c.color;\n\n    var _d = bottom || {},\n        cbS = _d.style,\n        cbC = _d.color;\n\n    if (clS != leftStyle || clC != leftColor) {\n      return false;\n    }\n\n    if (crS != rightStyle || crC != rightColor) {\n      return false;\n    }\n\n    if (ctS != topStyle || ctC != topColor) {\n      return false;\n    }\n\n    if (cbS != bottomStyle || cbC != bottomColor) {\n      return false;\n    }\n\n    return true;\n  });\n  var pos = reg.length ? registeredBorders.indexOf(reg[0]) : -1;\n\n  if (pos === -1) {\n    pos = registeredBorders.length;\n    registeredBorders.push({\n      left: {\n        style: leftStyle,\n        color: leftColor\n      },\n      right: {\n        style: rightStyle,\n        color: rightColor\n      },\n      top: {\n        style: topStyle,\n        color: topColor\n      },\n      bottom: {\n        style: bottomStyle,\n        color: bottomColor\n      },\n      diagonal: {\n        style: undefined,\n        color: undefined\n      }\n    });\n  }\n\n  return pos;\n};\n\nvar registerFont = function registerFont(font) {\n  var name = font.fontName,\n      color = font.color,\n      size = font.size,\n      bold = font.bold,\n      italic = font.italic,\n      outline = font.outline,\n      shadow = font.shadow,\n      strikeThrough = font.strikeThrough,\n      underline = font.underline,\n      family = font.family;\n  var convertedColor = exports.convertLegacyColor(color);\n  var familyId = font_1.getFamilyId(family);\n  var reg = registeredFonts.filter(function (currentFont) {\n    if (currentFont.name != name) {\n      return false;\n    }\n\n    if (currentFont.color != convertedColor) {\n      return false;\n    }\n\n    if (currentFont.size != size) {\n      return false;\n    }\n\n    if (currentFont.bold != bold) {\n      return false;\n    }\n\n    if (currentFont.italic != italic) {\n      return false;\n    }\n\n    if (currentFont.outline != outline) {\n      return false;\n    }\n\n    if (currentFont.shadow != shadow) {\n      return false;\n    }\n\n    if (currentFont.strike != strikeThrough) {\n      return false;\n    }\n\n    if (currentFont.underline != underline) {\n      return false;\n    }\n\n    if (currentFont.family != familyId) {\n      return false;\n    }\n\n    return true;\n  });\n  var pos = reg.length ? registeredFonts.indexOf(reg[0]) : -1;\n\n  if (pos === -1) {\n    pos = registeredFonts.length;\n    registeredFonts.push({\n      name: name,\n      color: convertedColor,\n      size: size,\n      bold: bold,\n      italic: italic,\n      outline: outline,\n      shadow: shadow,\n      strike: strikeThrough,\n      underline: underline,\n      family: familyId\n    });\n  }\n\n  return pos;\n};\n\nvar registerStyle = function registerStyle(config) {\n  var id = config.id,\n      alignment = config.alignment,\n      borders = config.borders,\n      font = config.font,\n      interior = config.interior,\n      numberFormat = config.numberFormat,\n      protection = config.protection;\n  var currentFill = 0;\n  var currentBorder = 0;\n  var currentFont = 0;\n  var currentNumberFmt = 0;\n\n  if (!id || stylesMap[id] != undefined) {\n    return;\n  }\n\n  if (interior) {\n    currentFill = registerFill(interior);\n  }\n\n  if (borders) {\n    currentBorder = registerBorders(borders);\n  }\n\n  if (font) {\n    currentFont = registerFont(font);\n  }\n\n  if (numberFormat) {\n    currentNumberFmt = registerNumberFmt(numberFormat.format);\n  }\n\n  stylesMap[id] = registeredCellXfs.length;\n  registeredCellXfs.push({\n    alignment: alignment,\n    borderId: currentBorder || 0,\n    fillId: currentFill || 0,\n    fontId: currentFont || 0,\n    numFmtId: currentNumberFmt || 0,\n    protection: protection,\n    xfId: 0\n  });\n};\n\nvar stylesheetFactory = {\n  getTemplate: function getTemplate() {\n    return {\n      name: 'styleSheet',\n      properties: {\n        rawMap: {\n          xmlns: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main'\n        }\n      },\n      children: [numberFormats_1.default.getTemplate(registeredNumberFmts), fonts_1.default.getTemplate(registeredFonts), fills_1.default.getTemplate(registeredFills), borders_1.default.getTemplate(registeredBorders), cellStyleXfs_1.default.getTemplate(registeredCellStyleXfs), cellXfs_1.default.getTemplate(registeredCellXfs), cellStyles_1.default.getTemplate(registeredCellStyles), {\n        name: 'tableStyles',\n        properties: {\n          rawMap: {\n            count: 0,\n            defaultPivotStyle: 'PivotStyleLight16',\n            defaultTableStyle: 'TableStyleMedium2'\n          }\n        }\n      }]\n    };\n  }\n};\n\nexports.getStyleId = function (name) {\n  return stylesMap[name] || 0;\n};\n\nexports.registerStyles = function (styles) {\n  styles.forEach(registerStyle);\n};\n\nexports.default = stylesheetFactory;","map":null,"metadata":{},"sourceType":"script"}