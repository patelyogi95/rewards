{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Maps a discrete domain to a continuous numeric range.\n * See https://github.com/d3/d3-scale#band-scales for more info.\n */\n\nvar BandScale =\n/** @class */\nfunction () {\n  function BandScale() {\n    this._domain = [];\n    this._range = [0, 1];\n    this.ordinalRange = [];\n    this.index = {}; // new Map<D, number>();\n\n    this._bandwidth = 1;\n    this._padding = 0;\n    /**\n     * The ratio of the range that is reserved for space between bands.\n     */\n\n    this._paddingInner = 0;\n    /**\n     * The ratio of the range that is reserved for space before the first\n     * and after the last band.\n     */\n\n    this._paddingOuter = 0;\n    this._round = false;\n    /**\n     * How the leftover range is distributed.\n     * `0.5` - equal distribution of space before the first and after the last band,\n     * with bands effectively centered within the range.\n     */\n\n    this._align = 0.5;\n  }\n\n  Object.defineProperty(BandScale.prototype, \"domain\", {\n    get: function get() {\n      return this._domain;\n    },\n    set: function set(values) {\n      var domain = this._domain;\n      domain.length = 0;\n      this.index = {};\n      var index = this.index;\n      values.forEach(function (value) {\n        if (index[value] === undefined) {\n          index[value] = domain.push(value) - 1;\n        }\n      });\n      this.rescale();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BandScale.prototype, \"range\", {\n    get: function get() {\n      return this._range;\n    },\n    set: function set(values) {\n      this._range[0] = values[0];\n      this._range[1] = values[1];\n      this.rescale();\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  BandScale.prototype.ticks = function () {\n    return this._domain;\n  };\n\n  BandScale.prototype.convert = function (d) {\n    var i = this.index[d];\n\n    if (i === undefined) {\n      return NaN;\n    }\n\n    var r = this.ordinalRange[i];\n\n    if (r === undefined) {\n      return NaN;\n    }\n\n    return r;\n  };\n\n  Object.defineProperty(BandScale.prototype, \"bandwidth\", {\n    get: function get() {\n      return this._bandwidth;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BandScale.prototype, \"padding\", {\n    get: function get() {\n      return this._paddingInner;\n    },\n    set: function set(value) {\n      value = Math.max(0, Math.min(1, value));\n      this._paddingInner = value;\n      this._paddingOuter = value;\n      this.rescale();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BandScale.prototype, \"paddingInner\", {\n    get: function get() {\n      return this._paddingInner;\n    },\n    set: function set(value) {\n      this._paddingInner = Math.max(0, Math.min(1, value)); // [0, 1]\n\n      this.rescale();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BandScale.prototype, \"paddingOuter\", {\n    get: function get() {\n      return this._paddingOuter;\n    },\n    set: function set(value) {\n      this._paddingOuter = Math.max(0, Math.min(1, value)); // [0, 1]\n\n      this.rescale();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BandScale.prototype, \"round\", {\n    get: function get() {\n      return this._round;\n    },\n    set: function set(value) {\n      this._round = value;\n      this.rescale();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BandScale.prototype, \"align\", {\n    get: function get() {\n      return this._align;\n    },\n    set: function set(value) {\n      this._align = Math.max(0, Math.min(1, value)); // [0, 1]\n\n      this.rescale();\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  BandScale.prototype.rescale = function () {\n    var _a;\n\n    var n = this._domain.length;\n\n    if (!n) {\n      return;\n    }\n\n    var _b = this._range,\n        a = _b[0],\n        b = _b[1];\n    var reversed = b < a;\n\n    if (reversed) {\n      _a = [b, a], a = _a[0], b = _a[1];\n    }\n\n    var step = (b - a) / Math.max(1, n - this._paddingInner + this._paddingOuter * 2);\n\n    if (this._round) {\n      step = Math.floor(step);\n    }\n\n    a += (b - a - step * (n - this._paddingInner)) * this._align;\n    this._bandwidth = step * (1 - this._paddingInner);\n\n    if (this._round) {\n      a = Math.round(a);\n      this._bandwidth = Math.round(this._bandwidth);\n    }\n\n    var values = [];\n\n    for (var i = 0; i < n; i++) {\n      values.push(a + step * i);\n    }\n\n    this.ordinalRange = reversed ? values.reverse() : values;\n  };\n\n  return BandScale;\n}();\n\nexports.BandScale = BandScale;","map":null,"metadata":{},"sourceType":"script"}