{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar shape_1 = require(\"./shape\");\n\nvar object_1 = require(\"../../util/object\");\n\nvar hdpiCanvas_1 = require(\"../../canvas/hdpiCanvas\");\n\nvar bbox_1 = require(\"../bbox\");\n\nvar Text =\n/** @class */\nfunction (_super) {\n  __extends(Text, _super);\n\n  function Text() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._x = 0;\n    _this._y = 0;\n    _this.lineBreakRe = /\\r?\\n/g;\n    _this.lines = [];\n    _this._text = '';\n    _this._font = Text.defaultStyles.font;\n    _this._textAlign = Text.defaultStyles.textAlign;\n    _this._textBaseline = Text.defaultStyles.textBaseline;\n    _this.getBBox = hdpiCanvas_1.HdpiCanvas.supports.textMetrics ? function () {\n      var metrics = hdpiCanvas_1.HdpiCanvas.measureText(_this.text, _this.font, _this.textBaseline, _this.textAlign);\n      return {\n        x: _this.x - metrics.actualBoundingBoxLeft,\n        y: _this.y - metrics.actualBoundingBoxAscent,\n        width: metrics.width,\n        height: metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent\n      };\n    } : function () {\n      var size = hdpiCanvas_1.HdpiCanvas.getTextSize(_this.text, _this.font);\n      var x = _this.x;\n      var y = _this.y;\n\n      switch (_this.textAlign) {\n        case 'end':\n        case 'right':\n          x -= size.width;\n          break;\n\n        case 'center':\n          x -= size.width / 2;\n      }\n\n      switch (_this.textBaseline) {\n        case 'alphabetic':\n          y -= size.height * 0.7;\n          break;\n\n        case 'middle':\n          y -= size.height * 0.45;\n          break;\n\n        case 'ideographic':\n          y -= size.height;\n          break;\n\n        case 'hanging':\n          y -= size.height * 0.2;\n          break;\n\n        case 'bottom':\n          y -= size.height;\n          break;\n      }\n\n      return {\n        x: x,\n        y: y,\n        width: size.width,\n        height: size.height\n      };\n    };\n    return _this;\n  }\n\n  Object.defineProperty(Text.prototype, \"x\", {\n    get: function get() {\n      return this._x;\n    },\n    set: function set(value) {\n      if (this._x !== value) {\n        this._x = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Text.prototype, \"y\", {\n    get: function get() {\n      return this._y;\n    },\n    set: function set(value) {\n      if (this._y !== value) {\n        this._y = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Text.prototype.splitText = function () {\n    this.lines = this._text.split(this.lineBreakRe);\n  };\n\n  Object.defineProperty(Text.prototype, \"text\", {\n    get: function get() {\n      return this._text;\n    },\n    set: function set(value) {\n      if (this._text !== value) {\n        this._text = value;\n        this.splitText();\n        this.dirty = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Text.prototype, \"font\", {\n    get: function get() {\n      return this._font;\n    },\n    set: function set(value) {\n      if (this._font !== value) {\n        this._font = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Text.prototype, \"textAlign\", {\n    get: function get() {\n      return this._textAlign;\n    },\n    set: function set(value) {\n      if (this._textAlign !== value) {\n        this._textAlign = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Text.prototype, \"textBaseline\", {\n    get: function get() {\n      return this._textBaseline;\n    },\n    set: function set(value) {\n      if (this._textBaseline !== value) {\n        this._textBaseline = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Text.prototype.isPointInPath = function (x, y) {\n    var point = this.transformPoint(x, y);\n    var bbox = this.getBBox();\n    return bbox_1.isPointInBBox(bbox, point.x, point.y);\n  };\n\n  Text.prototype.isPointInStroke = function (x, y) {\n    return false;\n  };\n\n  Text.prototype.applyContextAttributes = function (ctx) {\n    _super.prototype.applyContextAttributes.call(this, ctx);\n\n    ctx.font = this.font;\n    ctx.textAlign = this.textAlign;\n    ctx.textBaseline = this.textBaseline;\n  };\n\n  Text.prototype.render = function (ctx) {\n    if (!this.scene) return;\n    var lines = this.lines;\n    var lineCount = lines.length;\n    if (!lineCount) return;\n\n    if (this.dirtyTransform) {\n      this.computeTransformMatrix();\n    }\n\n    this.matrix.toContext(ctx);\n    this.applyContextAttributes(ctx);\n\n    if (lineCount > 1) {// TODO: multi-line text\n    } else if (lineCount === 1) {\n      if (this.fillStyle) {\n        ctx.fillText(this.text, this.x, this.y);\n      }\n\n      if (this.strokeStyle) {\n        ctx.strokeText(this.text, this.x, this.y);\n      }\n    } // renderBBox(ctx, this.getBBox()); // debug\n\n\n    this.dirty = false;\n  };\n\n  Text.defaultStyles = object_1.chainObjects(shape_1.Shape.defaultStyles, {\n    textAlign: 'start',\n    font: '10px sans-serif',\n    textBaseline: 'alphabetic'\n  });\n  return Text;\n}(shape_1.Shape);\n\nexports.Text = Text;","map":null,"metadata":{},"sourceType":"script"}