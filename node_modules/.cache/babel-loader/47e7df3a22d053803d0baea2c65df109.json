{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ag_grid_community_1 = require(\"ag-grid-community\");\n\nvar ExcelXmlSerializingSession =\n/** @class */\nfunction (_super) {\n  __extends(ExcelXmlSerializingSession, _super);\n\n  function ExcelXmlSerializingSession(config) {\n    var _this = _super.call(this, {\n      columnController: config.columnController,\n      valueService: config.valueService,\n      gridOptionsWrapper: config.gridOptionsWrapper,\n      processCellCallback: config.processCellCallback,\n      processHeaderCallback: config.processHeaderCallback,\n      cellAndHeaderEscaper: function cellAndHeaderEscaper(raw) {\n        return raw;\n      }\n    }) || this;\n\n    _this.mixedStyles = {};\n    _this.mixedStyleCounter = 0;\n    _this.rows = [];\n    var sheetName = config.sheetName,\n        excelFactory = config.excelFactory,\n        baseExcelStyles = config.baseExcelStyles,\n        styleLinker = config.styleLinker,\n        suppressTextAsCDATA = config.suppressTextAsCDATA,\n        rowHeight = config.rowHeight,\n        headerRowHeight = config.headerRowHeight;\n    _this.sheetName = sheetName;\n    _this.excelFactory = excelFactory;\n    _this.baseExcelStyles = baseExcelStyles || [];\n    _this.styleLinker = styleLinker;\n    _this.suppressTextAsCDATA = suppressTextAsCDATA;\n    _this.stylesByIds = {};\n    _this.rowHeight = rowHeight;\n    _this.headerRowHeight = headerRowHeight;\n\n    _this.baseExcelStyles.forEach(function (it) {\n      _this.stylesByIds[it.id] = it;\n    });\n\n    _this.excelStyles = _this.baseExcelStyles.slice();\n    return _this;\n  }\n\n  ExcelXmlSerializingSession.prototype.addCustomHeader = function (customHeader) {\n    this.customHeader = customHeader;\n  };\n\n  ExcelXmlSerializingSession.prototype.addCustomFooter = function (customFooter) {\n    this.customFooter = customFooter;\n  };\n\n  ExcelXmlSerializingSession.prototype.prepare = function (columnsToExport) {\n    this.cols = ag_grid_community_1._.map(columnsToExport, function (it) {\n      // tslint:disable-next-line\n      it.getColDef().cellStyle;\n      return {\n        width: it.getActualWidth()\n      };\n    });\n  };\n\n  ExcelXmlSerializingSession.prototype.onNewHeaderGroupingRow = function () {\n    var currentCells = [];\n    var that = this;\n    this.rows.push({\n      cells: currentCells,\n      height: this.headerRowHeight\n    });\n    return {\n      onColumn: function onColumn(header, index, span) {\n        var styleIds = that.styleLinker(ag_grid_community_1.RowType.HEADER_GROUPING, 1, index, \"grouping-\" + header, undefined, undefined);\n        currentCells.push(that.createMergedCell(styleIds && styleIds.length > 0 ? styleIds[0] : undefined, \"String\", header, span));\n      }\n    };\n  };\n\n  ExcelXmlSerializingSession.prototype.onNewHeaderRow = function () {\n    return this.onNewRow(this.onNewHeaderColumn, this.headerRowHeight);\n  };\n\n  ExcelXmlSerializingSession.prototype.onNewBodyRow = function () {\n    return this.onNewRow(this.onNewBodyColumn, this.rowHeight);\n  };\n\n  ExcelXmlSerializingSession.prototype.onNewRow = function (onNewColumnAccumulator, height) {\n    var currentCells = [];\n    this.rows.push({\n      cells: currentCells,\n      height: height\n    });\n    return {\n      onColumn: onNewColumnAccumulator.bind(this, this.rows.length, currentCells)()\n    };\n  };\n\n  ExcelXmlSerializingSession.prototype.onNewHeaderColumn = function (rowIndex, currentCells) {\n    var _this = this;\n\n    var that = this;\n    return function (column, index, node) {\n      var nameForCol = _this.extractHeaderValue(column);\n\n      var styleIds = that.styleLinker(ag_grid_community_1.RowType.HEADER, rowIndex, index, nameForCol, column, undefined);\n      currentCells.push(_this.createCell(styleIds && styleIds.length > 0 ? styleIds[0] : undefined, 'String', nameForCol));\n    };\n  };\n\n  ExcelXmlSerializingSession.prototype.parse = function () {\n    function join(header, body, footer) {\n      var all = [];\n\n      if (header) {\n        header.forEach(function (rowArray) {\n          return all.push({\n            cells: rowArray\n          });\n        });\n      }\n\n      body.forEach(function (it) {\n        return all.push(it);\n      });\n\n      if (footer) {\n        footer.forEach(function (rowArray) {\n          return all.push({\n            cells: rowArray\n          });\n        });\n      }\n\n      return all;\n    }\n\n    var data = [{\n      name: this.sheetName,\n      table: {\n        columns: this.cols,\n        rows: join(this.customHeader, this.rows, this.customFooter)\n      }\n    }];\n    return this.excelFactory.createExcel(this.excelStyles, data, []);\n  };\n\n  ExcelXmlSerializingSession.prototype.onNewBodyColumn = function (rowIndex, currentCells) {\n    var _this = this;\n\n    var that = this;\n    return function (column, index, node) {\n      var valueForCell = _this.extractRowCellValue(column, index, ag_grid_community_1.Constants.EXPORT_TYPE_EXCEL, node);\n\n      var styleIds = that.styleLinker(ag_grid_community_1.RowType.BODY, rowIndex, index, valueForCell, column, node);\n      var excelStyleId;\n\n      if (styleIds && styleIds.length == 1) {\n        excelStyleId = styleIds[0];\n      } else if (styleIds && styleIds.length > 1) {\n        var key = styleIds.join(\"-\");\n\n        if (!_this.mixedStyles[key]) {\n          _this.addNewMixedStyle(styleIds);\n        }\n\n        excelStyleId = _this.mixedStyles[key].excelID;\n      }\n\n      var type = ag_grid_community_1._.isNumeric(valueForCell) ? 'Number' : 'String';\n      currentCells.push(that.createCell(excelStyleId, type, valueForCell));\n    };\n  };\n\n  ExcelXmlSerializingSession.prototype.addNewMixedStyle = function (styleIds) {\n    var _this = this;\n\n    this.mixedStyleCounter += 1;\n    var excelId = 'mixedStyle' + this.mixedStyleCounter;\n    var resultantStyle = {};\n    styleIds.forEach(function (styleId) {\n      _this.excelStyles.forEach(function (excelStyle) {\n        if (excelStyle.id === styleId) {\n          ag_grid_community_1._.mergeDeep(resultantStyle, ag_grid_community_1._.deepCloneObject(excelStyle));\n        }\n      });\n    });\n    resultantStyle.id = excelId;\n    resultantStyle.name = excelId;\n    var key = styleIds.join(\"-\");\n    this.mixedStyles[key] = {\n      excelID: excelId,\n      key: key,\n      result: resultantStyle\n    };\n    this.excelStyles.push(resultantStyle);\n    this.stylesByIds[excelId] = resultantStyle;\n  };\n\n  ExcelXmlSerializingSession.prototype.styleExists = function (styleId) {\n    if (styleId == null) {\n      return false;\n    }\n\n    return this.stylesByIds[styleId];\n  };\n\n  ExcelXmlSerializingSession.prototype.createCell = function (styleId, type, value) {\n    var _this = this;\n\n    var actualStyle = styleId && this.stylesByIds[styleId];\n    var styleExists = actualStyle !== undefined;\n\n    function getType() {\n      if (styleExists && actualStyle.dataType) {\n        switch (actualStyle.dataType) {\n          case 'string':\n            return 'String';\n\n          case 'number':\n            return 'Number';\n\n          case 'dateTime':\n            return 'DateTime';\n\n          case 'error':\n            return 'Error';\n\n          case 'boolean':\n            return 'Boolean';\n\n          default:\n            console.warn(\"ag-grid: Unrecognized data type for excel export [\" + actualStyle.id + \".dataType=\" + actualStyle.dataType + \"]\");\n        }\n      }\n\n      return type;\n    }\n\n    var typeTransformed = getType();\n\n    var massageText = function massageText(val) {\n      return _this.suppressTextAsCDATA ? ag_grid_community_1._.escape(val) : \"<![CDATA[\" + val + \"]]>\";\n    };\n\n    var convertBoolean = function convertBoolean(val) {\n      if (!val || val === '0' || val === 'false') {\n        return '0';\n      }\n\n      return '1';\n    };\n\n    return {\n      styleId: styleExists ? styleId : undefined,\n      data: {\n        type: typeTransformed,\n        value: typeTransformed === 'String' ? massageText(value) : typeTransformed === 'Number' ? Number(value).valueOf() + '' : typeTransformed === 'Boolean' ? convertBoolean(value) : value\n      }\n    };\n  };\n\n  ExcelXmlSerializingSession.prototype.createMergedCell = function (styleId, type, value, numOfCells) {\n    return {\n      styleId: this.styleExists(styleId) ? styleId : undefined,\n      data: {\n        type: type,\n        value: value\n      },\n      mergeAcross: numOfCells\n    };\n  };\n\n  return ExcelXmlSerializingSession;\n}(ag_grid_community_1.BaseGridSerializingSession);\n\nexports.ExcelXmlSerializingSession = ExcelXmlSerializingSession;","map":null,"metadata":{},"sourceType":"script"}