{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ag_grid_community_1 = require(\"ag-grid-community\");\n\nvar column_1 = require(\"./column\");\n\nvar row_1 = require(\"./row\");\n\nvar mergeCell_1 = require(\"./mergeCell\");\n\nvar updateColMinMax = function updateColMinMax(col, min, range, prevCol) {\n  if (!col.min) {\n    col.min = min;\n    col.max = min + range;\n    return;\n  }\n\n  var currentMin = min;\n\n  if (prevCol) {\n    currentMin = Math.max(currentMin, prevCol.min);\n  }\n\n  col.min = Math.max(col.min, currentMin);\n  col.max = Math.max(col.max, currentMin + range);\n};\n\nvar getMergedCells = function getMergedCells(rows, cols) {\n  var mergedCells = [];\n  rows.forEach(function (currentRow, rowIdx) {\n    var cells = currentRow.cells;\n    var merges = 0;\n    currentRow.index = rowIdx + 1;\n    var lastCol;\n    cells.forEach(function (currentCell, cellIdx) {\n      var min = cellIdx + merges + 1;\n      var start = exports.getExcelColumnName(min);\n      var outputRow = rowIdx + 1;\n\n      if (currentCell.mergeAcross) {\n        merges += currentCell.mergeAcross;\n        var end = exports.getExcelColumnName(cellIdx + merges + 1);\n        mergedCells.push(\"\" + start + outputRow + \":\" + end + outputRow);\n      }\n\n      if (!cols[min - 1]) {\n        cols[min - 1] = {};\n      }\n\n      updateColMinMax(cols[min - 1], min, merges, lastCol);\n      lastCol = cols[min - 1];\n      currentCell.ref = \"\" + start + outputRow;\n    });\n  });\n  return mergedCells;\n};\n\nexports.getExcelColumnName = function (colIdx) {\n  var startCode = 65;\n  var tableWidth = 26;\n  var fromCharCode = String.fromCharCode;\n  var pos = Math.floor(colIdx / tableWidth);\n  var tableIdx = colIdx % tableWidth;\n\n  if (!pos || colIdx === tableWidth) {\n    return fromCharCode(startCode + colIdx - 1);\n  }\n\n  if (!tableIdx) {\n    return exports.getExcelColumnName(pos - 1) + 'Z';\n  }\n\n  if (pos < tableWidth) {\n    return fromCharCode(startCode + pos - 1) + fromCharCode(startCode + tableIdx - 1);\n  }\n\n  return exports.getExcelColumnName(pos) + fromCharCode(startCode + tableIdx - 1);\n};\n\nvar worksheetFactory = {\n  getTemplate: function getTemplate(config) {\n    var table = config.table;\n    var rows = table.rows,\n        columns = table.columns;\n    var mergedCells = columns && columns.length ? getMergedCells(rows, columns) : [];\n    var children = [];\n\n    if (columns.length) {\n      children.push({\n        name: 'cols',\n        children: ag_grid_community_1._.map(columns, column_1.default.getTemplate)\n      });\n    }\n\n    if (rows.length) {\n      children.push({\n        name: 'sheetData',\n        children: ag_grid_community_1._.map(rows, row_1.default.getTemplate)\n      });\n    }\n\n    if (mergedCells.length) {\n      children.push({\n        name: 'mergeCells',\n        properties: {\n          rawMap: {\n            count: mergedCells.length\n          }\n        },\n        children: ag_grid_community_1._.map(mergedCells, mergeCell_1.default.getTemplate)\n      });\n    }\n\n    return {\n      name: \"worksheet\",\n      properties: {\n        prefixedAttributes: [{\n          prefix: \"xmlns:\",\n          map: {\n            r: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"\n          }\n        }],\n        rawMap: {\n          xmlns: \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\"\n        }\n      },\n      children: children\n    };\n  }\n};\nexports.default = worksheetFactory;","map":null,"metadata":{},"sourceType":"script"}