{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ag_grid_community_1 = require(\"ag-grid-community\");\n\nvar ChartEverythingDatasource =\n/** @class */\nfunction (_super) {\n  __extends(ChartEverythingDatasource, _super);\n\n  function ChartEverythingDatasource() {\n    var _this = _super.call(this) || this;\n\n    _this.errors = [];\n    return _this;\n  }\n\n  ChartEverythingDatasource.prototype.getErrors = function () {\n    return this.errors;\n  };\n\n  ChartEverythingDatasource.prototype.addError = function (error) {\n    this.errors.push(error);\n  };\n\n  ChartEverythingDatasource.prototype.clearErrors = function () {\n    this.errors = [];\n  };\n\n  ChartEverythingDatasource.prototype.postConstruct = function () {\n    if (this.clientSideRowModel.getType() !== ag_grid_community_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n      console.error('ChartEverythingDatasource only works with ClientSideRowModel');\n      return;\n    }\n\n    this.reset();\n    this.addDestroyableEventListener(this.eventService, ag_grid_community_1.Events.EVENT_COLUMN_VISIBLE, this.onModelUpdated.bind(this));\n    this.addDestroyableEventListener(this.eventService, ag_grid_community_1.Events.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));\n    this.addDestroyableEventListener(this.eventService, ag_grid_community_1.Events.EVENT_CELL_VALUE_CHANGED, this.onModelUpdated.bind(this));\n  };\n\n  ChartEverythingDatasource.prototype.reset = function () {\n    this.clearErrors();\n    this.calculateFields();\n    this.calculateCategoryCols();\n    this.calculateRowCount();\n    console.log(\"rows\", this.rows);\n    console.log(\"colIds\", this.colIds);\n    console.log(\"categoryCols\", this.categoryCols);\n  };\n\n  ChartEverythingDatasource.prototype.calculateCategoryCols = function () {\n    var _this = this;\n\n    this.categoryCols = [];\n\n    var isDimension = function isDimension(col) {\n      return col.getColDef().enableRowGroup || col.getColDef().enablePivot;\n    };\n\n    var cols = this.columnController.getAllDisplayedColumns(); // pull out all dimension columns from the range\n\n    cols.forEach(function (col) {\n      var isDim = isDimension(col);\n      console.log(\"isDim(\" + col.getColId() + \") = \" + isDim);\n\n      if (isDim) {\n        _this.categoryCols.push(col);\n      }\n    });\n  };\n\n  ChartEverythingDatasource.prototype.onModelUpdated = function () {\n    this.reset();\n    this.dispatchEvent({\n      type: 'modelUpdated'\n    });\n  };\n\n  ChartEverythingDatasource.prototype.calculateRowCount = function () {\n    var firstRow = this.clientSideRowModel.getRow(0);\n    var rootNode = this.clientSideRowModel.getRootNode(); // if we are doing pivot mode and no row group, it means we are showing\n    // the root node and no other rows. otherwise we are showing children of\n    // the root node.\n\n    if (firstRow === rootNode) {\n      this.rows = [rootNode];\n    } else {\n      this.rows = rootNode.childrenAfterSort;\n    }\n  };\n\n  ChartEverythingDatasource.prototype.calculateFields = function () {\n    var _this = this;\n\n    var pivotActive = this.columnController.isPivotActive();\n    var cols = pivotActive ? // when pivoting, we show all the columns, regardless of the child group open/closed\n    // (pivot can have groups closed when showing total columns)\n    this.columnController.getAllGridColumns() : // when not pivoting, we display all the columns currently visible\n    this.columnController.getAllDisplayedColumns();\n    this.colIds = [];\n    this.colDisplayNames = [];\n    this.colsMapped = {};\n\n    if (!cols) {\n      return;\n    }\n\n    cols.forEach(function (col) {\n      console.log(\"isValue(\" + col.getColId() + \") = \" + col.getColDef().enableValue); // only measure columns can be values\n\n      if (!col.getColDef().enableValue) {\n        return;\n      } // we never chart total columns, as total cols in charts look weird\n\n\n      if (col.getColDef().pivotTotalColumnIds) {\n        return;\n      }\n\n      var colId = col.getColId();\n\n      var displayName = _this.getColumnName(col);\n\n      _this.colIds.push(colId);\n\n      _this.colDisplayNames.push(displayName ? displayName : '');\n\n      _this.colsMapped[colId] = col;\n    });\n  };\n\n  ChartEverythingDatasource.prototype.getColumnName = function (col) {\n    if (this.columnController.isPivotActive()) {\n      var valueColumns = this.columnController.getValueColumns();\n      var parts = [];\n\n      if (valueColumns.length > 1) {\n        var part = this.columnController.getDisplayNameForColumn(col, 'chart');\n        parts.unshift(part ? part : '');\n      }\n\n      var pointer = col.getParent();\n\n      while (pointer) {\n        var part = this.columnController.getDisplayNameForColumnGroup(pointer, 'chart');\n        parts.unshift(part ? part : '');\n        pointer = pointer.getParent();\n      }\n\n      return parts.join('');\n    } else {\n      var displayName = this.columnController.getDisplayNameForColumn(col, 'chart');\n      return displayName ? displayName : '';\n    }\n  };\n\n  ChartEverythingDatasource.prototype.getCategory = function (i) {\n    var _this = this;\n\n    var rowNode = this.rows[i];\n    var resParts = [];\n\n    if (this.categoryCols) {\n      this.categoryCols.forEach(function (col) {\n        var part = _this.valueService.getValue(col, rowNode); // force return type to be string or empty string (as value can be an object)\n\n\n        var partStr = part && part.toString ? part.toString() : '';\n        resParts.push(partStr);\n      });\n      var res = resParts.join(', ');\n      return res;\n    }\n\n    if (this.getRowCount() > 1) {\n      return 'Total ' + i;\n    } else {\n      return 'Total';\n    }\n  };\n\n  ChartEverythingDatasource.prototype.getFields = function () {\n    return this.colIds;\n  };\n\n  ChartEverythingDatasource.prototype.getFieldNames = function () {\n    return this.colDisplayNames;\n  };\n\n  ChartEverythingDatasource.prototype.getValue = function (i, field) {\n    var rowNode = this.rows[i];\n    var col = this.colsMapped[field];\n    var res = this.valueService.getValue(col, rowNode);\n    return res;\n  };\n\n  ChartEverythingDatasource.prototype.getRowCount = function () {\n    return this.rows.length;\n  };\n\n  __decorate([ag_grid_community_1.Autowired('columnController'), __metadata(\"design:type\", ag_grid_community_1.ColumnController)], ChartEverythingDatasource.prototype, \"columnController\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('valueService'), __metadata(\"design:type\", ag_grid_community_1.ValueService)], ChartEverythingDatasource.prototype, \"valueService\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('rowModel'), __metadata(\"design:type\", ag_grid_community_1.ClientSideRowModel)], ChartEverythingDatasource.prototype, \"clientSideRowModel\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('paginationProxy'), __metadata(\"design:type\", ag_grid_community_1.PaginationProxy)], ChartEverythingDatasource.prototype, \"paginationProxy\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('eventService'), __metadata(\"design:type\", ag_grid_community_1.EventService)], ChartEverythingDatasource.prototype, \"eventService\", void 0);\n\n  __decorate([ag_grid_community_1.PostConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], ChartEverythingDatasource.prototype, \"postConstruct\", null);\n\n  return ChartEverythingDatasource;\n}(ag_grid_community_1.BeanStub);\n\nexports.ChartEverythingDatasource = ChartEverythingDatasource;","map":null,"metadata":{},"sourceType":"script"}