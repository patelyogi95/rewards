{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ag_grid_community_1 = require(\"ag-grid-community\");\n\nvar ServerSideBlock =\n/** @class */\nfunction (_super) {\n  __extends(ServerSideBlock, _super);\n\n  function ServerSideBlock(pageNumber, parentRowNode, params, parentCache) {\n    var _this = _super.call(this, pageNumber, params) || this;\n\n    _this.params = params;\n    _this.parentRowNode = parentRowNode;\n    _this.parentCache = parentCache;\n    _this.level = parentRowNode.level + 1;\n    _this.groupLevel = params.rowGroupCols ? _this.level < params.rowGroupCols.length : undefined;\n    _this.leafGroup = params.rowGroupCols ? _this.level === params.rowGroupCols.length - 1 : false;\n    return _this;\n  }\n\n  ServerSideBlock.prototype.init = function () {\n    this.usingTreeData = this.gridOptionsWrapper.isTreeData();\n    this.usingMasterDetail = this.gridOptionsWrapper.isMasterDetail();\n\n    if (!this.usingTreeData && this.groupLevel) {\n      var groupColVo = this.params.rowGroupCols[this.level];\n      this.groupField = groupColVo.field;\n      this.rowGroupColumn = this.columnController.getRowGroupColumns()[this.level];\n    }\n\n    this.createNodeIdPrefix();\n\n    _super.prototype.init.call(this, {\n      context: this.getContext(),\n      rowRenderer: this.rowRenderer\n    });\n  };\n\n  ServerSideBlock.prototype.setBeans = function (loggerFactory) {\n    this.logger = loggerFactory.create('ServerSideBlock');\n  };\n\n  ServerSideBlock.prototype.createNodeIdPrefix = function () {\n    var parts = [];\n    var rowNode = this.parentRowNode; // pull keys from all parent nodes, but do not include the root node\n\n    while (rowNode && rowNode.level >= 0) {\n      parts.push(rowNode.key);\n      rowNode = rowNode.parent;\n    }\n\n    if (parts.length > 0) {\n      this.nodeIdPrefix = parts.reverse().join('-') + '-';\n    }\n  };\n\n  ServerSideBlock.prototype.createIdForIndex = function (index) {\n    if (ag_grid_community_1._.exists(this.nodeIdPrefix)) {\n      return this.nodeIdPrefix + index.toString();\n    } else {\n      return index.toString();\n    }\n  };\n\n  ServerSideBlock.prototype.getNodeIdPrefix = function () {\n    return this.nodeIdPrefix;\n  };\n\n  ServerSideBlock.prototype.getRow = function (displayRowIndex) {\n    var bottomPointer = this.getStartRow(); // the end row depends on whether all this block is used or not. if the virtual row count\n    // is before the end, then not all the row is used\n\n    var virtualRowCount = this.parentCache.getVirtualRowCount();\n    var endRow = this.getEndRow();\n    var actualEnd = virtualRowCount < endRow ? virtualRowCount : endRow;\n    var topPointer = actualEnd - 1;\n\n    if (ag_grid_community_1._.missing(topPointer) || ag_grid_community_1._.missing(bottomPointer)) {\n      console.warn(\"ag-grid: error: topPointer = \" + topPointer + \", bottomPointer = \" + bottomPointer);\n      return null;\n    }\n\n    while (true) {\n      var midPointer = Math.floor((bottomPointer + topPointer) / 2);\n\n      var currentRowNode = _super.prototype.getRowUsingLocalIndex.call(this, midPointer); // first check current row for index\n\n\n      if (currentRowNode.rowIndex === displayRowIndex) {\n        return currentRowNode;\n      } // then check if current row contains a detail row with the index\n\n\n      var expandedMasterRow = currentRowNode.master && currentRowNode.expanded;\n\n      if (expandedMasterRow && currentRowNode.detailNode.rowIndex === displayRowIndex) {\n        return currentRowNode.detailNode;\n      } // then check if child cache contains index\n\n\n      var childrenCache = currentRowNode.childrenCache;\n\n      if (currentRowNode.expanded && childrenCache && childrenCache.isDisplayIndexInCache(displayRowIndex)) {\n        return childrenCache.getRow(displayRowIndex);\n      } // otherwise adjust pointers to continue searching for index\n\n\n      if (currentRowNode.rowIndex < displayRowIndex) {\n        bottomPointer = midPointer + 1;\n      } else if (currentRowNode.rowIndex > displayRowIndex) {\n        topPointer = midPointer - 1;\n      } else {\n        console.warn(\"ag-Grid: error: unable to locate rowIndex = \" + displayRowIndex + \" in cache\");\n        return null;\n      }\n    }\n  };\n\n  ServerSideBlock.prototype.setDataAndId = function (rowNode, data, index) {\n    var _this = this;\n\n    rowNode.stub = false;\n\n    if (ag_grid_community_1._.exists(data)) {\n      // if the user is not providing id's, then we build an id based on the index.\n      // for infinite scrolling, the index is used on it's own. for Server Side Row Model,\n      // we combine the index with the level and group key, so that the id is\n      // unique across the set.\n      //\n      // unique id is needed for selection (so selection can be maintained when\n      // doing server side sorting / filtering) - if user is not providing id's\n      // (and we use the indexes) then selection will not work between sorting &\n      // filtering.\n      //\n      // id's are also used by the row renderer for updating the dom as it identifies\n      // rowNodes by id\n      var idToUse = this.createIdForIndex(index);\n      rowNode.setDataAndId(data, idToUse);\n      rowNode.setRowHeight(this.gridOptionsWrapper.getRowHeightForNode(rowNode).height);\n\n      if (this.usingTreeData) {\n        var getServerSideGroupKey = this.gridOptionsWrapper.getServerSideGroupKeyFunc();\n\n        if (ag_grid_community_1._.exists(getServerSideGroupKey) && getServerSideGroupKey) {\n          rowNode.key = getServerSideGroupKey(rowNode.data);\n        }\n\n        var isServerSideGroup = this.gridOptionsWrapper.getIsServerSideGroupFunc();\n\n        if (ag_grid_community_1._.exists(isServerSideGroup) && isServerSideGroup) {\n          rowNode.group = isServerSideGroup(rowNode.data);\n        }\n      } else if (rowNode.group) {\n        rowNode.key = this.valueService.getValue(this.rowGroupColumn, rowNode);\n\n        if (rowNode.key === null || rowNode.key === undefined) {\n          ag_grid_community_1._.doOnce(function () {\n            console.warn(\"null and undefined values are not allowed for server side row model keys\");\n\n            if (_this.rowGroupColumn) {\n              console.warn(\"column = \" + _this.rowGroupColumn.getId());\n            }\n\n            console.warn(\"data is \", rowNode.data);\n          }, 'ServerSideBlock-CannotHaveNullOrUndefinedForKey');\n        }\n      } else if (this.usingMasterDetail) {\n        var isRowMasterFunc = this.gridOptionsWrapper.getIsRowMasterFunc();\n\n        if (ag_grid_community_1._.exists(isRowMasterFunc) && isRowMasterFunc) {\n          rowNode.master = isRowMasterFunc(rowNode.data);\n        } else {\n          rowNode.master = true;\n        }\n      }\n    } else {\n      rowNode.setDataAndId(undefined, undefined);\n      rowNode.key = null;\n    }\n\n    if (this.usingTreeData || this.groupLevel) {\n      this.setGroupDataIntoRowNode(rowNode);\n      this.setChildCountIntoRowNode(rowNode);\n    }\n  };\n\n  ServerSideBlock.prototype.setChildCountIntoRowNode = function (rowNode) {\n    var getChildCount = this.gridOptionsWrapper.getChildCountFunc();\n\n    if (getChildCount) {\n      rowNode.allChildrenCount = getChildCount(rowNode.data);\n    }\n  };\n\n  ServerSideBlock.prototype.setGroupDataIntoRowNode = function (rowNode) {\n    var _this = this;\n\n    var groupDisplayCols = this.columnController.getGroupDisplayColumns();\n    var usingTreeData = this.gridOptionsWrapper.isTreeData();\n    groupDisplayCols.forEach(function (col) {\n      if (usingTreeData) {\n        if (ag_grid_community_1._.missing(rowNode.groupData)) {\n          rowNode.groupData = {};\n        }\n\n        rowNode.groupData[col.getColId()] = rowNode.key;\n      } else if (col.isRowGroupDisplayed(_this.rowGroupColumn.getId())) {\n        var groupValue = _this.valueService.getValue(_this.rowGroupColumn, rowNode);\n\n        if (ag_grid_community_1._.missing(rowNode.groupData)) {\n          rowNode.groupData = {};\n        }\n\n        rowNode.groupData[col.getColId()] = groupValue;\n      }\n    });\n  };\n\n  ServerSideBlock.prototype.loadFromDatasource = function () {\n    var _this = this;\n\n    var params = this.createLoadParams();\n    window.setTimeout(function () {\n      if (_this.params.datasource) {\n        _this.params.datasource.getRows(params);\n      }\n    }, 0);\n  };\n\n  ServerSideBlock.prototype.createBlankRowNode = function (rowIndex) {\n    var rowNode = _super.prototype.createBlankRowNode.call(this, rowIndex);\n\n    rowNode.group = this.groupLevel;\n    rowNode.leafGroup = this.leafGroup;\n    rowNode.level = this.level;\n    rowNode.uiLevel = this.level;\n    rowNode.parent = this.parentRowNode; // stub gets set to true here, and then false when this rowNode gets it's data\n\n    rowNode.stub = true;\n\n    if (rowNode.group) {\n      rowNode.expanded = false;\n      rowNode.field = this.groupField;\n      rowNode.rowGroupColumn = this.rowGroupColumn;\n    }\n\n    return rowNode;\n  };\n\n  ServerSideBlock.prototype.createGroupKeys = function (groupNode) {\n    var keys = [];\n    var pointer = groupNode;\n\n    while (pointer && pointer.level >= 0) {\n      keys.push(pointer.key);\n      pointer = pointer.parent;\n    }\n\n    keys.reverse();\n    return keys;\n  };\n\n  ServerSideBlock.prototype.isPixelInRange = function (pixel) {\n    return pixel >= this.blockTop && pixel < this.blockTop + this.blockHeight;\n  };\n\n  ServerSideBlock.prototype.getRowBounds = function (index, virtualRowCount) {\n    var start = this.getStartRow();\n    var end = this.getEndRow();\n\n    var extractRowBounds = function extractRowBounds(rowNode) {\n      return {\n        rowHeight: rowNode.rowHeight,\n        rowTop: rowNode.rowTop\n      };\n    };\n\n    for (var i = start; i <= end; i++) {\n      // the blocks can have extra rows in them, if they are the last block\n      // in the cache and the virtual row count doesn't divide evenly by the\n      if (i >= virtualRowCount) {\n        continue;\n      }\n\n      var rowNode = this.getRowUsingLocalIndex(i);\n\n      if (rowNode) {\n        if (rowNode.rowIndex === index) {\n          return extractRowBounds(rowNode);\n        }\n\n        if (rowNode.group && rowNode.expanded && ag_grid_community_1._.exists(rowNode.childrenCache)) {\n          var serverSideCache = rowNode.childrenCache;\n\n          if (serverSideCache.isDisplayIndexInCache(index)) {\n            return serverSideCache.getRowBounds(index);\n          }\n        } else if (rowNode.master && rowNode.expanded && ag_grid_community_1._.exists(rowNode.detailNode)) {\n          if (rowNode.detailNode.rowIndex === index) {\n            return extractRowBounds(rowNode.detailNode);\n          }\n        }\n      }\n    }\n\n    console.error(\" ag-Grid: looking for invalid row index in Server Side Row Model, index=\" + index);\n    return null;\n  };\n\n  ServerSideBlock.prototype.getRowIndexAtPixel = function (pixel, virtualRowCount) {\n    var start = this.getStartRow();\n    var end = this.getEndRow();\n\n    for (var i = start; i <= end; i++) {\n      // the blocks can have extra rows in them, if they are the last block\n      // in the cache and the virtual row count doesn't divide evenly by the\n      if (i >= virtualRowCount) {\n        continue;\n      }\n\n      var rowNode = this.getRowUsingLocalIndex(i);\n\n      if (rowNode) {\n        // first check if pixel is in range of current row\n        if (rowNode.isPixelInRange(pixel)) {\n          return rowNode.rowIndex;\n        } // then check if current row contains a detail row with pixel in range\n\n\n        var expandedMasterRow = rowNode.master && rowNode.expanded;\n\n        if (expandedMasterRow && rowNode.detailNode.isPixelInRange(pixel)) {\n          return rowNode.detailNode.rowIndex;\n        } // then check if it's a group row with a child cache with pixel in range\n\n\n        if (rowNode.group && rowNode.expanded && ag_grid_community_1._.exists(rowNode.childrenCache)) {\n          var serverSideCache = rowNode.childrenCache;\n\n          if (serverSideCache.isPixelInRange(pixel)) {\n            return serverSideCache.getRowIndexAtPixel(pixel);\n          }\n        }\n      }\n    }\n\n    console.warn(\"ag-Grid: invalid pixel range for server side block \" + pixel);\n    return 0;\n  };\n\n  ServerSideBlock.prototype.clearRowTops = function (virtualRowCount) {\n    this.forEachRowNode(virtualRowCount, function (rowNode) {\n      rowNode.clearRowTop();\n\n      var hasChildCache = rowNode.group && ag_grid_community_1._.exists(rowNode.childrenCache);\n\n      if (hasChildCache) {\n        var serverSideCache = rowNode.childrenCache;\n        serverSideCache.clearRowTops();\n      }\n    });\n  };\n\n  ServerSideBlock.prototype.setDisplayIndexes = function (displayIndexSeq, virtualRowCount, nextRowTop) {\n    this.displayIndexStart = displayIndexSeq.peek();\n    this.blockTop = nextRowTop.value;\n    this.forEachRowNode(virtualRowCount, function (rowNode) {\n      rowNode.setRowIndex(displayIndexSeq.next());\n      rowNode.setRowTop(nextRowTop.value);\n      nextRowTop.value += rowNode.rowHeight;\n      var hasDetailRow = rowNode.master && rowNode.expanded;\n\n      if (hasDetailRow) {\n        rowNode.detailNode.setRowIndex(displayIndexSeq.next());\n        rowNode.detailNode.setRowTop(nextRowTop.value);\n        nextRowTop.value += rowNode.detailNode.rowHeight;\n      }\n\n      var hasChildCache = rowNode.group && ag_grid_community_1._.exists(rowNode.childrenCache);\n\n      if (hasChildCache) {\n        var serverSideCache = rowNode.childrenCache;\n\n        if (rowNode.expanded) {\n          serverSideCache.setDisplayIndexes(displayIndexSeq, nextRowTop);\n        } else {\n          // we need to clear the row tops, as the row renderer depends on\n          // this to know if the row should be faded out\n          serverSideCache.clearRowTops();\n        }\n      }\n    });\n    this.displayIndexEnd = displayIndexSeq.peek();\n    this.blockHeight = nextRowTop.value - this.blockTop;\n  };\n\n  ServerSideBlock.prototype.forEachRowNode = function (virtualRowCount, callback) {\n    var start = this.getStartRow();\n    var end = this.getEndRow();\n\n    for (var i = start; i <= end; i++) {\n      // the blocks can have extra rows in them, if they are the last block\n      // in the cache and the virtual row count doesn't divide evenly by the\n      if (i >= virtualRowCount) {\n        continue;\n      }\n\n      var rowNode = this.getRowUsingLocalIndex(i);\n\n      if (rowNode) {\n        callback(rowNode);\n      }\n    }\n  };\n\n  ServerSideBlock.prototype.createLoadParams = function () {\n    var groupKeys = this.createGroupKeys(this.parentRowNode);\n    var request = {\n      startRow: this.getStartRow(),\n      endRow: this.getEndRow(),\n      rowGroupCols: this.params.rowGroupCols,\n      valueCols: this.params.valueCols,\n      pivotCols: this.params.pivotCols,\n      pivotMode: this.params.pivotMode,\n      groupKeys: groupKeys,\n      filterModel: this.params.filterModel,\n      sortModel: this.params.sortModel\n    };\n    var params = {\n      successCallback: this.pageLoaded.bind(this, this.getVersion()),\n      failCallback: this.pageLoadFailed.bind(this),\n      request: request,\n      parentNode: this.parentRowNode\n    };\n    return params;\n  };\n\n  ServerSideBlock.prototype.isDisplayIndexInBlock = function (displayIndex) {\n    return displayIndex >= this.displayIndexStart && displayIndex < this.displayIndexEnd;\n  };\n\n  ServerSideBlock.prototype.isBlockBefore = function (displayIndex) {\n    return displayIndex >= this.displayIndexEnd;\n  };\n\n  ServerSideBlock.prototype.getDisplayIndexStart = function () {\n    return this.displayIndexStart;\n  };\n\n  ServerSideBlock.prototype.getDisplayIndexEnd = function () {\n    return this.displayIndexEnd;\n  };\n\n  ServerSideBlock.prototype.getBlockHeight = function () {\n    return this.blockHeight;\n  };\n\n  ServerSideBlock.prototype.getBlockTop = function () {\n    return this.blockTop;\n  };\n\n  ServerSideBlock.prototype.isGroupLevel = function () {\n    return this.groupLevel;\n  };\n\n  ServerSideBlock.prototype.getGroupField = function () {\n    return this.groupField;\n  };\n\n  ServerSideBlock.DefaultBlockSize = 100;\n\n  __decorate([ag_grid_community_1.Autowired('rowRenderer'), __metadata(\"design:type\", ag_grid_community_1.RowRenderer)], ServerSideBlock.prototype, \"rowRenderer\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('columnController'), __metadata(\"design:type\", ag_grid_community_1.ColumnController)], ServerSideBlock.prototype, \"columnController\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('valueService'), __metadata(\"design:type\", ag_grid_community_1.ValueService)], ServerSideBlock.prototype, \"valueService\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", ag_grid_community_1.GridOptionsWrapper)], ServerSideBlock.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([ag_grid_community_1.PostConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], ServerSideBlock.prototype, \"init\", null);\n\n  __decorate([__param(0, ag_grid_community_1.Qualifier('loggerFactory')), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [ag_grid_community_1.LoggerFactory]), __metadata(\"design:returntype\", void 0)], ServerSideBlock.prototype, \"setBeans\", null);\n\n  return ServerSideBlock;\n}(ag_grid_community_1.RowNodeBlock);\n\nexports.ServerSideBlock = ServerSideBlock;","map":null,"metadata":{},"sourceType":"script"}