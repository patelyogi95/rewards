{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ag_grid_community_1 = require(\"ag-grid-community\");\n\nvar VirtualList =\n/** @class */\nfunction (_super) {\n  __extends(VirtualList, _super);\n\n  function VirtualList() {\n    var _this = _super.call(this, undefined) || this;\n\n    _this.rowsInBodyContainer = {};\n    _this.rowHeight = 20;\n    return _this;\n  }\n\n  VirtualList.prototype.init = function () {\n    this.setTemplate(VirtualList.TEMPLATE);\n    this.eListContainer = this.queryForHtmlElement(\".ag-virtual-list-container\");\n    this.addScrollListener();\n    this.rowHeight = this.gridOptionsWrapper.getVirtualItemHeight();\n  };\n\n  VirtualList.prototype.ensureIndexVisible = function (index) {\n    var lastRow = this.model.getRowCount();\n\n    if (typeof index !== 'number' || index < 0 || index >= lastRow) {\n      console.warn('invalid row index for ensureIndexVisible: ' + index);\n      return;\n    } // let nodeAtIndex = this.rowModel.getRow(index);\n\n\n    var rowTopPixel = index * this.rowHeight;\n    var rowBottomPixel = rowTopPixel + this.rowHeight;\n    var viewportTopPixel = this.getGui().scrollTop;\n    var viewportHeight = this.getGui().offsetHeight;\n    var viewportBottomPixel = viewportTopPixel + viewportHeight;\n    var viewportScrolledPastRow = viewportTopPixel > rowTopPixel;\n    var viewportScrolledBeforeRow = viewportBottomPixel < rowBottomPixel;\n\n    if (viewportScrolledPastRow) {\n      // if row is before, scroll up with row at top\n      this.getGui().scrollTop = rowTopPixel;\n    } else if (viewportScrolledBeforeRow) {\n      // if row is below, scroll down with row at bottom\n      var newScrollPosition = rowBottomPixel - viewportHeight;\n      this.getGui().scrollTop = newScrollPosition;\n    }\n  };\n\n  VirtualList.prototype.setComponentCreator = function (componentCreator) {\n    this.componentCreator = componentCreator;\n  };\n\n  VirtualList.prototype.getRowHeight = function () {\n    return this.rowHeight;\n  };\n\n  VirtualList.prototype.getScrollTop = function () {\n    return this.getGui().scrollTop;\n  };\n\n  VirtualList.prototype.setRowHeight = function (rowHeight) {\n    this.rowHeight = rowHeight;\n    this.refresh();\n  };\n\n  VirtualList.prototype.refresh = function () {\n    if (ag_grid_community_1._.missing(this.model)) {\n      return;\n    }\n\n    this.eListContainer.style.height = this.model.getRowCount() * this.rowHeight + \"px\";\n    this.clearVirtualRows();\n    this.drawVirtualRows();\n  };\n\n  VirtualList.prototype.clearVirtualRows = function () {\n    var rowsToRemove = Object.keys(this.rowsInBodyContainer);\n    this.removeVirtualRows(rowsToRemove);\n  };\n\n  VirtualList.prototype.drawVirtualRows = function () {\n    var topPixel = this.getGui().scrollTop;\n    var bottomPixel = topPixel + this.getGui().offsetHeight;\n    var firstRow = Math.floor(topPixel / this.rowHeight);\n    var lastRow = Math.floor(bottomPixel / this.rowHeight);\n    this.ensureRowsRendered(firstRow, lastRow);\n  };\n\n  VirtualList.prototype.ensureRowsRendered = function (start, finish) {\n    // at the end, this array will contain the items we need to remove\n    var rowsToRemove = Object.keys(this.rowsInBodyContainer); // add in new rows\n\n    for (var rowIndex = start; rowIndex <= finish; rowIndex++) {\n      // see if item already there, and if yes, take it out of the 'to remove' array\n      if (rowsToRemove.indexOf(rowIndex.toString()) >= 0) {\n        rowsToRemove.splice(rowsToRemove.indexOf(rowIndex.toString()), 1);\n        continue;\n      } // check this row actually exists (in case overflow buffer window exceeds real data)\n\n\n      if (this.model.getRowCount() > rowIndex) {\n        var value = this.model.getRow(rowIndex);\n        this.insertRow(value, rowIndex);\n      }\n    } // at this point, everything in our 'rowsToRemove' . . .\n\n\n    this.removeVirtualRows(rowsToRemove);\n  }; // takes array of row id's\n\n\n  VirtualList.prototype.removeVirtualRows = function (rowsToRemove) {\n    var _this = this;\n\n    rowsToRemove.forEach(function (index) {\n      var component = _this.rowsInBodyContainer[index];\n\n      _this.eListContainer.removeChild(component.eDiv);\n\n      if (component.rowComponent.destroy) {\n        component.rowComponent.destroy();\n      }\n\n      delete _this.rowsInBodyContainer[index];\n    });\n  };\n\n  VirtualList.prototype.insertRow = function (value, rowIndex) {\n    var eDiv = document.createElement('div');\n\n    ag_grid_community_1._.addCssClass(eDiv, 'ag-virtual-list-item');\n\n    eDiv.style.top = this.rowHeight * rowIndex + \"px\";\n    eDiv.style.lineHeight = this.rowHeight + \"px\";\n    var rowComponent = this.componentCreator(value);\n    eDiv.appendChild(rowComponent.getGui());\n    this.eListContainer.appendChild(eDiv);\n    this.rowsInBodyContainer[rowIndex] = {\n      rowComponent: rowComponent,\n      eDiv: eDiv\n    };\n  };\n\n  VirtualList.prototype.addScrollListener = function () {\n    var _this = this;\n\n    this.addGuiEventListener('scroll', function () {\n      _this.drawVirtualRows();\n    });\n  };\n\n  VirtualList.prototype.setModel = function (model) {\n    this.model = model;\n  };\n\n  VirtualList.TEMPLATE = \"<div class=\\\"ag-virtual-list-viewport\\\">\\n            <div class=\\\"ag-virtual-list-container\\\"></div>\\n        </div>\";\n\n  __decorate([ag_grid_community_1.Autowired('environment'), __metadata(\"design:type\", ag_grid_community_1.Environment)], VirtualList.prototype, \"environment\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", ag_grid_community_1.GridOptionsWrapper)], VirtualList.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([ag_grid_community_1.PostConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], VirtualList.prototype, \"init\", null);\n\n  return VirtualList;\n}(ag_grid_community_1.Component);\n\nexports.VirtualList = VirtualList;","map":null,"metadata":{},"sourceType":"script"}