{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar main_1 = require(\"ag-grid-community/main\");\n\nvar ToolPanelColumnComp =\n/** @class */\nfunction (_super) {\n  __extends(ToolPanelColumnComp, _super);\n\n  function ToolPanelColumnComp(column, columnDept, allowDragging, groupsExist) {\n    var _this = _super.call(this) || this;\n\n    _this.processingColumnStateChange = false;\n    _this.column = column;\n    _this.columnDept = columnDept;\n    _this.allowDragging = allowDragging;\n    _this.groupsExist = groupsExist;\n    return _this;\n  }\n\n  ToolPanelColumnComp.prototype.init = function () {\n    this.setTemplate(ToolPanelColumnComp.TEMPLATE);\n    this.displayName = this.columnController.getDisplayNameForColumn(this.column, 'toolPanel');\n\n    var displayNameSanitised = main_1._.escape(this.displayName);\n\n    this.eLabel.innerHTML = displayNameSanitised; // if grouping, we add an extra level of indent, to cater for expand/contract icons we need to indent for\n\n    var indent = this.columnDept;\n\n    if (this.groupsExist) {\n      this.addCssClass('ag-toolpanel-add-group-indent');\n    }\n\n    this.addCssClass(\"ag-toolpanel-indent-\" + indent);\n    this.setupDragging();\n    this.addDestroyableEventListener(this.eventService, main_1.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onColumnStateChanged.bind(this));\n    this.addDestroyableEventListener(this.column, main_1.Column.EVENT_VALUE_CHANGED, this.onColumnStateChanged.bind(this));\n    this.addDestroyableEventListener(this.column, main_1.Column.EVENT_PIVOT_CHANGED, this.onColumnStateChanged.bind(this));\n    this.addDestroyableEventListener(this.column, main_1.Column.EVENT_ROW_GROUP_CHANGED, this.onColumnStateChanged.bind(this));\n    this.addDestroyableEventListener(this.column, main_1.Column.EVENT_VISIBLE_CHANGED, this.onColumnStateChanged.bind(this));\n    this.addDestroyableEventListener(this.gridOptionsWrapper, 'functionsReadOnly', this.onColumnStateChanged.bind(this));\n    this.addDestroyableEventListener(this.cbSelect, 'change', this.onCheckboxChanged.bind(this));\n    this.addDestroyableEventListener(this.eLabel, 'click', this.onLabelClicked.bind(this));\n    this.onColumnStateChanged();\n    main_1.CssClassApplier.addToolPanelClassesFromColDef(this.column.getColDef(), this.getGui(), this.gridOptionsWrapper, this.column, null);\n  };\n\n  ToolPanelColumnComp.prototype.onLabelClicked = function () {\n    var nextState = !this.cbSelect.isSelected();\n    this.onChangeCommon(nextState);\n  };\n\n  ToolPanelColumnComp.prototype.onCheckboxChanged = function (event) {\n    this.onChangeCommon(event.selected);\n  };\n\n  ToolPanelColumnComp.prototype.onChangeCommon = function (nextState) {\n    // ignore lock visible columns\n    if (this.column.isLockVisible()) {\n      return;\n    } // only want to action if the user clicked the checkbox, not is we are setting the checkbox because\n    // of a change in the model\n\n\n    if (this.processingColumnStateChange) {\n      return;\n    } // action in a timeout, as the action takes some time, we want to update the icons first\n    // so the user gets nice feedback when they click. otherwise there would be a lag and the\n    // user would think the checkboxes were clunky\n\n\n    if (this.columnController.isPivotMode()) {\n      if (nextState) {\n        this.actionCheckedPivotMode();\n      } else {\n        this.actionUnCheckedPivotMode();\n      }\n    } else {\n      this.columnController.setColumnVisible(this.column, nextState, \"columnMenu\");\n    }\n\n    if (this.selectionCallback) {\n      this.selectionCallback(this.isSelected());\n    }\n  };\n\n  ToolPanelColumnComp.prototype.actionUnCheckedPivotMode = function () {\n    var functionPassive = this.gridOptionsWrapper.isFunctionsPassive();\n    var column = this.column;\n    var columnController = this.columnController; // remove pivot if column is pivoted\n\n    if (column.isPivotActive()) {\n      if (functionPassive) {\n        var copyOfPivotColumns = this.columnController.getPivotColumns().slice();\n        copyOfPivotColumns.push(column);\n        var event_1 = {\n          type: main_1.Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST,\n          columns: copyOfPivotColumns,\n          api: this.gridApi,\n          columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event_1);\n      } else {\n        columnController.removePivotColumn(column, \"columnMenu\");\n      }\n    } // remove value if column is value\n\n\n    if (column.isValueActive()) {\n      if (functionPassive) {\n        var copyOfValueColumns = this.columnController.getValueColumns().slice();\n        copyOfValueColumns.push(column);\n        var event_2 = {\n          type: main_1.Events.EVENT_COLUMN_VALUE_CHANGE_REQUEST,\n          columns: copyOfValueColumns,\n          api: this.gridApi,\n          columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event_2);\n      } else {\n        columnController.removeValueColumn(column, \"columnMenu\");\n      }\n    } // remove group if column is grouped\n\n\n    if (column.isRowGroupActive()) {\n      if (functionPassive) {\n        var copyOfRowGroupColumns = this.columnController.getRowGroupColumns().slice();\n        copyOfRowGroupColumns.push(column);\n        var event_3 = {\n          type: main_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST,\n          columns: copyOfRowGroupColumns,\n          api: this.gridApi,\n          columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event_3);\n      } else {\n        columnController.removeRowGroupColumn(column, \"columnMenu\");\n      }\n    }\n  };\n\n  ToolPanelColumnComp.prototype.actionCheckedPivotMode = function () {\n    var column = this.column; // function already active, so do nothing\n\n    if (column.isValueActive() || column.isPivotActive() || column.isRowGroupActive()) {\n      return;\n    }\n\n    var functionPassive = this.gridOptionsWrapper.isFunctionsPassive();\n\n    if (column.isAllowValue()) {\n      if (functionPassive) {\n        var copyOfValueColumns = this.columnController.getValueColumns().slice();\n\n        main_1._.removeFromArray(copyOfValueColumns, column);\n\n        var event_4 = {\n          type: main_1.Events.EVENT_COLUMN_VALUE_CHANGE_REQUEST,\n          api: this.gridApi,\n          columnApi: this.columnApi,\n          columns: copyOfValueColumns\n        };\n        this.eventService.dispatchEvent(event_4);\n      } else {\n        this.columnController.addValueColumn(column, \"columnMenu\");\n      }\n    } else if (column.isAllowRowGroup()) {\n      if (functionPassive) {\n        var copyOfRowGroupColumns = this.columnController.getRowGroupColumns().slice();\n\n        main_1._.removeFromArray(copyOfRowGroupColumns, column);\n\n        var event_5 = {\n          type: main_1.Events.EVENT_COLUMN_ROW_GROUP_CHANGE_REQUEST,\n          api: this.gridApi,\n          columnApi: this.columnApi,\n          columns: copyOfRowGroupColumns\n        };\n        this.eventService.dispatchEvent(event_5);\n      } else {\n        this.columnController.addRowGroupColumn(column, \"columnMenu\");\n      }\n    } else if (column.isAllowPivot()) {\n      if (functionPassive) {\n        var copyOfPivotColumns = this.columnController.getPivotColumns().slice();\n\n        main_1._.removeFromArray(copyOfPivotColumns, column);\n\n        var event_6 = {\n          type: main_1.Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST,\n          api: this.gridApi,\n          columnApi: this.columnApi,\n          columns: copyOfPivotColumns\n        };\n        this.eventService.dispatchEvent(event_6);\n      } else {\n        this.columnController.addPivotColumn(column, \"columnMenu\");\n      }\n    }\n  };\n\n  ToolPanelColumnComp.prototype.setupDragging = function () {\n    var _this = this;\n\n    if (!this.allowDragging) {\n      main_1._.setVisible(this.eDragHandle, false);\n\n      return;\n    }\n\n    var dragSource = {\n      type: main_1.DragSourceType.ToolPanel,\n      eElement: this.eDragHandle,\n      dragItemName: this.displayName,\n      dragItemCallback: function dragItemCallback() {\n        return _this.createDragItem();\n      }\n    };\n    this.dragAndDropService.addDragSource(dragSource, true);\n    this.addDestroyFunc(function () {\n      return _this.dragAndDropService.removeDragSource(dragSource);\n    });\n  };\n\n  ToolPanelColumnComp.prototype.createDragItem = function () {\n    var visibleState = {};\n    visibleState[this.column.getId()] = this.column.isVisible();\n    return {\n      columns: [this.column],\n      visibleState: visibleState\n    };\n  };\n\n  ToolPanelColumnComp.prototype.onColumnStateChanged = function () {\n    this.processingColumnStateChange = true;\n    var isPivotMode = this.columnController.isPivotMode();\n\n    if (isPivotMode) {\n      // if reducing, checkbox means column is one of pivot, value or group\n      var anyFunctionActive = this.column.isAnyFunctionActive();\n      this.cbSelect.setSelected(anyFunctionActive);\n\n      if (this.selectionCallback) {\n        this.selectionCallback(this.isSelected());\n      }\n    } else {\n      // if not reducing, the checkbox tells us if column is visible or not\n      this.cbSelect.setSelected(this.column.isVisible());\n\n      if (this.selectionCallback) {\n        this.selectionCallback(this.isSelected());\n      }\n    }\n\n    var checkboxReadOnly;\n\n    if (isPivotMode) {\n      // when in pivot mode, the item should be read only if:\n      //  a) gui is not allowed make any changes\n      var functionsReadOnly = this.gridOptionsWrapper.isFunctionsReadOnly(); //  b) column is not allow any functions on it\n\n      var noFunctionsAllowed = !this.column.isAnyFunctionAllowed();\n      checkboxReadOnly = functionsReadOnly || noFunctionsAllowed;\n    } else {\n      // when in normal mode, the checkbox is read only if visibility is locked\n      checkboxReadOnly = this.column.isLockVisible();\n    }\n\n    this.cbSelect.setReadOnly(checkboxReadOnly);\n    var checkboxPassive = isPivotMode && this.gridOptionsWrapper.isFunctionsPassive();\n    this.cbSelect.setPassive(checkboxPassive);\n    this.processingColumnStateChange = false;\n  };\n\n  ToolPanelColumnComp.prototype.getDisplayName = function () {\n    return this.displayName;\n  };\n\n  ToolPanelColumnComp.prototype.onSelectAllChanged = function (value) {\n    if (value !== this.cbSelect.isSelected()) {\n      if (!this.cbSelect.isReadOnly()) {\n        this.cbSelect.toggle();\n      }\n    }\n  };\n\n  ToolPanelColumnComp.prototype.isSelected = function () {\n    return this.cbSelect.isSelected();\n  };\n\n  ToolPanelColumnComp.prototype.isSelectable = function () {\n    return !this.cbSelect.isReadOnly();\n  };\n\n  ToolPanelColumnComp.prototype.isExpandable = function () {\n    return false;\n  };\n\n  ToolPanelColumnComp.prototype.setExpanded = function (value) {\n    console.warn('ag-grid: can not expand a column item that does not represent a column group header');\n  };\n\n  ToolPanelColumnComp.TEMPLATE = \"<div class=\\\"ag-column-tool-panel-column\\\">\\n            <ag-checkbox ref=\\\"cbSelect\\\" class=\\\"ag-column-select-checkbox\\\"></ag-checkbox>\\n            <span class=\\\"ag-column-drag\\\" ref=\\\"eDragHandle\\\"></span>\\n            <span class=\\\"ag-column-tool-panel-column-label\\\" ref=\\\"eLabel\\\"></span>\\n        </div>\";\n\n  __decorate([main_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", main_1.GridOptionsWrapper)], ToolPanelColumnComp.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([main_1.Autowired('columnController'), __metadata(\"design:type\", main_1.ColumnController)], ToolPanelColumnComp.prototype, \"columnController\", void 0);\n\n  __decorate([main_1.Autowired('eventService'), __metadata(\"design:type\", main_1.EventService)], ToolPanelColumnComp.prototype, \"eventService\", void 0);\n\n  __decorate([main_1.Autowired('dragAndDropService'), __metadata(\"design:type\", main_1.DragAndDropService)], ToolPanelColumnComp.prototype, \"dragAndDropService\", void 0);\n\n  __decorate([main_1.Autowired('columnApi'), __metadata(\"design:type\", main_1.ColumnApi)], ToolPanelColumnComp.prototype, \"columnApi\", void 0);\n\n  __decorate([main_1.Autowired('gridApi'), __metadata(\"design:type\", main_1.GridApi)], ToolPanelColumnComp.prototype, \"gridApi\", void 0);\n\n  __decorate([main_1.RefSelector('eLabel'), __metadata(\"design:type\", HTMLElement)], ToolPanelColumnComp.prototype, \"eLabel\", void 0);\n\n  __decorate([main_1.RefSelector('cbSelect'), __metadata(\"design:type\", main_1.AgCheckbox)], ToolPanelColumnComp.prototype, \"cbSelect\", void 0);\n\n  __decorate([main_1.RefSelector('eDragHandle'), __metadata(\"design:type\", HTMLElement)], ToolPanelColumnComp.prototype, \"eDragHandle\", void 0);\n\n  __decorate([main_1.PostConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], ToolPanelColumnComp.prototype, \"init\", null);\n\n  return ToolPanelColumnComp;\n}(main_1.Component);\n\nexports.ToolPanelColumnComp = ToolPanelColumnComp;","map":null,"metadata":{},"sourceType":"script"}