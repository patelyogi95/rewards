{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ag_grid_community_1 = require(\"ag-grid-community\");\n\nvar clipboardService_1 = require(\"../clipboardService\");\n\nvar aggFuncService_1 = require(\"../aggregation/aggFuncService\");\n\nvar chartingService_1 = require(\"../charts/chartingService\");\n\nvar MenuItemMapper =\n/** @class */\nfunction () {\n  function MenuItemMapper() {}\n\n  MenuItemMapper.prototype.mapWithStockItems = function (originalList, column) {\n    var _this = this;\n\n    if (!originalList) {\n      return [];\n    }\n\n    var resultList = [];\n    originalList.forEach(function (menuItemOrString) {\n      var result;\n\n      if (typeof menuItemOrString === 'string') {\n        result = _this.getStockMenuItem(menuItemOrString, column);\n      } else {\n        result = menuItemOrString;\n      }\n\n      if (result.subMenu) {\n        var resultDef = result;\n        resultDef.subMenu = _this.mapWithStockItems(resultDef.subMenu, column);\n      }\n\n      if (result != null) {\n        resultList.push(result);\n      }\n    });\n    return resultList;\n  };\n\n  MenuItemMapper.prototype.getStockMenuItem = function (key, column) {\n    var _this = this;\n\n    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();\n\n    switch (key) {\n      case 'pinSubMenu':\n        return {\n          name: localeTextFunc('pinColumn', 'Pin Column'),\n          icon: ag_grid_community_1.Utils.createIconNoSpan('menuPin', this.gridOptionsWrapper, null),\n          subMenu: ['pinLeft', 'pinRight', 'clearPinned']\n        };\n\n      case 'pinLeft':\n        return {\n          name: localeTextFunc('pinLeft', 'Pin Left'),\n          action: function action() {\n            return _this.columnController.setColumnPinned(column, ag_grid_community_1.Column.PINNED_LEFT, \"contextMenu\");\n          },\n          checked: column.isPinnedLeft()\n        };\n\n      case 'pinRight':\n        return {\n          name: localeTextFunc('pinRight', 'Pin Right'),\n          action: function action() {\n            return _this.columnController.setColumnPinned(column, ag_grid_community_1.Column.PINNED_RIGHT, \"contextMenu\");\n          },\n          checked: column.isPinnedRight()\n        };\n\n      case 'clearPinned':\n        return {\n          name: localeTextFunc('noPin', 'No Pin'),\n          action: function action() {\n            return _this.columnController.setColumnPinned(column, null, \"contextMenu\");\n          },\n          checked: !column.isPinned()\n        };\n\n      case 'valueAggSubMenu':\n        return {\n          name: localeTextFunc('valueAggregation', 'Value Aggregation'),\n          icon: ag_grid_community_1.Utils.createIconNoSpan('menuValue', this.gridOptionsWrapper, null),\n          subMenu: this.createAggregationSubMenu(column)\n        };\n\n      case 'autoSizeThis':\n        return {\n          name: localeTextFunc('autosizeThiscolumn', 'Autosize This Column'),\n          action: function action() {\n            return _this.columnController.autoSizeColumn(column, \"contextMenu\");\n          }\n        };\n\n      case 'autoSizeAll':\n        return {\n          name: localeTextFunc('autosizeAllColumns', 'Autosize All Columns'),\n          action: function action() {\n            return _this.columnController.autoSizeAllColumns(\"contextMenu\");\n          }\n        };\n\n      case 'rowGroup':\n        return {\n          name: localeTextFunc('groupBy', 'Group by') + ' ' + ag_grid_community_1._.escape(this.columnController.getDisplayNameForColumn(column, 'header')),\n          action: function action() {\n            return _this.columnController.addRowGroupColumn(column, \"contextMenu\");\n          },\n          icon: ag_grid_community_1.Utils.createIconNoSpan('menuAddRowGroup', this.gridOptionsWrapper, null)\n        };\n\n      case 'rowUnGroup':\n        return {\n          name: localeTextFunc('ungroupBy', 'Un-Group by') + ' ' + ag_grid_community_1._.escape(this.columnController.getDisplayNameForColumn(column, 'header')),\n          action: function action() {\n            return _this.columnController.removeRowGroupColumn(column, \"contextMenu\");\n          },\n          icon: ag_grid_community_1.Utils.createIconNoSpan('menuRemoveRowGroup', this.gridOptionsWrapper, null)\n        };\n\n      case 'resetColumns':\n        return {\n          name: localeTextFunc('resetColumns', 'Reset Columns'),\n          action: function action() {\n            return _this.columnController.resetColumnState(false, \"contextMenu\");\n          }\n        };\n\n      case 'expandAll':\n        return {\n          name: localeTextFunc('expandAll', 'Expand All'),\n          action: function action() {\n            return _this.gridApi.expandAll();\n          }\n        };\n\n      case 'contractAll':\n        return {\n          name: localeTextFunc('collapseAll', 'Collapse All'),\n          action: function action() {\n            return _this.gridApi.collapseAll();\n          }\n        };\n\n      case 'copy':\n        return {\n          name: localeTextFunc('copy', 'Copy'),\n          shortcut: localeTextFunc('ctrlC', 'Ctrl+C'),\n          icon: ag_grid_community_1.Utils.createIconNoSpan('clipboardCopy', this.gridOptionsWrapper, null),\n          action: function action() {\n            return _this.clipboardService.copyToClipboard(false);\n          }\n        };\n\n      case 'copyWithHeaders':\n        return {\n          name: localeTextFunc('copyWithHeaders', 'Copy with Headers'),\n          // shortcut: localeTextFunc('ctrlC','Ctrl+C'),\n          icon: ag_grid_community_1.Utils.createIconNoSpan('clipboardCopy', this.gridOptionsWrapper, null),\n          action: function action() {\n            return _this.clipboardService.copyToClipboard(true);\n          }\n        };\n\n      case 'paste':\n        return {\n          name: localeTextFunc('paste', 'Paste'),\n          shortcut: localeTextFunc('ctrlV', 'Ctrl+V'),\n          disabled: true,\n          icon: ag_grid_community_1.Utils.createIconNoSpan('clipboardPaste', this.gridOptionsWrapper, null),\n          action: function action() {\n            return _this.clipboardService.pasteFromClipboard();\n          }\n        };\n\n      case 'export':\n        var exportSubMenuItems = [];\n\n        if (!this.gridOptionsWrapper.isSuppressCsvExport()) {\n          exportSubMenuItems.push('csvExport');\n        }\n\n        if (!this.gridOptionsWrapper.isSuppressExcelExport()) {\n          exportSubMenuItems.push('excelExport');\n          exportSubMenuItems.push('excelXmlExport');\n        }\n\n        return {\n          name: localeTextFunc('export', 'Export'),\n          subMenu: exportSubMenuItems\n        };\n\n      case 'csvExport':\n        return {\n          name: localeTextFunc('csvExport', 'CSV Export'),\n          action: function action() {\n            return _this.gridApi.exportDataAsCsv({});\n          }\n        };\n\n      case 'excelExport':\n        return {\n          name: localeTextFunc('excelExport', 'Excel Export (.xlsx)'),\n          action: function action() {\n            return _this.gridApi.exportDataAsExcel({\n              exportMode: 'xlsx'\n            });\n          }\n        };\n\n      case 'excelXmlExport':\n        return {\n          name: localeTextFunc('excelXmlExport', 'Excel Export (.xml)'),\n          action: function action() {\n            return _this.gridApi.exportDataAsExcel({\n              exportMode: 'xml'\n            });\n          }\n        };\n\n      case 'separator':\n        return 'separator';\n\n      case 'chartRange':\n        return {\n          name: 'Chart Range',\n          action: function action() {\n            _this.chartingService.chartRange();\n          }\n        };\n\n      case 'chartEverything':\n        return {\n          name: 'Chart Everything',\n          action: function action() {\n            _this.chartingService.chartEverything();\n          }\n        };\n\n      default:\n        console.warn(\"ag-Grid: unknown menu item type \" + key);\n        return null;\n    }\n  };\n\n  MenuItemMapper.prototype.createAggregationSubMenu = function (column) {\n    var _this = this;\n\n    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();\n    var columnIsAlreadyAggValue = column.isValueActive();\n    var funcNames = this.aggFuncService.getFuncNames(column);\n    var columnToUse;\n\n    if (column.isPrimary()) {\n      columnToUse = column;\n    } else {\n      var pivotValueColumn = column.getColDef().pivotValueColumn;\n      columnToUse = ag_grid_community_1._.exists(pivotValueColumn) ? pivotValueColumn : undefined;\n    }\n\n    var result = [];\n    funcNames.forEach(function (funcName) {\n      result.push({\n        name: localeTextFunc(funcName, funcName),\n        action: function action() {\n          _this.columnController.setColumnAggFunc(columnToUse, funcName, \"contextMenu\");\n\n          _this.columnController.addValueColumn(columnToUse, \"contextMenu\");\n        },\n        checked: columnIsAlreadyAggValue && columnToUse.getAggFunc() === funcName\n      });\n    });\n    return result;\n  };\n\n  __decorate([ag_grid_community_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", ag_grid_community_1.GridOptionsWrapper)], MenuItemMapper.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('columnController'), __metadata(\"design:type\", ag_grid_community_1.ColumnController)], MenuItemMapper.prototype, \"columnController\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('gridApi'), __metadata(\"design:type\", ag_grid_community_1.GridApi)], MenuItemMapper.prototype, \"gridApi\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('clipboardService'), __metadata(\"design:type\", clipboardService_1.ClipboardService)], MenuItemMapper.prototype, \"clipboardService\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('aggFuncService'), __metadata(\"design:type\", aggFuncService_1.AggFuncService)], MenuItemMapper.prototype, \"aggFuncService\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('chartingService'), __metadata(\"design:type\", chartingService_1.ChartingService)], MenuItemMapper.prototype, \"chartingService\", void 0);\n\n  MenuItemMapper = __decorate([ag_grid_community_1.Bean('menuItemMapper')], MenuItemMapper);\n  return MenuItemMapper;\n}();\n\nexports.MenuItemMapper = MenuItemMapper;","map":null,"metadata":{},"sourceType":"script"}