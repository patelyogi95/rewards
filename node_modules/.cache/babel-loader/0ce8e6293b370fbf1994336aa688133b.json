{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar shape_1 = require(\"./shape\");\n\nvar path2D_1 = require(\"../path2D\");\n\nvar bbox_1 = require(\"../bbox\");\n\nvar canvas_1 = require(\"../../canvas/canvas\"); // _pixelSnap(3) compiles to Object(_canvas_canvas__WEBPACK_IMPORTED_MODULE_3__[\"pixelSnap\"])(3)\n// This has some performance hit and is not nice for readability nor debugging.\n// For example, it shows up as `pixelSnap` in the Sources tab, but can't\n// be called from console like that.\n// See https://github.com/webpack/webpack/issues/5600\n// The suggested `concatenateModules: true` config made no difference.\n\n\nvar pixelSnap = canvas_1.pixelSnap;\n\nvar Rect =\n/** @class */\nfunction (_super) {\n  __extends(Rect, _super);\n\n  function Rect() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.path = new path2D_1.Path2D();\n    _this._dirtyPath = true;\n    _this._x = 0;\n    _this._y = 0;\n    _this._width = 10;\n    _this._height = 10;\n    _this._radius = 0;\n    /**\n     * If `true`, the rect is aligned to the pixel grid for crisp looking lines.\n     * Animated rects may not look nice with this option enabled, for example\n     * when a rect is translated by a sub-pixel value on each frame.\n     */\n\n    _this._crisp = false;\n\n    _this.getBBox = function () {\n      return {\n        x: _this.x,\n        y: _this.y,\n        width: _this.width,\n        height: _this.height\n      };\n    };\n\n    return _this;\n  }\n\n  Rect.create = function (x, y, width, height, radius) {\n    if (radius === void 0) {\n      radius = 0;\n    }\n\n    var rect = new Rect();\n    rect.x = x;\n    rect.y = y;\n    rect.width = width;\n    rect.height = height;\n    rect.radius = radius;\n    return rect;\n  };\n\n  Object.defineProperty(Rect.prototype, \"dirtyPath\", {\n    get: function get() {\n      return this._dirtyPath;\n    },\n    set: function set(value) {\n      if (this._dirtyPath !== value) {\n        this._dirtyPath = value;\n\n        if (value) {\n          this.dirty = true;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Rect.prototype, \"x\", {\n    get: function get() {\n      return this._x;\n    },\n    set: function set(value) {\n      if (this._x !== value) {\n        this._x = value;\n        this.dirtyPath = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Rect.prototype, \"y\", {\n    get: function get() {\n      return this._y;\n    },\n    set: function set(value) {\n      if (this._y !== value) {\n        this._y = value;\n        this.dirtyPath = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Rect.prototype, \"width\", {\n    get: function get() {\n      return this._width;\n    },\n    set: function set(value) {\n      if (this._width !== value) {\n        this._width = value;\n        this.dirtyPath = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Rect.prototype, \"height\", {\n    get: function get() {\n      return this._height;\n    },\n    set: function set(value) {\n      if (this._height !== value) {\n        this._height = value;\n        this.dirtyPath = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Rect.prototype, \"radius\", {\n    get: function get() {\n      return this._radius;\n    },\n    set: function set(value) {\n      if (this._radius !== value) {\n        this._radius = value;\n        this.dirtyPath = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Rect.prototype, \"crisp\", {\n    get: function get() {\n      return this._crisp;\n    },\n    set: function set(value) {\n      if (this._crisp !== value) {\n        this._crisp = value;\n        this.dirtyPath = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Rect.prototype, \"lineWidth\", {\n    get: function get() {\n      return this._lineWidth;\n    },\n    set: function set(value) {\n      if (this._lineWidth !== value) {\n        this._lineWidth = value; // Normally, when the `lineWidth` changes, we only need to repaint the rect\n        // without updating the path. If the `isCrisp` is set to `true` however,\n        // we need to update the path to make sure the new stroke aligns to\n        // the pixel grid. This is the reason we override the `lineWidth` setter\n        // and getter here.\n\n        if (this.crisp) {\n          this.dirtyPath = true;\n        } else {\n          this.dirty = true;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Rect.prototype.updatePath = function () {\n    if (!this.dirtyPath) return;\n    var path = this.path;\n    var radius = this.radius;\n    path.clear();\n\n    if (!radius) {\n      if (this.crisp) {\n        path.rect(Math.round(this.x) + pixelSnap(this.lineWidth), Math.round(this.y) + pixelSnap(this.lineWidth), Math.round(this.width) + Math.round(this.x % 1 + this.width % 1), Math.round(this.height) + Math.round(this.y % 1 + this.height % 1));\n      } else {\n        path.rect(this.x, this.y, this.width, this.height);\n      }\n    } else {\n      // TODO: rect radius, this will require implementing\n      //       another `arcTo` method in the `Path2D` class.\n      throw \"TODO\";\n    }\n\n    this.dirtyPath = false;\n  };\n\n  Rect.prototype.isPointInPath = function (x, y) {\n    var point = this.transformPoint(x, y);\n    var bbox = this.getBBox();\n    return bbox_1.isPointInBBox(bbox, point.x, point.y);\n  };\n\n  Rect.prototype.isPointInStroke = function (x, y) {\n    return false;\n  };\n\n  Rect.prototype.render = function (ctx) {\n    if (this.dirtyTransform) {\n      this.computeTransformMatrix();\n    }\n\n    this.matrix.toContext(ctx);\n    this.applyContextAttributes(ctx);\n    this.updatePath();\n    this.scene.appendPath(this.path);\n\n    if (this.fillStyle) {\n      ctx.fill();\n    }\n\n    if (this.lineWidth && this.strokeStyle) {\n      ctx.stroke();\n    }\n\n    this.dirty = false;\n  };\n\n  return Rect;\n}(shape_1.Shape);\n\nexports.Rect = Rect;","map":null,"metadata":{},"sourceType":"script"}