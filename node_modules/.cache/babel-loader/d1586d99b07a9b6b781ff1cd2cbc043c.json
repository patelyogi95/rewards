{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar linearScale_1 = require(\"./scale/linearScale\");\n\nvar ag_grid_community_1 = require(\"ag-grid-community\");\n\nvar bandScale_1 = require(\"./scale/bandScale\");\n\nvar canvas_1 = require(\"./canvas/canvas\");\n\nvar canvasAxis_1 = require(\"./canvasAxis\");\n\nvar cartesianChart_1 = require(\"./chart/cartesianChart\");\n\nvar categoryAxis_1 = require(\"./chart/axis/categoryAxis\");\n\nvar numberAxis_1 = require(\"./chart/axis/numberAxis\");\n\nvar barSeries_1 = require(\"./chart/series/barSeries\");\n\nvar gradientTheme = [['#69C5EC', '#53AFD6'], ['#FDED7C', '#FDE95C'], ['#B6D471', '#A4CA4E'], ['#EC866B', '#E76846'], ['#FB9D5D', '#FA8535']];\n\nvar Chart_Old =\n/** @class */\nfunction (_super) {\n  __extends(Chart_Old, _super);\n\n  function Chart_Old(chartOptions) {\n    var _this = _super.call(this, \"<div></div>\") || this;\n\n    _this.chartOptions = chartOptions;\n    var canvas = canvas_1.createHdpiCanvas(_this.chartOptions.width, _this.chartOptions.height);\n    _this.eCanvas = canvas;\n    _this.datasource = chartOptions.datasource;\n\n    _this.datasource.addEventListener('modelUpdated', _this.refresh.bind(_this));\n\n    _this.refresh();\n\n    return _this;\n  }\n\n  Chart_Old.prototype.refresh = function () {\n    var errors = this.datasource.getErrors();\n    var eGui = this.getGui();\n\n    ag_grid_community_1._.clearElement(eGui);\n\n    if (errors && errors.length > 0) {\n      var html_1 = [];\n      html_1.push(\"Could not create chart:\");\n      html_1.push(\"<ul>\");\n      errors.forEach(function (error) {\n        return html_1.push(\"<li>\" + error + \"</li>\");\n      });\n      html_1.push(\"</ul>\");\n      eGui.innerHTML = html_1.join('');\n    } else {\n      var ctx = this.eCanvas.getContext('2d');\n      ctx.clearRect(0, 0, this.chartOptions.width, this.chartOptions.height);\n      this.drawChart();\n      eGui.appendChild(this.eCanvas);\n    }\n  };\n\n  Chart_Old.prototype.destroy = function () {\n    if (this.chartOptions.datasource) {\n      this.chartOptions.datasource.destroy();\n    }\n  };\n\n  Chart_Old.prototype.drawChart = function () {\n    var yData = [];\n    var yFieldNames = [];\n    var ds = this.chartOptions.datasource;\n    var xData = ds.getFieldNames();\n    var yFields = ds.getFields();\n    var rowCount = ds.getRowCount();\n\n    var getValuesForField = function getValuesForField(field) {\n      var res = [];\n\n      for (var i = 0; i < rowCount; i++) {\n        var val = ds.getValue(i, field);\n        res.push(val);\n      }\n\n      return res;\n    };\n\n    yFieldNames = [];\n\n    for (var i = 0; i < rowCount; i++) {\n      yFieldNames.push(ds.getCategory(i));\n    }\n\n    yData = [];\n    yFields.forEach(function (yField) {\n      var values = getValuesForField(yField);\n      yData.push(values);\n    });\n    var padding = {\n      top: 20,\n      right: 40,\n      bottom: 40,\n      left: 60\n    };\n    var canvasWidth = this.chartOptions.width;\n    var canvasHeight = this.chartOptions.height;\n    var seriesWidth = canvasWidth - padding.left - padding.right;\n    var seriesHeight = canvasHeight - padding.top - padding.bottom;\n    var yScale = linearScale_1.default(); // Find the tallest bar in each group, then the tallest bar overall.\n\n    yScale.domain = [0, Math.max.apply(Math, yData.map(function (values) {\n      return Math.max.apply(Math, values);\n    }))];\n    yScale.range = [seriesHeight, 0];\n    var xGroupScale = new bandScale_1.BandScale();\n    xGroupScale.domain = xData;\n    xGroupScale.range = [0, seriesWidth];\n    xGroupScale.paddingInner = 0.1;\n    xGroupScale.paddingOuter = 0.3;\n    var groupWidth = xGroupScale.bandwidth;\n    var xBarScale = new bandScale_1.BandScale();\n    xBarScale.domain = yFieldNames;\n    xBarScale.range = [0, groupWidth];\n    xBarScale.padding = 0.1;\n    xBarScale.round = true;\n    var barWidth = xBarScale.bandwidth;\n    var ctx = this.eCanvas.getContext('2d');\n    ctx.font = '14px Verdana';\n    var colors = gradientTheme; // bars\n\n    ctx.save();\n    ctx.translate(padding.left, padding.top);\n\n    var _loop_1 = function _loop_1(i) {\n      var category = xData[i];\n      var values = yData[i];\n      var groupX = xGroupScale.convert(category); // x-coordinate of the group\n\n      values.forEach(function (value, j) {\n        var barX = xBarScale.convert(yFieldNames[j]); // x-coordinate of the bar within a group\n\n        var x = groupX + barX;\n        var y = yScale.convert(value);\n        var color = colors[j % colors.length];\n\n        if (Array.isArray(color)) {\n          var gradient = ctx.createLinearGradient(x, y, x + barWidth, seriesHeight);\n          gradient.addColorStop(0, color[0]);\n          gradient.addColorStop(1, color[1]);\n          ctx.fillStyle = gradient;\n        } else {\n          ctx.fillStyle = color;\n        }\n\n        ctx.fillRect(x, y, barWidth, seriesHeight - y);\n        ctx.strokeRect(x, y, barWidth, seriesHeight - y);\n        var label = yFieldNames[j];\n        var labelWidth = ctx.measureText(label).width;\n\n        if (labelWidth < barWidth - 10) {\n          ctx.fillStyle = 'black';\n          ctx.fillText(label, x + barWidth / 2 - labelWidth / 2, y + 20);\n        }\n      });\n    };\n\n    for (var i = 0; i < xData.length; i++) {\n      _loop_1(i);\n    }\n\n    ctx.restore(); // y-axis\n\n    var yAxis = new canvasAxis_1.CanvasAxis(yScale);\n    yAxis.translation = [padding.left, padding.top];\n    yAxis.render(ctx); // x-axis\n\n    var xAxis = new canvasAxis_1.CanvasAxis(xGroupScale);\n    xAxis.rotation = -Math.PI / 2;\n    xAxis.translation = [padding.left, padding.top + seriesHeight];\n    xAxis.flippedLabels = true;\n    xAxis.render(ctx);\n  };\n\n  return Chart_Old;\n}(ag_grid_community_1.Component);\n\nexports.Chart_Old = Chart_Old;\n\nvar Chart =\n/** @class */\nfunction (_super) {\n  __extends(Chart, _super);\n\n  function Chart(chartOptions) {\n    var _this = _super.call(this, \"<div><div ref=\\\"eChart\\\"></div><div ref=\\\"eErrors\\\"></div></div>\") || this;\n\n    _this.chartOptions = chartOptions;\n    _this.datasource = chartOptions.datasource;\n\n    _this.datasource.addEventListener('modelUpdated', _this.refresh.bind(_this));\n\n    _this.setupChart();\n\n    _this.refresh();\n\n    return _this;\n  }\n\n  Chart.prototype.setupChart = function () {\n    this.chart = new cartesianChart_1.CartesianChart(new categoryAxis_1.CategoryAxis(), new numberAxis_1.NumberAxis(), this.eChart);\n    this.chart.width = 1200;\n    this.chart.height = 800;\n    this.chart.padding = {\n      top: 50,\n      right: 50,\n      bottom: 50,\n      left: 50\n    };\n    this.barSeries = new barSeries_1.BarSeries();\n    this.chart.addSeries(this.barSeries);\n    this.barSeries.grouped = false;\n  };\n\n  Chart.prototype.refresh = function () {\n    var errors = this.datasource.getErrors();\n    var eGui = this.getGui();\n    var errorsExist = errors && errors.length > 0;\n\n    ag_grid_community_1._.setVisible(this.eChart, !errorsExist);\n\n    ag_grid_community_1._.setVisible(this.eErrors, errorsExist);\n\n    if (errorsExist) {\n      var html_2 = [];\n      html_2.push(\"Could not create chart:\");\n      html_2.push(\"<ul>\");\n      errors.forEach(function (error) {\n        return html_2.push(\"<li>\" + error + \"</li>\");\n      });\n      html_2.push(\"</ul>\");\n      eGui.innerHTML = html_2.join('');\n    } else {\n      this.drawChart();\n    }\n  };\n\n  Chart.prototype.destroy = function () {\n    if (this.chartOptions.datasource) {\n      this.chartOptions.datasource.destroy();\n    }\n  };\n\n  Chart.prototype.drawChart = function () {\n    var ds = this.datasource;\n    var data = [];\n    var rowCount = ds.getRowCount();\n    var fields = ds.getFields();\n    this.barSeries.yFieldNames = ds.getFieldNames();\n\n    var _loop_2 = function _loop_2(i) {\n      var item = {\n        category: ds.getCategory(i)\n      };\n      fields.forEach(function (field) {\n        return item[field] = ds.getValue(i, field);\n      });\n      data.push(item);\n    }; // this.barSeries.yFields = fields;\n    // this.barSeries.xField = 'category';\n\n\n    for (var i = 0; i < rowCount; i++) {\n      _loop_2(i);\n    } // this.barSeries.data = data;\n\n\n    this.barSeries.setDataAndFields(data, 'category', fields);\n    /*\n    let yData: any[][] = [];\n    let yFieldNames: string[] = [];\n     const ds = this.chartOptions.datasource;\n    const xData = ds.getFieldNames();\n    const yFields = ds.getFields();\n    const rowCount = ds.getRowCount();\n     const getValuesForField = (field: string): any[] => {\n        const res: any[] = [];\n        for (let i = 0; i<rowCount; i++) {\n            const val = ds.getValue(i, field);\n            res.push(val);\n        }\n        return res;\n    };\n     yFieldNames = [];\n    for (let i = 0; i<rowCount; i++) {\n        yFieldNames.push(ds.getCategory(i));\n    }\n     yData = [];\n    yFields.forEach( yField => {\n        const values = getValuesForField(yField);\n        yData.push(values);\n    });\n     const padding = {\n        top: 20,\n        right: 40,\n        bottom: 40,\n        left: 60\n    };\n     const canvasWidth = this.chartOptions.width;\n    const canvasHeight = this.chartOptions.height;\n    const seriesWidth = canvasWidth - padding.left - padding.right;\n    const seriesHeight = canvasHeight - padding.top - padding.bottom;\n     const yScale = scaleLinear();\n    // Find the tallest bar in each group, then the tallest bar overall.\n    yScale.domain = [0, Math.max(...yData.map(values => Math.max(...values)))];\n    yScale.range = [seriesHeight, 0];\n     const xGroupScale = new BandScale<string>();\n    xGroupScale.domain = xData;\n    xGroupScale.range = [0, seriesWidth];\n    xGroupScale.paddingInner = 0.1;\n    xGroupScale.paddingOuter = 0.3;\n    const groupWidth = xGroupScale.bandwidth;\n     const xBarScale = new BandScale<string>();\n    xBarScale.domain = yFieldNames;\n    xBarScale.range = [0, groupWidth];\n    xBarScale.padding = 0.1;\n    xBarScale.round = true;\n    const barWidth = xBarScale.bandwidth;\n     const ctx = this.eCanvas.getContext('2d')!;\n    ctx.font = '14px Verdana';\n     const colors = gradientTheme;\n     // bars\n    ctx.save();\n    ctx.translate(padding.left, padding.top);\n    for (let i = 0; i < xData.length; i++) {\n        const category = xData[i];\n        const values = yData[i];\n        const groupX = xGroupScale.convert(category); // x-coordinate of the group\n        values.forEach((value, j) => {\n            const barX = xBarScale.convert(yFieldNames[j]); // x-coordinate of the bar within a group\n            const x = groupX + barX;\n            const y = yScale.convert(value);\n             const color = colors[j % colors.length];\n            if (Array.isArray(color)) {\n                const gradient = ctx.createLinearGradient(x, y, x + barWidth, seriesHeight);\n                gradient.addColorStop(0, color[0]);\n                gradient.addColorStop(1, color[1]);\n                ctx.fillStyle = gradient;\n            } else {\n                ctx.fillStyle = color;\n            }\n            ctx.fillRect(x, y, barWidth, seriesHeight - y);\n            ctx.strokeRect(x, y, barWidth, seriesHeight - y);\n             const label = yFieldNames[j];\n            const labelWidth = ctx.measureText(label).width;\n            if (labelWidth < barWidth - 10) {\n                ctx.fillStyle = 'black';\n                ctx.fillText(label, x + barWidth / 2 - labelWidth / 2, y + 20);\n            }\n        })\n    }\n    ctx.restore();\n     // y-axis\n    const yAxis = new CanvasAxis<number>(yScale);\n    yAxis.translation = [padding.left, padding.top];\n    yAxis.render(ctx);\n     // x-axis\n    const xAxis = new CanvasAxis<string>(xGroupScale);\n    xAxis.rotation = -Math.PI / 2;\n    xAxis.translation = [padding.left, padding.top + seriesHeight];\n    xAxis.flippedLabels = true;\n    xAxis.render(ctx);*/\n  };\n\n  __decorate([ag_grid_community_1.RefSelector('eChart'), __metadata(\"design:type\", HTMLElement)], Chart.prototype, \"eChart\", void 0);\n\n  __decorate([ag_grid_community_1.RefSelector('eErrors'), __metadata(\"design:type\", HTMLElement)], Chart.prototype, \"eErrors\", void 0);\n\n  return Chart;\n}(ag_grid_community_1.Component);\n\nexports.Chart = Chart;","map":null,"metadata":{},"sourceType":"script"}