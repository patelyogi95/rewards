{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar polyRoots_1 = require(\"./polyRoots\");\n/**\n * Returns the intersection point for the given pair of line segments, or null,\n * if the segments are parallel or don't intersect.\n * Based on http://paulbourke.net/geometry/pointlineplane/\n */\n\n\nfunction segmentIntersection(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2) {\n  var d = (ax2 - ax1) * (by2 - by1) - (ay2 - ay1) * (bx2 - bx1);\n\n  if (d === 0) {\n    // The lines are parallel.\n    return null;\n  }\n\n  var ua = ((bx2 - bx1) * (ay1 - by1) - (ax1 - bx1) * (by2 - by1)) / d;\n  var ub = ((ax2 - ax1) * (ay1 - by1) - (ay2 - ay1) * (ax1 - bx1)) / d;\n\n  if (ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {\n    return {\n      x: ax1 + ua * (ax2 - ax1),\n      y: ay1 + ua * (ay2 - ay1)\n    };\n  }\n\n  return null; // The intersection point is outside either or both segments.\n}\n\nexports.segmentIntersection = segmentIntersection;\n/**\n * Returns intersection points of the given cubic curve and the line segment.\n * Takes in x/y components of cubic control points and line segment start/end points\n * as parameters.\n */\n\nfunction cubicSegmentIntersections(px1, py1, px2, py2, px3, py3, px4, py4, x1, y1, x2, y2) {\n  var intersections = []; // Find line equation coefficients.\n\n  var A = y1 - y2;\n  var B = x2 - x1;\n  var C = x1 * (y2 - y1) - y1 * (x2 - x1); // Find cubic Bezier curve equation coefficients from control points.\n\n  var bx = bezierCoefficients(px1, px2, px3, px4);\n  var by = bezierCoefficients(py1, py2, py3, py4);\n  var a = A * bx[0] + B * by[0]; // t^3\n\n  var b = A * bx[1] + B * by[1]; // t^2\n\n  var c = A * bx[2] + B * by[2]; // t\n\n  var d = A * bx[3] + B * by[3] + C; // 1\n\n  var roots = polyRoots_1.cubicRoots(a, b, c, d); // Verify that the roots are within bounds of the linear segment.\n\n  for (var i = 0; i < roots.length; i++) {\n    var t = roots[i];\n    var tt = t * t;\n    var ttt = t * tt; // Find the cartesian plane coordinates for the parametric root `t`.\n\n    var x = bx[0] * ttt + bx[1] * tt + bx[2] * t + bx[3];\n    var y = by[0] * ttt + by[1] * tt + by[2] * t + by[3]; // The parametric cubic roots we found are intersection points\n    // with an infinite line, and so the x/y coordinates above are as well.\n    // Make sure the x/y is also within the bounds of the given segment.\n\n    var s = void 0;\n\n    if (x1 !== x2) {\n      s = (x - x1) / (x2 - x1);\n    } else {\n      // the line is vertical\n      s = (y - y1) / (y2 - y1);\n    }\n\n    if (s >= 0 && s <= 1) {\n      intersections.push({\n        x: x,\n        y: y\n      });\n    }\n  }\n\n  return intersections;\n}\n\nexports.cubicSegmentIntersections = cubicSegmentIntersections;\n/**\n * Returns the given coordinates vector multiplied by the coefficient matrix\n * of the parametric cubic BÃ©zier equation.\n */\n\nfunction bezierCoefficients(P1, P2, P3, P4) {\n  return [-P1 + 3 * P2 - 3 * P3 + P4, 3 * P1 - 6 * P2 + 3 * P3, -3 * P1 + 3 * P2, P1 //                 | 1  0  0  0| |P4|\n  ];\n}\n\nexports.bezierCoefficients = bezierCoefficients;","map":null,"metadata":{},"sourceType":"script"}