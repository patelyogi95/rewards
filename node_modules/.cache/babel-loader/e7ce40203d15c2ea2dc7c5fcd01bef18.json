{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar scene_1 = require(\"../scene/scene\");\n\nvar group_1 = require(\"../scene/group\");\n\nvar Chart =\n/** @class */\nfunction () {\n  function Chart(parent) {\n    if (parent === void 0) {\n      parent = document.body;\n    }\n\n    var _this = this;\n\n    this.scene = new scene_1.Scene();\n    this._padding = {\n      top: 10,\n      right: 10,\n      bottom: 10,\n      left: 10\n    };\n    this.layoutCallbackId = 0;\n\n    this._performLayout = function () {\n      _this.layoutCallbackId = 0;\n\n      _this.performLayout();\n    };\n\n    this._series = [];\n    this.scene.parent = parent;\n    this.scene.root = new group_1.Group();\n  }\n\n  Object.defineProperty(Chart.prototype, \"padding\", {\n    get: function get() {\n      return this._padding;\n    },\n    set: function set(value) {\n      this._padding = value;\n      this.layoutPending = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Chart.prototype, \"size\", {\n    set: function set(value) {\n      this.scene.size = value;\n      this.layoutPending = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Chart.prototype, \"width\", {\n    get: function get() {\n      return this.scene.width;\n    },\n\n    /**\n     * The width of the chart in CSS pixels.\n     */\n    set: function set(value) {\n      this.scene.width = value;\n      this.layoutPending = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Chart.prototype, \"height\", {\n    get: function get() {\n      return this.scene.height;\n    },\n\n    /**\n     * The height of the chart in CSS pixels.\n     */\n    set: function set(value) {\n      this.scene.height = value;\n      this.layoutPending = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Chart.prototype, \"layoutPending\", {\n    /**\n     * Only `true` while we are waiting for the layout to start.\n     * This will be `false` if the layout has already started and is ongoing.\n     */\n    get: function get() {\n      return !!this.layoutCallbackId;\n    },\n    set: function set(value) {\n      if (value) {\n        if (!this.layoutCallbackId) {\n          this.layoutCallbackId = requestAnimationFrame(this._performLayout);\n        }\n      } else if (this.layoutCallbackId) {\n        cancelAnimationFrame(this.layoutCallbackId);\n        this.layoutCallbackId = 0;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Chart.prototype, \"series\", {\n    get: function get() {\n      return this._series;\n    },\n    set: function set(values) {\n      this._series = values;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Chart;\n}();\n\nexports.Chart = Chart;","map":null,"metadata":{},"sourceType":"script"}