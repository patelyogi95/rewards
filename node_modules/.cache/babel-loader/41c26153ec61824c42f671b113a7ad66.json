{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ag_grid_community_1 = require(\"ag-grid-community\");\n\nvar pivotStage_1 = require(\"./pivotStage\");\n\nvar aggFuncService_1 = require(\"../aggregation/aggFuncService\");\n\nvar AggregationStage =\n/** @class */\nfunction () {\n  function AggregationStage() {} // it's possible to recompute the aggregate without doing the other parts\n  // + gridApi.recomputeAggregates()\n\n\n  AggregationStage.prototype.execute = function (params) {\n    // we don't do aggregation if doing legacy tree good\n    var doingLegacyTreeData = ag_grid_community_1._.exists(this.gridOptionsWrapper.getNodeChildDetailsFunc());\n\n    if (doingLegacyTreeData) {\n      return null;\n    } // if changed path is active, it means we came from a) change detection or b) transaction update.\n    // for both of these, if no value columns are present, it means there is nothing to aggregate now\n    // and there is no cleanup to be done (as value columns don't change between transactions or change\n    // detections). if no value columns and no changed path, means we have to go through all nodes in\n    // case we need to clean up agg data from before.\n\n\n    var noValueColumns = ag_grid_community_1._.missingOrEmpty(this.columnController.getValueColumns());\n\n    var noUserAgg = !this.gridOptionsWrapper.getGroupRowAggNodesFunc();\n    var changedPathActive = params.changedPath && params.changedPath.isActive();\n\n    if (noValueColumns && noUserAgg && changedPathActive) {\n      return;\n    }\n\n    var aggDetails = this.createAggDetails(params);\n    this.recursivelyCreateAggData(aggDetails);\n  };\n\n  AggregationStage.prototype.createAggDetails = function (params) {\n    var pivotActive = this.columnController.isPivotActive();\n    var measureColumns = this.columnController.getValueColumns();\n    var pivotColumns = pivotActive ? this.columnController.getPivotColumns() : [];\n    var aggDetails = {\n      changedPath: params.changedPath,\n      valueColumns: measureColumns,\n      pivotColumns: pivotColumns\n    };\n    return aggDetails;\n  };\n\n  AggregationStage.prototype.recursivelyCreateAggData = function (aggDetails) {\n    var _this = this;\n\n    var callback = function callback(rowNode) {\n      var hasNoChildren = !rowNode.hasChildren();\n\n      if (hasNoChildren) {\n        // this check is needed for TreeData, in case the node is no longer a child,\n        // but it was a child previously.\n        if (rowNode.aggData) {\n          rowNode.setAggData(null);\n        } // never agg data for leaf nodes\n\n\n        return;\n      } //Optionally prevent the aggregation at the root Node\n      //https://ag-grid.atlassian.net/browse/AG-388\n\n\n      var isRootNode = rowNode.level === -1;\n\n      if (isRootNode) {\n        var notPivoting = !_this.columnController.isPivotMode();\n\n        var suppressAggAtRootLevel = _this.gridOptionsWrapper.isSuppressAggAtRootLevel();\n\n        if (suppressAggAtRootLevel && notPivoting) {\n          return;\n        }\n      }\n\n      _this.aggregateRowNode(rowNode, aggDetails);\n    };\n\n    aggDetails.changedPath.forEachChangedNodeDepthFirst(callback, true);\n  };\n\n  AggregationStage.prototype.aggregateRowNode = function (rowNode, aggDetails) {\n    var measureColumnsMissing = aggDetails.valueColumns.length === 0;\n    var pivotColumnsMissing = aggDetails.pivotColumns.length === 0;\n    var userFunc = this.gridOptionsWrapper.getGroupRowAggNodesFunc();\n    var aggResult;\n\n    if (userFunc) {\n      aggResult = userFunc(rowNode.childrenAfterFilter);\n    } else if (measureColumnsMissing) {\n      aggResult = null;\n    } else if (pivotColumnsMissing) {\n      aggResult = this.aggregateRowNodeUsingValuesOnly(rowNode, aggDetails);\n    } else {\n      aggResult = this.aggregateRowNodeUsingValuesAndPivot(rowNode);\n    }\n\n    rowNode.setAggData(aggResult); // if we are grouping, then it's possible there is a sibling footer\n    // to the group, so update the data here also if there is one\n\n    if (rowNode.sibling) {\n      rowNode.sibling.setAggData(aggResult);\n    }\n  };\n\n  AggregationStage.prototype.aggregateRowNodeUsingValuesAndPivot = function (rowNode) {\n    var _this = this;\n\n    var result = {};\n    var pivotColumnDefs = this.pivotStage.getPivotColumnDefs(); // Step 1: process value columns\n\n    pivotColumnDefs.filter(function (v) {\n      return !ag_grid_community_1._.exists(v.pivotTotalColumnIds);\n    }) // only process pivot value columns\n    .forEach(function (valueColDef) {\n      var keys = valueColDef.pivotKeys || [];\n      var values;\n      var valueColumn = valueColDef.pivotValueColumn;\n      var colId = valueColDef.colId;\n\n      if (rowNode.leafGroup) {\n        // lowest level group, get the values from the mapped set\n        values = _this.getValuesFromMappedSet(rowNode.childrenMapped, keys, valueColumn);\n      } else {\n        // value columns and pivot columns, non-leaf group\n        values = _this.getValuesPivotNonLeaf(rowNode, colId);\n      }\n\n      result[colId] = _this.aggregateValues(values, valueColumn.getAggFunc());\n    }); // Step 2: process total columns\n\n    pivotColumnDefs.filter(function (v) {\n      return ag_grid_community_1._.exists(v.pivotTotalColumnIds);\n    }) // only process pivot total columns\n    .forEach(function (totalColDef) {\n      var aggResults = [];\n      var pivotValueColumn = totalColDef.pivotValueColumn,\n          pivotTotalColumnIds = totalColDef.pivotTotalColumnIds,\n          colId = totalColDef.colId; //retrieve results for colIds associated with this pivot total column\n\n      if (!pivotTotalColumnIds || !pivotTotalColumnIds.length) {\n        return;\n      }\n\n      pivotTotalColumnIds.forEach(function (colId) {\n        aggResults.push(result[colId]);\n      });\n      result[colId] = _this.aggregateValues(aggResults, pivotValueColumn.getAggFunc());\n    });\n    return result;\n  };\n\n  AggregationStage.prototype.aggregateRowNodeUsingValuesOnly = function (rowNode, aggDetails) {\n    var _this = this;\n\n    var result = {};\n    var changedValueColumns = aggDetails.changedPath.isActive() ? aggDetails.changedPath.getValueColumnsForNode(rowNode, aggDetails.valueColumns) : aggDetails.valueColumns;\n    var notChangedValueColumns = aggDetails.changedPath.isActive() ? aggDetails.changedPath.getNotValueColumnsForNode(rowNode, aggDetails.valueColumns) : null;\n    var values2d = this.getValuesNormal(rowNode, changedValueColumns);\n    var oldValues = rowNode.aggData;\n    changedValueColumns.forEach(function (valueColumn, index) {\n      result[valueColumn.getId()] = _this.aggregateValues(values2d[index], valueColumn.getAggFunc());\n    });\n\n    if (notChangedValueColumns && oldValues) {\n      notChangedValueColumns.forEach(function (valueColumn) {\n        result[valueColumn.getId()] = oldValues[valueColumn.getId()];\n      });\n    }\n\n    return result;\n  };\n\n  AggregationStage.prototype.getValuesPivotNonLeaf = function (rowNode, colId) {\n    var values = [];\n    rowNode.childrenAfterFilter.forEach(function (node) {\n      var value = node.aggData[colId];\n      values.push(value);\n    });\n    return values;\n  };\n\n  AggregationStage.prototype.getValuesFromMappedSet = function (mappedSet, keys, valueColumn) {\n    var _this = this;\n\n    var mapPointer = mappedSet;\n    keys.forEach(function (key) {\n      return mapPointer = mapPointer ? mapPointer[key] : null;\n    });\n\n    if (!mapPointer) {\n      return [];\n    }\n\n    var values = [];\n    mapPointer.forEach(function (rowNode) {\n      var value = _this.valueService.getValue(valueColumn, rowNode);\n\n      values.push(value);\n    });\n    return values;\n  };\n\n  AggregationStage.prototype.getValuesNormal = function (rowNode, valueColumns) {\n    // create 2d array, of all values for all valueColumns\n    var values = [];\n    valueColumns.forEach(function () {\n      return values.push([]);\n    });\n    var valueColumnCount = valueColumns.length;\n    var rowCount = rowNode.childrenAfterFilter.length;\n\n    for (var i = 0; i < rowCount; i++) {\n      var childNode = rowNode.childrenAfterFilter[i];\n\n      for (var j = 0; j < valueColumnCount; j++) {\n        var valueColumn = valueColumns[j]; // if the row is a group, then it will only have an agg result value,\n        // which means valueGetter is never used.\n\n        var value = this.valueService.getValue(valueColumn, childNode);\n        values[j].push(value);\n      }\n    }\n\n    return values;\n  };\n\n  AggregationStage.prototype.aggregateValues = function (values, aggFuncOrString) {\n    var aggFunction;\n\n    if (typeof aggFuncOrString === 'string') {\n      aggFunction = this.aggFuncService.getAggFunc(aggFuncOrString);\n    } else {\n      aggFunction = aggFuncOrString;\n    }\n\n    if (typeof aggFunction !== 'function') {\n      console.error(\"ag-Grid: unrecognised aggregation function \" + aggFuncOrString);\n      return null;\n    }\n\n    return aggFunction(values);\n  };\n\n  __decorate([ag_grid_community_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", ag_grid_community_1.GridOptionsWrapper)], AggregationStage.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('columnController'), __metadata(\"design:type\", ag_grid_community_1.ColumnController)], AggregationStage.prototype, \"columnController\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('valueService'), __metadata(\"design:type\", ag_grid_community_1.ValueService)], AggregationStage.prototype, \"valueService\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('pivotStage'), __metadata(\"design:type\", pivotStage_1.PivotStage)], AggregationStage.prototype, \"pivotStage\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('aggFuncService'), __metadata(\"design:type\", aggFuncService_1.AggFuncService)], AggregationStage.prototype, \"aggFuncService\", void 0);\n\n  AggregationStage = __decorate([ag_grid_community_1.Bean('aggregationStage')], AggregationStage);\n  return AggregationStage;\n}();\n\nexports.AggregationStage = AggregationStage;","map":null,"metadata":{},"sourceType":"script"}