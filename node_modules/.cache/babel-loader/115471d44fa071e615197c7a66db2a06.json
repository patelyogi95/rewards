{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction default_1(a, b, count) {\n  var step = tickStep(a, b, count);\n  a = Math.ceil(a / step) * step;\n  b = Math.floor(b / step) * step + step / 2; // Add half a step here so that the array returned by `range` includes the last tick.\n\n  return range(a, b, step);\n}\n\nexports.default = default_1;\nvar E10 = Math.sqrt(50);\nvar E5 = Math.sqrt(10);\nvar E2 = Math.sqrt(2);\n\nfunction tickStep(a, b, count) {\n  if (count <= 0) {\n    throw new Error('Count should be greater than zero.');\n  }\n\n  var rawStep = Math.abs(b - a) / count;\n  var step = Math.pow(10, Math.floor(Math.log(rawStep) / Math.LN10)); // = Math.log10(rawStep)\n\n  var error = rawStep / step;\n\n  if (error >= E10) {\n    step *= 10;\n  } else if (error >= E5) {\n    step *= 5;\n  } else if (error >= E2) {\n    step *= 2;\n  }\n\n  return step;\n}\n\nvar NumericTicks =\n/** @class */\nfunction (_super) {\n  __extends(NumericTicks, _super);\n\n  function NumericTicks(decimalDigits, size) {\n    if (size === void 0) {\n      size = 0;\n    }\n\n    var _this = _super.call(this, size) || this;\n\n    _this.decimalDigits = decimalDigits;\n    return _this;\n  }\n\n  return NumericTicks;\n}(Array);\n\nexports.NumericTicks = NumericTicks;\n\nfunction range(a, b, step) {\n  if (step === void 0) {\n    step = 1;\n  }\n\n  var absStep = Math.abs(step);\n  var decimalDigits = absStep > 0 && absStep < 1 ? Math.abs(Math.floor(Math.log(absStep) / Math.LN10)) : 0;\n  var f = Math.pow(10, decimalDigits);\n  var n = Math.max(0, Math.ceil((b - a) / step));\n  var values = new NumericTicks(decimalDigits, n);\n\n  for (var i = 0; i < n; i++) {\n    var value = a + step * i;\n    values[i] = Math.round(value * f) / f;\n  }\n\n  return values;\n}","map":null,"metadata":{},"sourceType":"script"}