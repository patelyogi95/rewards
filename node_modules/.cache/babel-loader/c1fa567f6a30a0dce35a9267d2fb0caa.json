{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar node_1 = require(\"./node\");\n\nvar Group =\n/** @class */\nfunction (_super) {\n  __extends(Group, _super);\n\n  function Group() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  } // We consider a group to be boundless, thus any point belongs to it.\n\n\n  Group.prototype.isPointInNode = function (x, y) {\n    return true;\n  };\n\n  Group.prototype.render = function (ctx) {\n    // A group can have `scaling`, `rotation`, `translation` properties\n    // that are applied to the canvas context before children are rendered,\n    // so all children can be transformed at once.\n    if (this.dirtyTransform) {\n      this.computeTransformMatrix();\n    }\n\n    this.matrix.toContext(ctx);\n    var children = this.children;\n    var n = children.length;\n\n    for (var i = 0; i < n; i++) {\n      ctx.save();\n      var child = children[i];\n\n      if (child.visible) {\n        child.render(ctx);\n      }\n\n      ctx.restore();\n    }\n  };\n\n  return Group;\n}(node_1.Node);\n\nexports.Group = Group;","map":null,"metadata":{},"sourceType":"script"}