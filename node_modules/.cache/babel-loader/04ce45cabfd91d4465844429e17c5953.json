{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ag_grid_community_1 = require(\"ag-grid-community\");\n\nvar md5_1 = require(\"./license/md5\");\n\nvar LicenseManager =\n/** @class */\nfunction () {\n  function LicenseManager() {\n    this.displayWatermark = false;\n  }\n\n  LicenseManager_1 = LicenseManager;\n\n  LicenseManager.prototype.validateLicense = function () {\n    var gridReleaseDate = LicenseManager_1.getGridReleaseDate();\n    var valid = false;\n    var current = false;\n    var expiry = null;\n\n    if (!ag_grid_community_1._.missingOrEmpty(LicenseManager_1.licenseKey) && LicenseManager_1.licenseKey.length > 32) {\n      var _a = LicenseManager_1.extractLicenseComponents(LicenseManager_1.licenseKey),\n          md5 = _a.md5,\n          license = _a.license;\n\n      if (md5 === this.md5.md5(license)) {\n        expiry = LicenseManager_1.extractExpiry(license);\n\n        if (!isNaN(expiry.getTime())) {\n          valid = true;\n          current = gridReleaseDate < expiry;\n        }\n      }\n    }\n\n    if (!valid) {\n      LicenseManager_1.outputMessage('********************************************* Invalid License **************************************************', '* Your license for ag-Grid Enterprise is not valid - please contact accounts@ag-grid.com to obtain a valid license. *');\n      this.displayWatermark = true;\n    } else if (!current) {\n      var formattedExpiryDate = LicenseManager_1.formatDate(expiry);\n      var formattedReleaseDate = LicenseManager_1.formatDate(gridReleaseDate);\n      LicenseManager_1.outputMessage('********************* License not compatible with installed version of ag-Grid Enterprise. *********************', \"Your license for ag-Grid Enterprise expired on \" + formattedExpiryDate + \" but the version installed was released on \" + formattedReleaseDate + \". Please \" + 'contact accounts@ag-grid.com to renew your license');\n      this.displayWatermark = true;\n    }\n  };\n\n  LicenseManager.extractExpiry = function (license) {\n    var restrictionHashed = license.substring(license.lastIndexOf('_') + 1, license.length);\n    return new Date(parseInt(LicenseManager_1.decode(restrictionHashed), 10));\n  };\n\n  LicenseManager.extractLicenseComponents = function (licenseKey) {\n    var hashStart = licenseKey.length - 32;\n    var md5 = licenseKey.substring(hashStart);\n    var license = licenseKey.substring(0, hashStart);\n    return {\n      md5: md5,\n      license: license\n    };\n  };\n\n  LicenseManager.prototype.getLicenseDetails = function (licenseKey) {\n    var _a = LicenseManager_1.extractLicenseComponents(licenseKey),\n        md5 = _a.md5,\n        license = _a.license;\n\n    var valid = md5 === this.md5.md5(license);\n    var expiry = null;\n\n    if (valid) {\n      expiry = LicenseManager_1.extractExpiry(license);\n      valid = !isNaN(expiry.getTime());\n    }\n\n    return {\n      licenseKey: licenseKey,\n      valid: valid,\n      expiry: valid ? LicenseManager_1.formatDate(expiry) : null\n    };\n  };\n\n  LicenseManager.prototype.isDisplayWatermark = function () {\n    return this.displayWatermark;\n  };\n\n  LicenseManager.outputMessage = function (header, message) {\n    console.error('****************************************************************************************************************');\n    console.error('*************************************** ag-Grid Enterprise License *********************************************');\n    console.error(header);\n    console.error(message);\n    console.error('****************************************************************************************************************');\n    console.error('****************************************************************************************************************');\n  };\n\n  LicenseManager.formatDate = function (date) {\n    var monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    var day = date.getDate();\n    var monthIndex = date.getMonth();\n    var year = date.getFullYear();\n    return day + ' ' + monthNames[monthIndex] + ' ' + year;\n  };\n\n  LicenseManager.getGridReleaseDate = function () {\n    return new Date(parseInt(LicenseManager_1.decode(LicenseManager_1.RELEASE_INFORMATION), 10));\n  };\n\n  LicenseManager.decode = function (input) {\n    var keystr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    var t = '';\n    var n, r, i;\n    var s, o, u, a;\n    var f = 0;\n    var e = input.replace(/[^A-Za-z0-9+/=]/g, '');\n\n    while (f < e.length) {\n      s = keystr.indexOf(e.charAt(f++));\n      o = keystr.indexOf(e.charAt(f++));\n      u = keystr.indexOf(e.charAt(f++));\n      a = keystr.indexOf(e.charAt(f++));\n      n = s << 2 | o >> 4;\n      r = (o & 15) << 4 | u >> 2;\n      i = (u & 3) << 6 | a;\n      t = t + String.fromCharCode(n);\n\n      if (u != 64) {\n        t = t + String.fromCharCode(r);\n      }\n\n      if (a != 64) {\n        t = t + String.fromCharCode(i);\n      }\n    }\n\n    t = LicenseManager_1.utf8_decode(t);\n    return t;\n  };\n\n  LicenseManager.utf8_decode = function (input) {\n    input = input.replace(/rn/g, 'n');\n    var t = '';\n\n    for (var n = 0; n < input.length; n++) {\n      var r = input.charCodeAt(n);\n\n      if (r < 128) {\n        t += String.fromCharCode(r);\n      } else if (r > 127 && r < 2048) {\n        t += String.fromCharCode(r >> 6 | 192);\n        t += String.fromCharCode(r & 63 | 128);\n      } else {\n        t += String.fromCharCode(r >> 12 | 224);\n        t += String.fromCharCode(r >> 6 & 63 | 128);\n        t += String.fromCharCode(r & 63 | 128);\n      }\n    }\n\n    return t;\n  };\n\n  LicenseManager.setLicenseKey = function (licenseKey) {\n    LicenseManager_1.licenseKey = licenseKey;\n  };\n\n  var LicenseManager_1;\n  LicenseManager.RELEASE_INFORMATION = 'MTU1MzA4OTQ1Njk3Mw==';\n\n  __decorate([ag_grid_community_1.Autowired('md5'), __metadata(\"design:type\", md5_1.MD5)], LicenseManager.prototype, \"md5\", void 0);\n\n  __decorate([ag_grid_community_1.PreConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], LicenseManager.prototype, \"validateLicense\", null);\n\n  LicenseManager = LicenseManager_1 = __decorate([ag_grid_community_1.Bean('licenseManager')], LicenseManager);\n  return LicenseManager;\n}();\n\nexports.LicenseManager = LicenseManager;","map":null,"metadata":{},"sourceType":"script"}