{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ag_grid_community_1 = require(\"ag-grid-community\");\n\nvar excelXmlSerializingSession_1 = require(\"./excelXmlSerializingSession\");\n\nvar ExcelXlsxSerializingSession =\n/** @class */\nfunction (_super) {\n  __extends(ExcelXlsxSerializingSession, _super);\n\n  function ExcelXlsxSerializingSession() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.stringList = [];\n    _this.stringMap = {};\n    return _this;\n  }\n\n  ExcelXlsxSerializingSession.prototype.onNewHeaderGroupingRow = function () {\n    var currentCells = [];\n    var that = this;\n    this.rows.push({\n      cells: currentCells,\n      height: this.headerRowHeight\n    });\n    return {\n      onColumn: function onColumn(header, index, span) {\n        var styleIds = that.styleLinker(ag_grid_community_1.RowType.HEADER_GROUPING, 1, index, \"grouping-\" + header, undefined, undefined);\n        currentCells.push(that.createMergedCell(styleIds && styleIds.length > 0 ? styleIds[0] : undefined, 's', header, span));\n      }\n    };\n  };\n\n  ExcelXlsxSerializingSession.prototype.onNewHeaderColumn = function (rowIndex, currentCells) {\n    var _this = this;\n\n    var that = this;\n    return function (column, index, node) {\n      var nameForCol = _this.extractHeaderValue(column);\n\n      var styleIds = that.styleLinker(ag_grid_community_1.RowType.HEADER, rowIndex, index, nameForCol, column, undefined);\n      currentCells.push(_this.createCell(styleIds && styleIds.length > 0 ? styleIds[0] : undefined, 's', nameForCol));\n    };\n  };\n\n  ExcelXlsxSerializingSession.prototype.parse = function () {\n    function join(header, body, footer) {\n      var all = [];\n\n      if (header) {\n        header.forEach(function (rowArray) {\n          return all.push({\n            cells: rowArray\n          });\n        });\n      }\n\n      body.forEach(function (it) {\n        return all.push(it);\n      });\n\n      if (footer) {\n        footer.forEach(function (rowArray) {\n          return all.push({\n            cells: rowArray\n          });\n        });\n      }\n\n      return all;\n    }\n\n    var data = [{\n      name: this.sheetName,\n      table: {\n        columns: this.cols,\n        rows: join(this.customHeader, this.rows, this.customFooter)\n      }\n    }];\n    return this.excelFactory.createExcel(this.excelStyles, data, this.stringList);\n  };\n\n  ExcelXlsxSerializingSession.prototype.onNewBodyColumn = function (rowIndex, currentCells) {\n    var _this = this;\n\n    var that = this;\n    return function (column, index, node) {\n      var valueForCell = _this.extractRowCellValue(column, index, ag_grid_community_1.Constants.EXPORT_TYPE_EXCEL, node);\n\n      var styleIds = that.styleLinker(ag_grid_community_1.RowType.BODY, rowIndex, index, valueForCell, column, node);\n      var excelStyleId;\n\n      if (styleIds && styleIds.length == 1) {\n        excelStyleId = styleIds[0];\n      } else if (styleIds && styleIds.length > 1) {\n        var key = styleIds.join(\"-\");\n\n        if (!_this.mixedStyles[key]) {\n          _this.addNewMixedStyle(styleIds);\n        }\n\n        excelStyleId = _this.mixedStyles[key].excelID;\n      }\n\n      var type = ag_grid_community_1._.isNumeric(valueForCell) ? 'n' : 's';\n      currentCells.push(that.createCell(excelStyleId, type, valueForCell));\n    };\n  };\n\n  ExcelXlsxSerializingSession.prototype.getStringPosition = function (val) {\n    var pos = this.stringMap[val];\n\n    if (pos === undefined) {\n      pos = this.stringMap[val] = this.stringList.length;\n      this.stringList.push(val);\n    }\n\n    return pos;\n  };\n\n  ExcelXlsxSerializingSession.prototype.createCell = function (styleId, type, value) {\n    var actualStyle = styleId && this.stylesByIds[styleId];\n    var styleExists = actualStyle !== undefined;\n\n    function getType() {\n      if (styleExists && actualStyle.dataType) {\n        switch (actualStyle.dataType) {\n          case 'string':\n            return 's';\n\n          case 'number':\n            return 'n';\n\n          case 'dateTime':\n            return 'd';\n\n          case 'error':\n            return 'e';\n\n          case 'boolean':\n            return 'b';\n\n          default:\n            console.warn(\"ag-grid: Unrecognized data type for excel export [\" + actualStyle.id + \".dataType=\" + actualStyle.dataType + \"]\");\n        }\n      }\n\n      return type;\n    }\n\n    var typeTransformed = getType();\n    return {\n      styleId: styleExists ? styleId : undefined,\n      data: {\n        type: typeTransformed,\n        value: typeTransformed === 's' ? this.getStringPosition(value == null ? '' : value).toString() : typeTransformed === 'n' ? Number(value).toString() : value\n      }\n    };\n  };\n\n  ExcelXlsxSerializingSession.prototype.createMergedCell = function (styleId, type, value, numOfCells) {\n    return {\n      styleId: this.styleExists(styleId) ? styleId : undefined,\n      data: {\n        type: type,\n        value: type === 's' ? this.getStringPosition(value == null ? '' : value).toString() : value\n      },\n      mergeAcross: numOfCells\n    };\n  };\n\n  return ExcelXlsxSerializingSession;\n}(excelXmlSerializingSession_1.ExcelXmlSerializingSession);\n\nexports.ExcelXlsxSerializingSession = ExcelXlsxSerializingSession;","map":null,"metadata":{},"sourceType":"script"}