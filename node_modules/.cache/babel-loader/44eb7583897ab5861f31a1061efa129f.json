{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ag_grid_community_1 = require(\"ag-grid-community\");\n\nvar ChartRangeDatasource =\n/** @class */\nfunction (_super) {\n  __extends(ChartRangeDatasource, _super);\n\n  function ChartRangeDatasource(rangeSelection) {\n    var _this = _super.call(this) || this;\n\n    _this.errors = [];\n    _this.rangeSelection = rangeSelection;\n    return _this;\n  }\n\n  ChartRangeDatasource.prototype.getErrors = function () {\n    return this.errors;\n  };\n\n  ChartRangeDatasource.prototype.addError = function (error) {\n    this.errors.push(error);\n  };\n\n  ChartRangeDatasource.prototype.clearErrors = function () {\n    this.errors = [];\n  };\n\n  ChartRangeDatasource.prototype.postConstruct = function () {\n    this.addDestroyableEventListener(this.eventService, ag_grid_community_1.Events.EVENT_MODEL_UPDATED, this.onModelUpdated.bind(this));\n    this.addDestroyableEventListener(this.eventService, ag_grid_community_1.Events.EVENT_CELL_VALUE_CHANGED, this.onModelUpdated.bind(this));\n    this.reset();\n  };\n\n  ChartRangeDatasource.prototype.reset = function () {\n    this.clearErrors();\n    this.calculateFields();\n    this.calculateRowRange();\n    this.calculateCategoryCols();\n    console.log(\"colIds\", this.colIds);\n    console.log(\"categoryCols\", this.categoryCols);\n  };\n\n  ChartRangeDatasource.prototype.calculateCategoryCols = function () {\n    var _this = this;\n\n    this.categoryCols = [];\n\n    if (!this.rangeSelection.columns) {\n      return;\n    }\n\n    var displayedCols = this.columnController.getAllDisplayedColumns();\n\n    var isDimension = function isDimension(col) {\n      // col has to be defined by user as a dimension\n      return (col.getColDef().enableRowGroup || col.getColDef().enablePivot) && // plus the col must be visible\n      displayedCols.indexOf(col) >= 0;\n    }; // pull out all dimension columns from the range\n\n\n    this.rangeSelection.columns.forEach(function (col) {\n      if (isDimension(col)) {\n        _this.categoryCols.push(col);\n      }\n    }); // if no dimension columns in the range, then pull out first dimension column from displayed columns\n\n    if (this.categoryCols.length === 0) {\n      displayedCols.forEach(function (col) {\n        if (_this.categoryCols.length === 0 && isDimension(col)) {\n          _this.categoryCols.push(col);\n        }\n      });\n    }\n  };\n\n  ChartRangeDatasource.prototype.onModelUpdated = function () {\n    this.reset();\n    this.dispatchEvent({\n      type: 'modelUpdated'\n    });\n  };\n\n  ChartRangeDatasource.prototype.calculateRowRange = function () {\n    var paginationOffset = this.paginationProxy.getPageFirstRow();\n    this.startRow = this.rangeSelection.start.rowIndex + paginationOffset;\n    this.endRow = this.rangeSelection.end.rowIndex + paginationOffset; // make sure enough rows in range to chart. if user filters and less rows, then\n    // end row will be the last displayed row, not where the range ends.\n\n    var modelLastRow = this.rowModel.getRowCount() - 1;\n    var rangeLastRow = Math.min(this.endRow, modelLastRow);\n    this.rowCount = rangeLastRow - this.startRow + 1;\n\n    if (this.rowCount <= 0) {\n      this.addError('No rows in selected range.');\n    }\n  };\n\n  ChartRangeDatasource.prototype.calculateFields = function () {\n    var _this = this;\n\n    this.colIds = [];\n    this.colDisplayNames = [];\n    this.colsMapped = {};\n    var colsInRange = this.rangeSelection.columns || [];\n    var displayedCols = this.columnController.getAllDisplayedColumns();\n    var valueColumnsInRange = colsInRange.filter(function (col) {\n      // all columns must have enableValue enabled\n      return col.getColDef().enableValue // and the column must be visible in the grid. this gets around issues where user switches\n      // into / our of pivot mode (range no longer valid as switching between primary and secondary cols)\n      && displayedCols.indexOf(col) >= 0;\n    });\n\n    if (valueColumnsInRange.length === 0) {\n      this.addError('No value column in selected range.');\n    }\n\n    valueColumnsInRange.forEach(function (col) {\n      var colId = col.getColId();\n\n      var displayName = _this.columnController.getDisplayNameForColumn(col, 'chart');\n\n      _this.colIds.push(colId);\n\n      _this.colDisplayNames.push(displayName ? displayName : '');\n\n      _this.colsMapped[colId] = col;\n    });\n  };\n\n  ChartRangeDatasource.prototype.getCategory = function (i) {\n    var _this = this;\n\n    var rowNode = this.rowModel.getRow(this.startRow + i);\n    var resParts = [];\n    this.categoryCols.forEach(function (col) {\n      var part = _this.valueService.getValue(col, rowNode); // force return type to be string or empty string (as value can be an object)\n\n\n      var partStr = part && part.toString ? part.toString() : '';\n      resParts.push(partStr);\n    });\n    var res = resParts.join(', ');\n    return res;\n  };\n\n  ChartRangeDatasource.prototype.getFields = function () {\n    return this.colIds;\n  };\n\n  ChartRangeDatasource.prototype.getFieldNames = function () {\n    return this.colDisplayNames;\n  };\n\n  ChartRangeDatasource.prototype.getValue = function (i, field) {\n    var rowNode = this.rowModel.getRow(this.startRow + i);\n    var col = this.colsMapped[field];\n    var res = this.valueService.getValue(col, rowNode);\n    return res;\n  };\n\n  ChartRangeDatasource.prototype.getRowCount = function () {\n    return this.rowCount;\n  };\n\n  __decorate([ag_grid_community_1.Autowired('columnController'), __metadata(\"design:type\", ag_grid_community_1.ColumnController)], ChartRangeDatasource.prototype, \"columnController\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('valueService'), __metadata(\"design:type\", ag_grid_community_1.ValueService)], ChartRangeDatasource.prototype, \"valueService\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('rowModel'), __metadata(\"design:type\", Object)], ChartRangeDatasource.prototype, \"rowModel\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('paginationProxy'), __metadata(\"design:type\", ag_grid_community_1.PaginationProxy)], ChartRangeDatasource.prototype, \"paginationProxy\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('eventService'), __metadata(\"design:type\", ag_grid_community_1.EventService)], ChartRangeDatasource.prototype, \"eventService\", void 0);\n\n  __decorate([ag_grid_community_1.PostConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], ChartRangeDatasource.prototype, \"postConstruct\", null);\n\n  return ChartRangeDatasource;\n}(ag_grid_community_1.BeanStub);\n\nexports.ChartRangeDatasource = ChartRangeDatasource;","map":null,"metadata":{},"sourceType":"script"}