{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ContinuousScale =\n/** @class */\nfunction () {\n  function ContinuousScale(reinterpolatorFactory, deinterpolatorFactory, rangeComparator) {\n    this._domain = [0, 1];\n    this._range = [];\n    this.clamp = false;\n    this.reinterpolatorFactory = reinterpolatorFactory;\n    this.deinterpolatorFactory = deinterpolatorFactory;\n    this.rangeComparator = rangeComparator;\n  }\n\n  Object.defineProperty(ContinuousScale.prototype, \"domain\", {\n    get: function get() {\n      return this._domain;\n    },\n    set: function set(values) {\n      this._domain = values.slice();\n      this.rescale();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ContinuousScale.prototype, \"range\", {\n    get: function get() {\n      return this._range;\n    },\n    set: function set(values) {\n      this._range = values.slice();\n      this.rescale();\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ContinuousScale.prototype.convert = function (d) {\n    if (!this.piecewiseReinterpolator) {\n      if (!this.piecewiseReinterpolatorFactory) {\n        throw new Error('Missing piecewiseReinterpolatorFactory');\n      }\n\n      var deinterpolatorFactory = this.clamp ? this.clampDeinterpolatorFactory(this.deinterpolatorOf) : this.deinterpolatorOf;\n      this.piecewiseReinterpolator = this.piecewiseReinterpolatorFactory(this._domain, this._range, deinterpolatorFactory, this.reinterpolatorFactory);\n    }\n\n    if (!this.piecewiseReinterpolator) {\n      throw new Error('Missing piecewiseReinterpolator');\n    }\n\n    return this.piecewiseReinterpolator(d);\n  };\n\n  ContinuousScale.prototype.invert = function (r) {\n    if (!this.deinterpolatorFactory) {\n      throw new Error('Missing deinterpolatorFactory');\n    }\n\n    if (!this.piecewiseDeinterpolator) {\n      if (!this.piecewiseDeinterpolatorFactory) {\n        throw new Error('Missing piecewiseDeinterpolatorFactory');\n      }\n\n      var reinterpolatorFactory = this.clamp ? this.clampReinterpolatorFactory(this.reinterpolatorOf) : this.reinterpolatorOf;\n      this.piecewiseDeinterpolator = this.piecewiseDeinterpolatorFactory(this._range, this._domain, this.deinterpolatorFactory, reinterpolatorFactory);\n    }\n\n    return this.piecewiseDeinterpolator(r);\n  };\n\n  ContinuousScale.prototype.clampDeinterpolatorFactory = function (deinterpolatorOf) {\n    return function (a, b) {\n      var deinterpolate = deinterpolatorOf(a, b);\n      return function (x) {\n        if (x <= a) {\n          return 0.0;\n        } else if (x >= b) {\n          return 1.0;\n        } else {\n          return deinterpolate(x);\n        }\n      };\n    };\n  };\n\n  ContinuousScale.prototype.clampReinterpolatorFactory = function (reinterpolatorOf) {\n    return function (a, b) {\n      var reinterpolate = reinterpolatorOf(a, b);\n      return function (t) {\n        if (t <= 0) {\n          return a;\n        } else if (t >= 1) {\n          return b;\n        } else {\n          return reinterpolate(t);\n        }\n      };\n    };\n  };\n\n  ContinuousScale.prototype.rescale = function () {\n    // TODO: uncomment the polylinear functionality here and the corresponding\n    //       methods below when we have a use case fot it.\n    // const isPoly = Math.min(this._domain.length, this._range.length) > 2;\n    // this.piecewiseReinterpolatorFactory = isPoly ? this.polymap : this.bimap;\n    // this.piecewiseDeinterpolatorFactory = isPoly ? this.polymapInvert : this.bimapInvert;\n    this.piecewiseReinterpolatorFactory = this.bimap;\n    this.piecewiseDeinterpolatorFactory = this.bimapInvert;\n    this.piecewiseDeinterpolator = undefined;\n    this.piecewiseReinterpolator = undefined;\n  };\n\n  ContinuousScale.prototype.bimap = function (domain, range, deinterpolatorOf, reinterpolatorOf) {\n    var d0 = domain[0];\n    var d1 = domain[1];\n    var r0 = range[0];\n    var r1 = range[1];\n    var dt;\n    var tr;\n\n    if (d1 < d0) {\n      dt = deinterpolatorOf(d1, d0);\n      tr = reinterpolatorOf(r1, r0);\n    } else {\n      dt = deinterpolatorOf(d0, d1);\n      tr = reinterpolatorOf(r0, r1);\n    }\n\n    return function (x) {\n      return tr(dt(x));\n    };\n  };\n\n  ContinuousScale.prototype.bimapInvert = function (range, domain, deinterpolatorOf, reinterpolatorOf) {\n    var r0 = range[0];\n    var r1 = range[1];\n    var d0 = domain[0];\n    var d1 = domain[1];\n    var rt;\n    var td;\n\n    if (d1 < d0) {\n      rt = deinterpolatorOf(r1, r0);\n      td = reinterpolatorOf(d1, d0);\n    } else {\n      rt = deinterpolatorOf(r0, r1);\n      td = reinterpolatorOf(d0, d1);\n    }\n\n    return function (x) {\n      return td(rt(x));\n    };\n  };\n\n  return ContinuousScale;\n}();\n\nexports.default = ContinuousScale;","map":null,"metadata":{},"sourceType":"script"}