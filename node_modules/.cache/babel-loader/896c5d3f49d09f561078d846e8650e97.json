{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ag_grid_community_1 = require(\"ag-grid-community\");\n\nvar pivotColDefService_1 = require(\"./pivotColDefService\");\n\nvar PivotStage =\n/** @class */\nfunction () {\n  function PivotStage() {\n    this.uniqueValues = {};\n  }\n\n  PivotStage.prototype.execute = function (params) {\n    var rootNode = params.rowNode;\n    var changedPath = params.changedPath;\n\n    if (this.columnController.isPivotActive()) {\n      this.executePivotOn(rootNode, changedPath);\n    } else {\n      this.executePivotOff(changedPath);\n    }\n  };\n\n  PivotStage.prototype.executePivotOff = function (changedPath) {\n    this.aggregationColumnsHashLastTime = null;\n    this.uniqueValues = {};\n\n    if (this.columnController.isSecondaryColumnsPresent()) {\n      this.columnController.setSecondaryColumns(null, \"rowModelUpdated\");\n\n      if (changedPath) {\n        changedPath.setInactive();\n      }\n    }\n  };\n\n  PivotStage.prototype.executePivotOn = function (rootNode, changedPath) {\n    var uniqueValues = this.bucketUpRowNodes(rootNode);\n    var uniqueValuesChanged = this.setUniqueValues(uniqueValues);\n    var aggregationColumns = this.columnController.getValueColumns();\n    var aggregationColumnsHash = aggregationColumns.map(function (column) {\n      return column.getId();\n    }).join('#');\n    var aggregationFuncsHash = aggregationColumns.map(function (column) {\n      return column.getAggFunc().toString();\n    }).join('#');\n    var aggregationColumnsChanged = this.aggregationColumnsHashLastTime !== aggregationColumnsHash;\n    var aggregationFuncsChanged = this.aggregationFuncsHashLastTime !== aggregationFuncsHash;\n    this.aggregationColumnsHashLastTime = aggregationColumnsHash;\n    this.aggregationFuncsHashLastTime = aggregationFuncsHash;\n\n    if (uniqueValuesChanged || aggregationColumnsChanged || aggregationFuncsChanged) {\n      var result = this.pivotColDefService.createPivotColumnDefs(this.uniqueValues);\n      this.pivotColumnGroupDefs = result.pivotColumnGroupDefs;\n      this.pivotColumnDefs = result.pivotColumnDefs;\n      this.columnController.setSecondaryColumns(this.pivotColumnGroupDefs, \"rowModelUpdated\"); // because the secondary columns have changed, then the aggregation needs to visit the whole\n      // tree again, so we make the changedPath not active, to force aggregation to visit all paths.\n\n      if (changedPath) {\n        changedPath.setInactive();\n      }\n    }\n  };\n\n  PivotStage.prototype.setUniqueValues = function (newValues) {\n    var json1 = JSON.stringify(newValues);\n    var json2 = JSON.stringify(this.uniqueValues);\n    var uniqueValuesChanged = json1 !== json2; // we only continue the below if the unique values are different, as otherwise\n    // the result will be the same as the last time we did it\n\n    if (uniqueValuesChanged) {\n      this.uniqueValues = newValues;\n      return true;\n    } else {\n      return false;\n    }\n  }; // returns true if values were different\n\n\n  PivotStage.prototype.bucketUpRowNodes = function (rootNode) {\n    var _this = this; // accessed from inside inner function\n\n\n    var uniqueValues = {}; // finds all leaf groups and calls mapRowNode with it\n\n    var recursivelySearchForLeafNodes = function recursivelySearchForLeafNodes(rowNode) {\n      if (rowNode.leafGroup) {\n        _this.bucketRowNode(rowNode, uniqueValues);\n      } else {\n        rowNode.childrenAfterFilter.forEach(function (child) {\n          recursivelySearchForLeafNodes(child);\n        });\n      }\n    };\n\n    recursivelySearchForLeafNodes(rootNode);\n    return uniqueValues;\n  };\n\n  PivotStage.prototype.bucketRowNode = function (rowNode, uniqueValues) {\n    var pivotColumns = this.columnController.getPivotColumns();\n\n    if (pivotColumns.length === 0) {\n      rowNode.childrenMapped = null;\n      return;\n    }\n\n    rowNode.childrenMapped = this.bucketChildren(rowNode.childrenAfterFilter, pivotColumns, 0, uniqueValues);\n  };\n\n  PivotStage.prototype.bucketChildren = function (children, pivotColumns, pivotIndex, uniqueValues) {\n    var _this = this;\n\n    var mappedChildren = {};\n    var pivotColumn = pivotColumns[pivotIndex]; // map the children out based on the pivot column\n\n    children.forEach(function (child) {\n      var key = _this.valueService.getKeyForNode(pivotColumn, child);\n\n      if (ag_grid_community_1._.missing(key)) {\n        key = '';\n      }\n\n      if (!uniqueValues[key]) {\n        uniqueValues[key] = {};\n      }\n\n      if (!mappedChildren[key]) {\n        mappedChildren[key] = [];\n      }\n\n      mappedChildren[key].push(child);\n    }); // if it's the last pivot column, return as is, otherwise go one level further in the map\n\n    if (pivotIndex === pivotColumns.length - 1) {\n      return mappedChildren;\n    } else {\n      var result_1 = {};\n\n      ag_grid_community_1._.iterateObject(mappedChildren, function (key, value) {\n        result_1[key] = _this.bucketChildren(value, pivotColumns, pivotIndex + 1, uniqueValues[key]);\n      });\n\n      return result_1;\n    }\n  };\n\n  PivotStage.prototype.getPivotColumnDefs = function () {\n    return this.pivotColumnDefs;\n  };\n\n  __decorate([ag_grid_community_1.Autowired('rowModel'), __metadata(\"design:type\", Object)], PivotStage.prototype, \"rowModel\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('valueService'), __metadata(\"design:type\", ag_grid_community_1.ValueService)], PivotStage.prototype, \"valueService\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('columnController'), __metadata(\"design:type\", ag_grid_community_1.ColumnController)], PivotStage.prototype, \"columnController\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('eventService'), __metadata(\"design:type\", ag_grid_community_1.EventService)], PivotStage.prototype, \"eventService\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('pivotColDefService'), __metadata(\"design:type\", pivotColDefService_1.PivotColDefService)], PivotStage.prototype, \"pivotColDefService\", void 0);\n\n  PivotStage = __decorate([ag_grid_community_1.Bean('pivotStage')], PivotStage);\n  return PivotStage;\n}();\n\nexports.PivotStage = PivotStage;","map":null,"metadata":{},"sourceType":"script"}