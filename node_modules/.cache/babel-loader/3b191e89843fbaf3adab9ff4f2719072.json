{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar shape_1 = require(\"./shape\");\n\nvar path2D_1 = require(\"../path2D\");\n\nvar bbox_1 = require(\"../bbox\");\n\nvar angle_1 = require(\"../../util/angle\");\n\nvar object_1 = require(\"../../util/object\");\n\nvar ArcType;\n\n(function (ArcType) {\n  ArcType[ArcType[\"Open\"] = 0] = \"Open\";\n  ArcType[ArcType[\"Chord\"] = 1] = \"Chord\";\n  ArcType[ArcType[\"Round\"] = 2] = \"Round\";\n})(ArcType = exports.ArcType || (exports.ArcType = {}));\n/**\n * Elliptical arc node.\n */\n\n\nvar Arc =\n/** @class */\nfunction (_super) {\n  __extends(Arc, _super);\n\n  function Arc() {\n    var _this = _super.call(this) || this; // Declare a path to retain for later rendering and hit testing\n    // using custom Path2D class. It's pure TypeScript and works in all browsers.\n\n\n    _this.path = new path2D_1.Path2D();\n    /**\n     * It's not always that the path has to be updated.\n     * For example, if transform attributes (such as `translationX`)\n     * are changed, we don't have to update the path. The `dirtyFlag`\n     * is how we keep track if the path has to be updated or not.\n     */\n\n    _this._dirtyPath = true;\n    _this._centerX = 0;\n    _this._centerY = 0;\n    _this._radiusX = 10;\n    _this._radiusY = 10;\n    _this._startAngle = 0;\n    _this._endAngle = Math.PI * 2;\n    _this._counterClockwise = false;\n    /**\n     * The type of arc to render:\n     * - {@link ArcType.Open} - end points of the arc segment are not connected (default)\n     * - {@link ArcType.Chord} - end points of the arc segment are connected by a line segment\n     * - {@link ArcType.Round} - each of the end points of the arc segment are connected\n     *                           to the center of the arc\n     * Arcs with {@link ArcType.Open} do not support hit testing, even if they have their\n     * {@link Shape.fillStyle} set, because they are not closed paths. Hit testing support\n     * would require using two paths - one for rendering, another for hit testing - and there\n     * doesn't seem to be a compelling reason to do that, when one can just use {@link ArcType.Chord}\n     * to create a closed path.\n     */\n\n    _this._type = ArcType.Open;\n\n    _this.getBBox = function () {\n      return {\n        x: _this.centerX - _this.radiusX,\n        y: _this.centerY - _this.radiusY,\n        width: _this.radiusX * 2,\n        height: _this.radiusY * 2\n      };\n    };\n\n    _this.restoreOwnStyles();\n\n    return _this;\n  }\n\n  Arc.create = function (centerX, centerY, radiusX, radiusY, startAngle, endAngle, counterClockwise) {\n    if (radiusY === void 0) {\n      radiusY = radiusX;\n    }\n\n    if (startAngle === void 0) {\n      startAngle = 0;\n    }\n\n    if (endAngle === void 0) {\n      endAngle = Math.PI * 2;\n    }\n\n    if (counterClockwise === void 0) {\n      counterClockwise = false;\n    }\n\n    var arc = new Arc();\n    arc.centerX = centerX;\n    arc.centerY = centerY;\n    arc.radiusX = radiusX;\n    arc.radiusY = radiusY;\n    arc.startAngle = startAngle;\n    arc.endAngle = endAngle;\n    arc.counterClockwise = counterClockwise;\n    return arc;\n  };\n\n  Object.defineProperty(Arc.prototype, \"dirtyPath\", {\n    get: function get() {\n      return this._dirtyPath;\n    },\n    set: function set(value) {\n      if (this._dirtyPath !== value) {\n        this._dirtyPath = value;\n\n        if (value) {\n          this.dirty = true;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Arc.prototype, \"centerX\", {\n    get: function get() {\n      return this._centerX;\n    },\n    set: function set(value) {\n      if (this._centerX !== value) {\n        this._centerX = value;\n        this.dirtyPath = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Arc.prototype, \"centerY\", {\n    get: function get() {\n      return this._centerY;\n    },\n    set: function set(value) {\n      if (this._centerY !== value) {\n        this._centerY = value;\n        this.dirtyPath = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Arc.prototype, \"radiusX\", {\n    get: function get() {\n      return this._radiusX;\n    },\n    set: function set(value) {\n      if (this._radiusX !== value) {\n        this._radiusX = value;\n        this.dirtyPath = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Arc.prototype, \"radiusY\", {\n    get: function get() {\n      return this._radiusY;\n    },\n    set: function set(value) {\n      if (this._radiusY !== value) {\n        this._radiusY = value;\n        this.dirtyPath = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Arc.prototype, \"startAngle\", {\n    get: function get() {\n      return this._startAngle;\n    },\n    set: function set(value) {\n      if (this._startAngle !== value) {\n        this._startAngle = value;\n        this.dirtyPath = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Arc.prototype, \"endAngle\", {\n    get: function get() {\n      return this._endAngle;\n    },\n    set: function set(value) {\n      if (this._endAngle !== value) {\n        this._endAngle = value;\n        this.dirtyPath = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Arc.prototype, \"fullPie\", {\n    get: function get() {\n      return angle_1.normalizeAngle360(this.startAngle) === angle_1.normalizeAngle360(this.endAngle);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Arc.prototype, \"counterClockwise\", {\n    get: function get() {\n      return this._counterClockwise;\n    },\n    set: function set(value) {\n      if (this._counterClockwise !== value) {\n        this._counterClockwise = value;\n        this.dirtyPath = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Arc.prototype, \"type\", {\n    get: function get() {\n      return this._type;\n    },\n    set: function set(value) {\n      if (this._type !== value) {\n        this._type = value;\n        this.dirtyPath = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Arc.prototype.updatePath = function () {\n    if (!this.dirtyPath) return;\n    var path = this.path;\n    path.clear(); // No need to recreate the Path, can simply clear the existing one.\n    // This is much faster than the native Path2D implementation even though this `cubicArc`\n    // method is pure TypeScript and actually produces the definition of an elliptical arc,\n    // where you can specify two radii and rotation, while Path2D's `arc` method simply produces\n    // a circular arc. Maybe it's due to the experimental nature of the Path2D class,\n    // maybe it's because we have to create a new instance of it on each render, who knows...\n\n    path.cubicArc(this.centerX, this.centerY, this.radiusX, this.radiusY, 0, this.startAngle, this.endAngle, this.counterClockwise ? 1 : 0);\n\n    if (this.type === ArcType.Chord) {\n      path.closePath();\n    } else if (this.type === ArcType.Round && !this.fullPie) {\n      path.lineTo(this.centerX, this.centerY);\n      path.closePath();\n    }\n\n    this.dirtyPath = false;\n  };\n\n  Arc.prototype.isPointInPath = function (x, y) {\n    var point = this.transformPoint(x, y);\n    var bbox = this.getBBox();\n    return this.type !== ArcType.Open && bbox_1.isPointInBBox(bbox, point.x, point.y) && this.path.isPointInPath(point.x, point.y);\n  };\n\n  Arc.prototype.isPointInStroke = function (x, y) {\n    return false;\n  };\n\n  Arc.prototype.render = function (ctx) {\n    if (this.dirtyTransform) {\n      this.computeTransformMatrix();\n    }\n\n    this.matrix.toContext(ctx);\n    this.applyContextAttributes(ctx);\n    this.updatePath();\n    this.scene.appendPath(this.path);\n\n    if (this.fillStyle) {\n      ctx.fill();\n    }\n\n    if (this.strokeStyle) {\n      ctx.stroke();\n    }\n\n    this.dirty = false;\n  };\n\n  Arc.defaultStyles = object_1.chainObjects(shape_1.Shape.defaultStyles, {\n    lineWidth: 1,\n    fillStyle: null\n  });\n  return Arc;\n}(shape_1.Shape);\n\nexports.Arc = Arc;","map":null,"metadata":{},"sourceType":"script"}