{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar hdpiCanvas_1 = require(\"../canvas/hdpiCanvas\");\n\nvar shape_1 = require(\"./shape/shape\");\n\nvar Scene =\n/** @class */\nfunction () {\n  function Scene(width, height) {\n    if (width === void 0) {\n      width = 800;\n    }\n\n    if (height === void 0) {\n      height = 600;\n    }\n\n    var _this = this;\n\n    this.id = this.createId();\n\n    this.onMouseMove = function (e) {\n      var x = e.offsetX;\n      var y = e.offsetY;\n\n      if (_this.root) {\n        var node = _this.pickNode(_this.root, x, y);\n\n        if (node) {\n          if (node instanceof shape_1.Shape) {\n            if (!_this.lastPick) {\n              _this.lastPick = {\n                node: node,\n                fillStyle: node.fillStyle\n              };\n            } else if (_this.lastPick.node !== node) {\n              _this.lastPick.node.fillStyle = _this.lastPick.fillStyle;\n              _this.lastPick = {\n                node: node,\n                fillStyle: node.fillStyle\n              };\n            }\n\n            node.fillStyle = 'yellow';\n          }\n        } else if (_this.lastPick) {\n          _this.lastPick.node.fillStyle = _this.lastPick.fillStyle;\n          _this.lastPick = undefined;\n        }\n      }\n    };\n\n    this._dirty = false;\n    this._root = null;\n    this._frameIndex = 0;\n    this._renderFrameIndex = false;\n\n    this.render = function () {\n      var ctx = _this.ctx;\n      ctx.clearRect(0, 0, _this.width, _this.height);\n\n      if (_this.root) {\n        ctx.save();\n\n        if (_this.root.visible) {\n          _this.root.render(ctx);\n        }\n\n        ctx.restore();\n      }\n\n      _this._frameIndex++;\n\n      if (_this.renderFrameIndex) {\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, 40, 15);\n        ctx.fillStyle = 'black';\n        ctx.fillText(_this.frameIndex.toString(), 0, 10);\n      }\n\n      _this.dirty = false;\n    };\n\n    this.hdpiCanvas = new hdpiCanvas_1.HdpiCanvas(this._width = width, this._height = height);\n    this.ctx = this.hdpiCanvas.context;\n    this.setupListeners(this.hdpiCanvas.canvas); // debug\n  }\n\n  Object.defineProperty(Scene.prototype, \"parent\", {\n    get: function get() {\n      return this.hdpiCanvas.parent;\n    },\n    set: function set(value) {\n      this.hdpiCanvas.parent = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Scene.prototype.createId = function () {\n    return this.constructor.name + '-' + Scene.id++;\n  };\n\n  ;\n\n  Scene.prototype.setupListeners = function (canvas) {\n    canvas.addEventListener('mousemove', this.onMouseMove);\n  };\n\n  Scene.prototype.pickNode = function (node, x, y) {\n    if (!node.visible || !node.isPointInNode(x, y)) {\n      return;\n    }\n\n    var children = node.children;\n\n    if (children.length) {\n      // Nodes added later should be hit-tested first,\n      // as they are rendered on top of the previously added nodes.\n      for (var i = children.length - 1; i >= 0; i--) {\n        var hit = this.pickNode(children[i], x, y);\n\n        if (hit) {\n          return hit;\n        }\n      }\n    } else if (node instanceof shape_1.Shape) {\n      return node;\n    }\n  };\n\n  Object.defineProperty(Scene.prototype, \"width\", {\n    get: function get() {\n      return this._width;\n    },\n    set: function set(value) {\n      this.size = [value, this._height];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scene.prototype, \"height\", {\n    get: function get() {\n      return this._height;\n    },\n    set: function set(value) {\n      this.size = [this._width, value];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scene.prototype, \"size\", {\n    set: function set(value) {\n      if (this._width !== value[0] || this._height !== value[1]) {\n        this.hdpiCanvas.resize(value[0], value[1]);\n        this._width = value[0], this._height = value[1];\n        this.dirty = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scene.prototype, \"dirty\", {\n    get: function get() {\n      return this._dirty;\n    },\n    set: function set(dirty) {\n      if (dirty && !this._dirty) {\n        requestAnimationFrame(this.render);\n      }\n\n      this._dirty = dirty;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scene.prototype, \"root\", {\n    get: function get() {\n      return this._root;\n    },\n    set: function set(node) {\n      if (node === this._root) {\n        return;\n      }\n\n      if (this._root) {\n        this._root._setScene(null);\n      }\n\n      this._root = node;\n\n      if (node) {\n        // If `node` is the root node of another scene ...\n        if (node.parent === null && node.scene && node.scene !== this) {\n          node.scene.root = null;\n        }\n\n        node._setScene(this);\n      }\n\n      this.dirty = true;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Scene.prototype.appendPath = function (path) {\n    var ctx = this.ctx;\n    var commands = path.commands;\n    var params = path.params;\n    var n = commands.length;\n    var j = 0;\n    ctx.beginPath();\n\n    for (var i = 0; i < n; i++) {\n      switch (commands[i]) {\n        case 'M':\n          ctx.moveTo(params[j++], params[j++]);\n          break;\n\n        case 'L':\n          ctx.lineTo(params[j++], params[j++]);\n          break;\n\n        case 'C':\n          ctx.bezierCurveTo(params[j++], params[j++], params[j++], params[j++], params[j++], params[j++]);\n          break;\n\n        case 'Z':\n          ctx.closePath();\n          break;\n      }\n    }\n  };\n\n  Object.defineProperty(Scene.prototype, \"frameIndex\", {\n    get: function get() {\n      return this._frameIndex;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Scene.prototype, \"renderFrameIndex\", {\n    get: function get() {\n      return this._renderFrameIndex;\n    },\n    set: function set(value) {\n      if (this._renderFrameIndex !== value) {\n        this._renderFrameIndex = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Scene.id = 1;\n  return Scene;\n}();\n\nexports.Scene = Scene;","map":null,"metadata":{},"sourceType":"script"}