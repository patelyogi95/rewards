{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ag_grid_community_1 = require(\"ag-grid-community\");\n\nvar ViewportRowModel =\n/** @class */\nfunction () {\n  function ViewportRowModel() {\n    // rowRenderer tells us these\n    this.firstRow = -1;\n    this.lastRow = -1; // datasource tells us this\n\n    this.rowCount = -1;\n    this.rowNodesByIndex = {};\n  } // we don't implement as lazy row heights is not supported in this row model\n\n\n  ViewportRowModel.prototype.ensureRowHeightsValid = function (startPixel, endPixel, startLimitIndex, endLimitIndex) {\n    return false;\n  };\n\n  ViewportRowModel.prototype.init = function () {\n    this.rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();\n    this.eventService.addEventListener(ag_grid_community_1.Events.EVENT_VIEWPORT_CHANGED, this.onViewportChanged.bind(this));\n    var viewportEnabled = this.gridOptionsWrapper.isRowModelViewport();\n\n    if (viewportEnabled && this.gridOptionsWrapper.getViewportDatasource()) {\n      this.setViewportDatasource(this.gridOptionsWrapper.getViewportDatasource());\n    }\n  };\n\n  ViewportRowModel.prototype.isLastRowFound = function () {\n    return true;\n  };\n\n  ViewportRowModel.prototype.destroyDatasource = function () {\n    if (this.viewportDatasource) {\n      if (this.viewportDatasource.destroy) {\n        this.viewportDatasource.destroy();\n      }\n\n      this.rowRenderer.datasourceChanged();\n      this.firstRow = -1;\n      this.lastRow = -1;\n    }\n  };\n\n  ViewportRowModel.prototype.calculateFirstRow = function (firstRenderedRow) {\n    var bufferSize = this.gridOptionsWrapper.getViewportRowModelBufferSize();\n    var pageSize = this.gridOptionsWrapper.getViewportRowModelPageSize();\n    var afterBuffer = firstRenderedRow - bufferSize;\n\n    if (afterBuffer < 0) {\n      return 0;\n    } else {\n      return Math.floor(afterBuffer / pageSize) * pageSize;\n    }\n  };\n\n  ViewportRowModel.prototype.calculateLastRow = function (lastRenderedRow) {\n    if (lastRenderedRow === -1) {\n      return lastRenderedRow;\n    }\n\n    var bufferSize = this.gridOptionsWrapper.getViewportRowModelBufferSize();\n    var pageSize = this.gridOptionsWrapper.getViewportRowModelPageSize();\n    var afterBuffer = lastRenderedRow + bufferSize;\n    var result = Math.ceil(afterBuffer / pageSize) * pageSize;\n\n    if (result <= this.rowCount) {\n      return result;\n    } else {\n      return this.rowCount;\n    }\n  };\n\n  ViewportRowModel.prototype.onViewportChanged = function (event) {\n    var newFirst = this.calculateFirstRow(event.firstRow);\n    var newLast = this.calculateLastRow(event.lastRow);\n\n    if (this.firstRow !== newFirst || this.lastRow !== newLast) {\n      this.firstRow = newFirst;\n      this.lastRow = newLast;\n      this.purgeRowsNotInViewport();\n\n      if (this.viewportDatasource) {\n        this.viewportDatasource.setViewportRange(this.firstRow, this.lastRow);\n      }\n    }\n  };\n\n  ViewportRowModel.prototype.purgeRowsNotInViewport = function () {\n    var _this = this;\n\n    Object.keys(this.rowNodesByIndex).forEach(function (indexStr) {\n      var index = parseInt(indexStr, 10);\n\n      if (index < _this.firstRow || index > _this.lastRow) {\n        delete _this.rowNodesByIndex[index];\n      }\n    });\n  };\n\n  ViewportRowModel.prototype.setViewportDatasource = function (viewportDatasource) {\n    this.destroyDatasource();\n    this.viewportDatasource = viewportDatasource;\n    this.rowCount = 0;\n\n    if (!viewportDatasource.init) {\n      console.warn('ag-Grid: viewport is missing init method.');\n    } else {\n      viewportDatasource.init({\n        setRowCount: this.setRowCount.bind(this),\n        setRowData: this.setRowData.bind(this),\n        getRow: this.getRow.bind(this)\n      });\n    }\n  };\n\n  ViewportRowModel.prototype.getType = function () {\n    return ag_grid_community_1.Constants.ROW_MODEL_TYPE_VIEWPORT;\n  };\n\n  ViewportRowModel.prototype.getRow = function (rowIndex) {\n    if (!this.rowNodesByIndex[rowIndex]) {\n      this.rowNodesByIndex[rowIndex] = this.createBlankRowNode(rowIndex);\n    }\n\n    return this.rowNodesByIndex[rowIndex];\n  };\n\n  ViewportRowModel.prototype.getRowNode = function (id) {\n    var result = null;\n    this.forEachNode(function (rowNode) {\n      if (rowNode.id === id) {\n        result = rowNode;\n      }\n    });\n    return result;\n  };\n\n  ViewportRowModel.prototype.getPageFirstRow = function () {\n    return 0;\n  };\n\n  ViewportRowModel.prototype.getPageLastRow = function () {\n    return this.rowCount - 1;\n  };\n\n  ViewportRowModel.prototype.getRowCount = function () {\n    return this.rowCount;\n  };\n\n  ViewportRowModel.prototype.getRowIndexAtPixel = function (pixel) {\n    if (this.rowHeight !== 0) {\n      // avoid divide by zero error\n      return Math.floor(pixel / this.rowHeight);\n    } else {\n      return 0;\n    }\n  };\n\n  ViewportRowModel.prototype.getRowBounds = function (index) {\n    return {\n      rowHeight: this.rowHeight,\n      rowTop: this.rowHeight * index\n    };\n  };\n\n  ViewportRowModel.prototype.getCurrentPageHeight = function () {\n    return this.rowCount * this.rowHeight;\n  };\n\n  ViewportRowModel.prototype.isEmpty = function () {\n    return this.rowCount > 0;\n  };\n\n  ViewportRowModel.prototype.isRowsToRender = function () {\n    return this.rowCount > 0;\n  };\n\n  ViewportRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {\n    var firstIndex = ag_grid_community_1._.missing(firstInRange) ? 0 : firstInRange.rowIndex;\n    var lastIndex = lastInRange.rowIndex;\n    var firstNodeOutOfRange = firstIndex < this.firstRow || firstIndex > this.lastRow;\n    var lastNodeOutOfRange = lastIndex < this.firstRow || lastIndex > this.lastRow;\n\n    if (firstNodeOutOfRange || lastNodeOutOfRange) {\n      return [];\n    }\n\n    var result = [];\n    var startIndex = firstIndex <= lastIndex ? firstIndex : lastIndex;\n    var endIndex = firstIndex <= lastIndex ? lastIndex : firstIndex;\n\n    for (var i = startIndex; i <= endIndex; i++) {\n      result.push(this.rowNodesByIndex[i]);\n    }\n\n    return result;\n  };\n\n  ViewportRowModel.prototype.forEachNode = function (callback) {\n    var _this = this;\n\n    var callbackCount = 0;\n    Object.keys(this.rowNodesByIndex).forEach(function (indexStr) {\n      var index = parseInt(indexStr, 10);\n      var rowNode = _this.rowNodesByIndex[index];\n      callback(rowNode, callbackCount);\n      callbackCount++;\n    });\n  };\n\n  ViewportRowModel.prototype.setRowData = function (rowData) {\n    var _this = this;\n\n    ag_grid_community_1._.iterateObject(rowData, function (indexStr, dataItem) {\n      var index = parseInt(indexStr, 10); // we should never keep rows that we didn't specifically ask for, this\n      // guarantees the contract we have with the server.\n\n      if (index >= _this.firstRow && index <= _this.lastRow) {\n        var rowNode = _this.rowNodesByIndex[index]; // the abnormal case is we requested a row even though the grid didn't need it\n        // as a result of the paging and buffer (ie the row is off screen), in which\n        // case we need to create a new node now\n\n        if (ag_grid_community_1._.missing(rowNode)) {\n          rowNode = _this.createBlankRowNode(index);\n          _this.rowNodesByIndex[index] = rowNode;\n        } // now we deffo have a row node, so set in the details\n        // if the grid already asked for this row (the normal case), then we would\n        // of put a placeholder node in place.\n\n\n        rowNode.setDataAndId(dataItem, index.toString());\n      }\n    });\n  };\n\n  ViewportRowModel.prototype.createBlankRowNode = function (rowIndex) {\n    var rowNode = new ag_grid_community_1.RowNode();\n    this.context.wireBean(rowNode);\n    rowNode.setRowHeight(this.rowHeight);\n    rowNode.setRowTop(this.rowHeight * rowIndex);\n    rowNode.setRowIndex(rowIndex);\n    return rowNode;\n  };\n\n  ViewportRowModel.prototype.setRowCount = function (rowCount) {\n    if (rowCount !== this.rowCount) {\n      this.rowCount = rowCount;\n      var event_1 = {\n        type: ag_grid_community_1.Events.EVENT_MODEL_UPDATED,\n        api: this.gridApi,\n        columnApi: this.columnApi,\n        newData: false,\n        newPage: false,\n        keepRenderedRows: false,\n        animate: false\n      };\n      this.eventService.dispatchEvent(event_1);\n    }\n  };\n\n  ViewportRowModel.prototype.isRowPresent = function (rowNode) {\n    return false;\n  };\n\n  __decorate([ag_grid_community_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", ag_grid_community_1.GridOptionsWrapper)], ViewportRowModel.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('eventService'), __metadata(\"design:type\", ag_grid_community_1.EventService)], ViewportRowModel.prototype, \"eventService\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('selectionController'), __metadata(\"design:type\", ag_grid_community_1.SelectionController)], ViewportRowModel.prototype, \"selectionController\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('context'), __metadata(\"design:type\", ag_grid_community_1.Context)], ViewportRowModel.prototype, \"context\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('gridApi'), __metadata(\"design:type\", ag_grid_community_1.GridApi)], ViewportRowModel.prototype, \"gridApi\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('columnApi'), __metadata(\"design:type\", ag_grid_community_1.ColumnApi)], ViewportRowModel.prototype, \"columnApi\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('rowRenderer'), __metadata(\"design:type\", ag_grid_community_1.RowRenderer)], ViewportRowModel.prototype, \"rowRenderer\", void 0);\n\n  __decorate([ag_grid_community_1.PostConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], ViewportRowModel.prototype, \"init\", null);\n\n  __decorate([ag_grid_community_1.PreDestroy, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], ViewportRowModel.prototype, \"destroyDatasource\", null);\n\n  ViewportRowModel = __decorate([ag_grid_community_1.Bean('rowModel')], ViewportRowModel);\n  return ViewportRowModel;\n}();\n\nexports.ViewportRowModel = ViewportRowModel;","map":null,"metadata":{},"sourceType":"script"}