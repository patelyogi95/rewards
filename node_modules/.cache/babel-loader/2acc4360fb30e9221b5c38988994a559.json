{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar main_1 = require(\"ag-grid-community/main\");\n\nvar ToolPanelColumnGroupComp =\n/** @class */\nfunction (_super) {\n  __extends(ToolPanelColumnGroupComp, _super);\n\n  function ToolPanelColumnGroupComp(columnGroup, columnDept, expandedCallback, allowDragging, expandByDefault) {\n    var _this = _super.call(this) || this;\n\n    _this.processingColumnStateChange = false;\n    _this.columnGroup = columnGroup;\n    _this.columnDept = columnDept;\n    _this.expandedCallback = expandedCallback;\n    _this.allowDragging = allowDragging;\n    _this.expanded = expandByDefault;\n    return _this;\n  }\n\n  ToolPanelColumnGroupComp.prototype.init = function () {\n    this.setTemplate(ToolPanelColumnGroupComp.TEMPLATE); // this.displayName = this.columnGroup.getColGroupDef() ? this.columnGroup.getColGroupDef().headerName : null;\n\n    this.displayName = this.columnController.getDisplayNameForOriginalColumnGroup(null, this.columnGroup, 'toolPanel');\n\n    if (main_1._.missing(this.displayName)) {\n      this.displayName = '>>';\n    }\n\n    this.eLabel.innerHTML = this.displayName ? this.displayName : '';\n    this.setupExpandContract();\n    this.addCssClass('ag-toolpanel-indent-' + this.columnDept);\n    this.addDestroyableEventListener(this.eventService, main_1.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onColumnStateChanged.bind(this));\n    this.addDestroyableEventListener(this.eLabel, 'click', this.onLabelClicked.bind(this));\n    this.addDestroyableEventListener(this.cbSelect, 'change', this.onCheckboxChanged.bind(this));\n    this.setOpenClosedIcons();\n    this.setupDragging();\n    this.onColumnStateChanged();\n    this.addVisibilityListenersToAllChildren();\n    main_1.CssClassApplier.addToolPanelClassesFromColDef(this.columnGroup.getColGroupDef(), this.getGui(), this.gridOptionsWrapper, null, this.columnGroup);\n  };\n\n  ToolPanelColumnGroupComp.prototype.addVisibilityListenersToAllChildren = function () {\n    var _this = this;\n\n    this.columnGroup.getLeafColumns().forEach(function (column) {\n      _this.addDestroyableEventListener(column, main_1.Column.EVENT_VISIBLE_CHANGED, _this.onColumnStateChanged.bind(_this));\n\n      _this.addDestroyableEventListener(column, main_1.Column.EVENT_VALUE_CHANGED, _this.onColumnStateChanged.bind(_this));\n\n      _this.addDestroyableEventListener(column, main_1.Column.EVENT_PIVOT_CHANGED, _this.onColumnStateChanged.bind(_this));\n\n      _this.addDestroyableEventListener(column, main_1.Column.EVENT_ROW_GROUP_CHANGED, _this.onColumnStateChanged.bind(_this));\n    });\n  };\n\n  ToolPanelColumnGroupComp.prototype.setupDragging = function () {\n    var _this = this;\n\n    if (!this.allowDragging) {\n      main_1._.setVisible(this.eDragHandle, false);\n\n      return;\n    }\n\n    var dragSource = {\n      type: main_1.DragSourceType.ToolPanel,\n      eElement: this.eDragHandle,\n      dragItemName: this.displayName,\n      dragItemCallback: function dragItemCallback() {\n        return _this.createDragItem();\n      }\n    };\n    this.dragAndDropService.addDragSource(dragSource, true);\n    this.addDestroyFunc(function () {\n      return _this.dragAndDropService.removeDragSource(dragSource);\n    });\n  };\n\n  ToolPanelColumnGroupComp.prototype.createDragItem = function () {\n    var visibleState = {};\n    this.columnGroup.getLeafColumns().forEach(function (col) {\n      visibleState[col.getId()] = col.isVisible();\n    });\n    return {\n      columns: this.columnGroup.getLeafColumns(),\n      visibleState: visibleState\n    };\n  };\n\n  ToolPanelColumnGroupComp.prototype.setupExpandContract = function () {\n    this.eGroupClosedIcon.appendChild(main_1._.createIcon('columnSelectClosed', this.gridOptionsWrapper, null));\n    this.eGroupOpenedIcon.appendChild(main_1._.createIcon('columnSelectOpen', this.gridOptionsWrapper, null));\n    this.addDestroyableEventListener(this.eGroupClosedIcon, 'click', this.onExpandOrContractClicked.bind(this));\n    this.addDestroyableEventListener(this.eGroupOpenedIcon, 'click', this.onExpandOrContractClicked.bind(this));\n    var touchListener = new main_1.TouchListener(this.eColumnGroupIcons, true);\n    this.addDestroyableEventListener(touchListener, main_1.TouchListener.EVENT_TAP, this.onExpandOrContractClicked.bind(this));\n    this.addDestroyFunc(touchListener.destroy.bind(touchListener));\n  };\n\n  ToolPanelColumnGroupComp.prototype.onLabelClicked = function () {\n    var nextState = !this.cbSelect.isSelected();\n    this.onChangeCommon(nextState);\n  };\n\n  ToolPanelColumnGroupComp.prototype.onCheckboxChanged = function (event) {\n    this.onChangeCommon(event.selected);\n  };\n\n  ToolPanelColumnGroupComp.prototype.onChangeCommon = function (nextState) {\n    if (this.processingColumnStateChange) {\n      return;\n    }\n\n    var childColumns = this.columnGroup.getLeafColumns();\n\n    if (this.columnController.isPivotMode()) {\n      if (nextState) {\n        this.actionCheckedReduce(childColumns);\n      } else {\n        this.actionUnCheckedReduce(childColumns);\n      }\n    } else {\n      var isAllowedColumn = function isAllowedColumn(c) {\n        return !c.isLockVisible() && !c.getColDef().suppressToolPanel;\n      };\n\n      var allowedColumns = childColumns.filter(isAllowedColumn);\n      this.columnController.setColumnsVisible(allowedColumns, nextState, \"toolPanelUi\");\n    }\n\n    if (this.selectionCallback) {\n      this.selectionCallback(this.isSelected());\n    }\n  };\n\n  ToolPanelColumnGroupComp.prototype.actionUnCheckedReduce = function (columns) {\n    var columnsToUnPivot = [];\n    var columnsToUnValue = [];\n    var columnsToUnGroup = [];\n    columns.forEach(function (column) {\n      if (column.isPivotActive()) {\n        columnsToUnPivot.push(column);\n      }\n\n      if (column.isRowGroupActive()) {\n        columnsToUnGroup.push(column);\n      }\n\n      if (column.isValueActive()) {\n        columnsToUnValue.push(column);\n      }\n    });\n\n    if (columnsToUnPivot.length > 0) {\n      this.columnController.removePivotColumns(columnsToUnPivot, \"toolPanelUi\");\n    }\n\n    if (columnsToUnGroup.length > 0) {\n      this.columnController.removeRowGroupColumns(columnsToUnGroup, \"toolPanelUi\");\n    }\n\n    if (columnsToUnValue.length > 0) {\n      this.columnController.removeValueColumns(columnsToUnValue, \"toolPanelUi\");\n    }\n  };\n\n  ToolPanelColumnGroupComp.prototype.actionCheckedReduce = function (columns) {\n    var columnsToAggregate = [];\n    var columnsToGroup = [];\n    var columnsToPivot = [];\n    columns.forEach(function (column) {\n      // don't change any column that's already got a function active\n      if (column.isAnyFunctionActive()) {\n        return;\n      }\n\n      if (column.isAllowValue()) {\n        columnsToAggregate.push(column);\n      } else if (column.isAllowRowGroup()) {\n        columnsToGroup.push(column);\n      } else if (column.isAllowRowGroup()) {\n        columnsToPivot.push(column);\n      }\n    });\n\n    if (columnsToAggregate.length > 0) {\n      this.columnController.addValueColumns(columnsToAggregate, \"toolPanelUi\");\n    }\n\n    if (columnsToGroup.length > 0) {\n      this.columnController.addRowGroupColumns(columnsToGroup, \"toolPanelUi\");\n    }\n\n    if (columnsToPivot.length > 0) {\n      this.columnController.addPivotColumns(columnsToPivot, \"toolPanelUi\");\n    }\n  };\n\n  ToolPanelColumnGroupComp.prototype.onColumnStateChanged = function () {\n    var selectedValue = this.workOutSelectedValue();\n    var readOnlyValue = this.workOutReadOnlyValue();\n    this.processingColumnStateChange = true;\n    this.cbSelect.setSelected(selectedValue);\n\n    if (this.selectionCallback) {\n      this.selectionCallback(this.isSelected());\n    }\n\n    this.cbSelect.setReadOnly(readOnlyValue);\n    this.processingColumnStateChange = false;\n  };\n\n  ToolPanelColumnGroupComp.prototype.workOutReadOnlyValue = function () {\n    var pivotMode = this.columnController.isPivotMode();\n    var colsThatCanAction = 0;\n    this.columnGroup.getLeafColumns().forEach(function (col) {\n      if (pivotMode) {\n        if (col.isAnyFunctionAllowed()) {\n          colsThatCanAction++;\n        }\n      } else {\n        if (!col.isLockVisible()) {\n          colsThatCanAction++;\n        }\n      }\n    });\n    return colsThatCanAction === 0;\n  };\n\n  ToolPanelColumnGroupComp.prototype.workOutSelectedValue = function () {\n    var _this = this;\n\n    var pivotMode = this.columnController.isPivotMode();\n    var visibleChildCount = 0;\n    var hiddenChildCount = 0;\n    this.columnGroup.getLeafColumns().forEach(function (column) {\n      // ignore lock visible columns and columns set to 'suppressToolPanel'\n      var ignoredColumn = column.isLockVisible() || column.getColDef().suppressToolPanel;\n      if (ignoredColumn) return null;\n\n      if (_this.isColumnVisible(column, pivotMode)) {\n        visibleChildCount++;\n      } else {\n        hiddenChildCount++;\n      }\n    });\n    var selectedValue;\n\n    if (visibleChildCount > 0 && hiddenChildCount > 0) {\n      selectedValue = null;\n    } else if (visibleChildCount > 0) {\n      selectedValue = true;\n    } else {\n      selectedValue = false;\n    }\n\n    return selectedValue;\n  };\n\n  ToolPanelColumnGroupComp.prototype.isColumnVisible = function (column, pivotMode) {\n    if (pivotMode) {\n      var pivoted = column.isPivotActive();\n      var grouped = column.isRowGroupActive();\n      var aggregated = column.isValueActive();\n      return pivoted || grouped || aggregated;\n    } else {\n      return column.isVisible();\n    }\n  };\n\n  ToolPanelColumnGroupComp.prototype.onExpandOrContractClicked = function () {\n    this.expanded = !this.expanded;\n    this.setOpenClosedIcons();\n    this.expandedCallback();\n  };\n\n  ToolPanelColumnGroupComp.prototype.setOpenClosedIcons = function () {\n    var folderOpen = this.expanded;\n\n    main_1._.setVisible(this.eGroupClosedIcon, !folderOpen);\n\n    main_1._.setVisible(this.eGroupOpenedIcon, folderOpen);\n  };\n\n  ToolPanelColumnGroupComp.prototype.isExpanded = function () {\n    return this.expanded;\n  };\n\n  ToolPanelColumnGroupComp.prototype.getDisplayName = function () {\n    return this.displayName;\n  };\n\n  ToolPanelColumnGroupComp.prototype.onSelectAllChanged = function (value) {\n    if (value && !this.cbSelect.isSelected() || !value && this.cbSelect.isSelected()) {\n      if (!this.cbSelect.isReadOnly()) {\n        this.cbSelect.toggle();\n      }\n    }\n  };\n\n  ToolPanelColumnGroupComp.prototype.isSelected = function () {\n    return this.cbSelect.isSelected();\n  };\n\n  ToolPanelColumnGroupComp.prototype.isSelectable = function () {\n    return !this.cbSelect.isReadOnly();\n  };\n\n  ToolPanelColumnGroupComp.prototype.isExpandable = function () {\n    return true;\n  };\n\n  ToolPanelColumnGroupComp.prototype.setExpanded = function (value) {\n    if (this.expanded !== value) {\n      this.onExpandOrContractClicked();\n    }\n  };\n\n  ToolPanelColumnGroupComp.TEMPLATE = \"<div class=\\\"ag-column-tool-panel-column-group\\\">\\n            <span class=\\\"ag-column-group-icons\\\" ref=\\\"eColumnGroupIcons\\\" >\\n                <span class=\\\"ag-column-group-closed-icon\\\" ref=\\\"eGroupOpenedIcon\\\"></span>\\n                <span class=\\\"ag-column-group-opened-icon\\\" ref=\\\"eGroupClosedIcon\\\"></span>\\n            </span>\\n            <ag-checkbox ref=\\\"cbSelect\\\" class=\\\"ag-column-select-checkbox\\\"></ag-checkbox>\\n            <span class=\\\"ag-column-drag\\\" ref=\\\"eDragHandle\\\"></span>\\n            <span class=\\\"ag-column-tool-panel-column-group\\\" ref=\\\"eLabel\\\"></span>\\n        </div>\";\n\n  __decorate([main_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", main_1.GridOptionsWrapper)], ToolPanelColumnGroupComp.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([main_1.Autowired('columnController'), __metadata(\"design:type\", main_1.ColumnController)], ToolPanelColumnGroupComp.prototype, \"columnController\", void 0);\n\n  __decorate([main_1.Autowired('dragAndDropService'), __metadata(\"design:type\", main_1.DragAndDropService)], ToolPanelColumnGroupComp.prototype, \"dragAndDropService\", void 0);\n\n  __decorate([main_1.Autowired('eventService'), __metadata(\"design:type\", main_1.EventService)], ToolPanelColumnGroupComp.prototype, \"eventService\", void 0);\n\n  __decorate([main_1.RefSelector('cbSelect'), __metadata(\"design:type\", main_1.AgCheckbox)], ToolPanelColumnGroupComp.prototype, \"cbSelect\", void 0);\n\n  __decorate([main_1.RefSelector('eDragHandle'), __metadata(\"design:type\", HTMLElement)], ToolPanelColumnGroupComp.prototype, \"eDragHandle\", void 0);\n\n  __decorate([main_1.RefSelector('eLabel'), __metadata(\"design:type\", HTMLElement)], ToolPanelColumnGroupComp.prototype, \"eLabel\", void 0);\n\n  __decorate([main_1.RefSelector('eGroupOpenedIcon'), __metadata(\"design:type\", HTMLElement)], ToolPanelColumnGroupComp.prototype, \"eGroupOpenedIcon\", void 0);\n\n  __decorate([main_1.RefSelector('eGroupClosedIcon'), __metadata(\"design:type\", HTMLElement)], ToolPanelColumnGroupComp.prototype, \"eGroupClosedIcon\", void 0);\n\n  __decorate([main_1.RefSelector('eColumnGroupIcons'), __metadata(\"design:type\", HTMLElement)], ToolPanelColumnGroupComp.prototype, \"eColumnGroupIcons\", void 0);\n\n  __decorate([main_1.PostConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], ToolPanelColumnGroupComp.prototype, \"init\", null);\n\n  return ToolPanelColumnGroupComp;\n}(main_1.Component);\n\nexports.ToolPanelColumnGroupComp = ToolPanelColumnGroupComp;","map":null,"metadata":{},"sourceType":"script"}