{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ag_grid_community_1 = require(\"ag-grid-community\");\n\nvar rangeController_1 = require(\"../../rangeController\");\n\nvar nameValueComp_1 = require(\"./nameValueComp\");\n\nvar AggregationComp =\n/** @class */\nfunction (_super) {\n  __extends(AggregationComp, _super);\n\n  function AggregationComp() {\n    return _super.call(this, AggregationComp.TEMPLATE) || this;\n  }\n\n  AggregationComp.prototype.postConstruct = function () {\n    if (!this.isValidRowModel()) {\n      console.warn(\"ag-Grid: agAggregationComponent should only be used with the client and server side row model.\");\n      return;\n    }\n\n    this.avgAggregationComp.setLabel('average', 'Average');\n    this.countAggregationComp.setLabel('count', 'Count');\n    this.minAggregationComp.setLabel('min', 'Min');\n    this.maxAggregationComp.setLabel('max', 'Max');\n    this.sumAggregationComp.setLabel('sum', 'Sum');\n    this.addDestroyableEventListener(this.eventService, ag_grid_community_1.Events.EVENT_RANGE_SELECTION_CHANGED, this.onRangeSelectionChanged.bind(this));\n    this.addDestroyableEventListener(this.eventService, ag_grid_community_1.Events.EVENT_MODEL_UPDATED, this.onRangeSelectionChanged.bind(this));\n  };\n\n  AggregationComp.prototype.isValidRowModel = function () {\n    // this component is only really useful with client or server side rowmodels\n    var rowModelType = this.gridApi.getModel().getType();\n    return rowModelType === 'clientSide' || rowModelType === 'serverSide';\n  };\n\n  AggregationComp.prototype.init = function () {};\n\n  AggregationComp.prototype.setAggregationComponentValue = function (aggFuncName, value, visible) {\n    var statusBarValueComponent = this.getAggregationValueComponent(aggFuncName);\n\n    if (ag_grid_community_1._.exists(statusBarValueComponent) && statusBarValueComponent) {\n      statusBarValueComponent.setValue(ag_grid_community_1._.formatNumberTwoDecimalPlacesAndCommas(value));\n      statusBarValueComponent.setVisible(visible);\n    }\n  };\n\n  AggregationComp.prototype.getAggregationValueComponent = function (aggFuncName) {\n    // converts user supplied agg name to our reference - eg: sum => sumAggregationComp\n    var refComponentName = aggFuncName + \"AggregationComp\"; // if the user has specified the agAggregationPanelComp but no aggFuncs we show the all\n    // if the user has specified the agAggregationPanelComp and aggFuncs, then we only show the aggFuncs listed\n\n    var statusBarValueComponent = null;\n    var aggregationPanelConfig = ag_grid_community_1._.exists(this.gridOptions.statusBar) && this.gridOptions.statusBar ? ag_grid_community_1._.find(this.gridOptions.statusBar.statusPanels, function (panel) {\n      return panel.statusPanel === 'agAggregationComponent';\n    }) : null;\n\n    if (ag_grid_community_1._.exists(aggregationPanelConfig) && aggregationPanelConfig) {\n      // a little defensive here - if no statusPanelParams show it, if componentParams we also expect aggFuncs\n      if (!ag_grid_community_1._.exists(aggregationPanelConfig.statusPanelParams) || ag_grid_community_1._.exists(aggregationPanelConfig.statusPanelParams) && ag_grid_community_1._.exists(aggregationPanelConfig.statusPanelParams.aggFuncs) && ag_grid_community_1._.exists(ag_grid_community_1._.find(aggregationPanelConfig.statusPanelParams.aggFuncs, function (func) {\n        return func === aggFuncName;\n      }))) {\n        statusBarValueComponent = this[refComponentName];\n      }\n    } else {\n      // components not specified - assume we can show this component\n      statusBarValueComponent = this[refComponentName];\n    } // either we can't find it (which would indicate a typo or similar user side), or the user has deliberately\n    // not listed the component in aggFuncs\n\n\n    return statusBarValueComponent;\n  };\n\n  AggregationComp.prototype.onRangeSelectionChanged = function () {\n    var _this = this;\n\n    var cellRanges = this.rangeController.getCellRanges();\n    var sum = 0;\n    var count = 0;\n    var numberCount = 0;\n    var min = null;\n    var max = 0;\n    var cellsSoFar = {};\n\n    if (cellRanges && !ag_grid_community_1._.missingOrEmpty(cellRanges)) {\n      cellRanges.forEach(function (cellRange) {\n        // get starting and ending row, remember rowEnd could be before rowStart\n        var startRow = cellRange.start.getGridRow();\n        var endRow = cellRange.end.getGridRow();\n        var startRowIsFirst = startRow.before(endRow);\n        var currentRow = startRowIsFirst ? startRow : endRow;\n        var lastRow = startRowIsFirst ? endRow : startRow;\n\n        while (true) {\n          var finishedAllRows = ag_grid_community_1._.missing(currentRow) || !currentRow || lastRow.before(currentRow);\n\n          if (finishedAllRows || !currentRow || !cellRange.columns) {\n            break;\n          }\n\n          cellRange.columns.forEach(function (column) {\n            if (currentRow === null) {\n              return;\n            } // we only want to include each cell once, in case a cell is in multiple ranges\n\n\n            var cellId = currentRow.getGridCell(column).createId();\n\n            if (cellsSoFar[cellId]) {\n              return;\n            }\n\n            cellsSoFar[cellId] = true;\n\n            var rowNode = _this.getRowNode(currentRow);\n\n            if (ag_grid_community_1._.missing(rowNode)) {\n              return;\n            }\n\n            var value = _this.valueService.getValue(column, rowNode); // if empty cell, skip it, doesn't impact count or anything\n\n\n            if (ag_grid_community_1._.missing(value) || value === '') {\n              return;\n            } // see if value is wrapped, can happen when doing count() or avg() functions\n\n\n            if (value.value) {\n              value = value.value;\n            }\n\n            if (typeof value === 'string') {\n              value = Number(value);\n            }\n\n            if (typeof value === 'number' && !isNaN(value)) {\n              sum += value;\n\n              if (max === null || value > max) {\n                max = value;\n              }\n\n              if (min === null || value < min) {\n                min = value;\n              }\n\n              numberCount++;\n            }\n\n            count++;\n          });\n          currentRow = _this.cellNavigationService.getRowBelow(currentRow);\n        }\n      });\n    }\n\n    var gotResult = count > 1;\n    var gotNumberResult = numberCount > 1; // we show count even if no numbers\n\n    this.setAggregationComponentValue('count', count, gotResult); // show if numbers found\n\n    this.setAggregationComponentValue('sum', sum, gotNumberResult);\n    this.setAggregationComponentValue('min', min, gotNumberResult);\n    this.setAggregationComponentValue('max', max, gotNumberResult);\n    this.setAggregationComponentValue('avg', sum / numberCount, gotNumberResult);\n  };\n\n  AggregationComp.prototype.getRowNode = function (gridRow) {\n    switch (gridRow.floating) {\n      case ag_grid_community_1.Constants.PINNED_TOP:\n        return this.pinnedRowModel.getPinnedTopRowData()[gridRow.rowIndex];\n\n      case ag_grid_community_1.Constants.PINNED_BOTTOM:\n        return this.pinnedRowModel.getPinnedBottomRowData()[gridRow.rowIndex];\n\n      default:\n        return this.rowModel.getRow(gridRow.rowIndex);\n    }\n  };\n\n  AggregationComp.TEMPLATE = \"<div class=\\\"ag-status-panel ag-status-panel-aggregations\\\">\\n                <ag-name-value ref=\\\"avgAggregationComp\\\"></ag-name-value>\\n                <ag-name-value ref=\\\"countAggregationComp\\\"></ag-name-value>\\n                <ag-name-value ref=\\\"minAggregationComp\\\"></ag-name-value>\\n                <ag-name-value ref=\\\"maxAggregationComp\\\"></ag-name-value>\\n                <ag-name-value ref=\\\"sumAggregationComp\\\"></ag-name-value>\\n            </div>\";\n\n  __decorate([ag_grid_community_1.Autowired('eventService'), __metadata(\"design:type\", ag_grid_community_1.EventService)], AggregationComp.prototype, \"eventService\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('rangeController'), __metadata(\"design:type\", rangeController_1.RangeController)], AggregationComp.prototype, \"rangeController\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('valueService'), __metadata(\"design:type\", ag_grid_community_1.ValueService)], AggregationComp.prototype, \"valueService\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('cellNavigationService'), __metadata(\"design:type\", ag_grid_community_1.CellNavigationService)], AggregationComp.prototype, \"cellNavigationService\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('pinnedRowModel'), __metadata(\"design:type\", ag_grid_community_1.PinnedRowModel)], AggregationComp.prototype, \"pinnedRowModel\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('rowModel'), __metadata(\"design:type\", Object)], AggregationComp.prototype, \"rowModel\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", ag_grid_community_1.GridOptionsWrapper)], AggregationComp.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('gridOptions'), __metadata(\"design:type\", Object)], AggregationComp.prototype, \"gridOptions\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('gridApi'), __metadata(\"design:type\", ag_grid_community_1.GridApi)], AggregationComp.prototype, \"gridApi\", void 0);\n\n  __decorate([ag_grid_community_1.RefSelector('sumAggregationComp'), __metadata(\"design:type\", nameValueComp_1.NameValueComp)], AggregationComp.prototype, \"sumAggregationComp\", void 0);\n\n  __decorate([ag_grid_community_1.RefSelector('countAggregationComp'), __metadata(\"design:type\", nameValueComp_1.NameValueComp)], AggregationComp.prototype, \"countAggregationComp\", void 0);\n\n  __decorate([ag_grid_community_1.RefSelector('minAggregationComp'), __metadata(\"design:type\", nameValueComp_1.NameValueComp)], AggregationComp.prototype, \"minAggregationComp\", void 0);\n\n  __decorate([ag_grid_community_1.RefSelector('maxAggregationComp'), __metadata(\"design:type\", nameValueComp_1.NameValueComp)], AggregationComp.prototype, \"maxAggregationComp\", void 0);\n\n  __decorate([ag_grid_community_1.RefSelector('avgAggregationComp'), __metadata(\"design:type\", nameValueComp_1.NameValueComp)], AggregationComp.prototype, \"avgAggregationComp\", void 0);\n\n  __decorate([ag_grid_community_1.PostConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], AggregationComp.prototype, \"postConstruct\", null);\n\n  return AggregationComp;\n}(ag_grid_community_1.Component);\n\nexports.AggregationComp = AggregationComp;","map":null,"metadata":{},"sourceType":"script"}