{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar node_1 = require(\"./node\");\n\nvar path2D_1 = require(\"./path2D\");\n/**\n * Acts as `Group` node but with specified bounds that form a rectangle.\n * Any parts of the child nodes outside that rectangle will not be visible.\n * Unlike the `Group` node, the `ClipRect` node cannot be transformed.\n */\n\n\nvar ClipRect =\n/** @class */\nfunction (_super) {\n  __extends(ClipRect, _super);\n\n  function ClipRect() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.path = new path2D_1.Path2D();\n    _this._active = true;\n    _this._dirtyPath = true;\n    _this._x = 0;\n    _this._y = 0;\n    _this._width = 10;\n    _this._height = 10;\n    return _this;\n  }\n\n  ClipRect.prototype.isPointInNode = function (x, y) {\n    var point = this.transformPoint(x, y);\n    return point.x >= this.x && point.x <= this.x + this.width && point.y >= this.y && point.y <= this.y + this.height;\n  };\n\n  Object.defineProperty(ClipRect.prototype, \"active\", {\n    get: function get() {\n      return this._active;\n    },\n    set: function set(value) {\n      if (this._active !== value) {\n        this._active = value;\n        this.dirty = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClipRect.prototype, \"dirtyPath\", {\n    get: function get() {\n      return this._dirtyPath;\n    },\n    set: function set(value) {\n      if (this._dirtyPath !== value) {\n        this._dirtyPath = value;\n\n        if (value) {\n          this.dirty = true;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClipRect.prototype, \"x\", {\n    get: function get() {\n      return this._x;\n    },\n    set: function set(value) {\n      if (this._x !== value) {\n        this._x = value;\n        this.dirtyPath = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClipRect.prototype, \"y\", {\n    get: function get() {\n      return this._y;\n    },\n    set: function set(value) {\n      if (this._y !== value) {\n        this._y = value;\n        this.dirtyPath = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClipRect.prototype, \"width\", {\n    get: function get() {\n      return this._width;\n    },\n    set: function set(value) {\n      if (this._width !== value) {\n        this._width = value;\n        this.dirtyPath = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ClipRect.prototype, \"height\", {\n    get: function get() {\n      return this._height;\n    },\n    set: function set(value) {\n      if (this._height !== value) {\n        this._height = value;\n        this.dirtyPath = true;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ClipRect.prototype.updatePath = function () {\n    var path = this.path;\n    path.clear();\n    path.rect(this.x, this.y, this.width, this.height);\n    this.dirtyPath = false;\n  };\n\n  ClipRect.prototype.render = function (ctx) {\n    if (this.active) {\n      if (this.dirtyPath) {\n        this.updatePath();\n      }\n\n      this.scene.appendPath(this.path);\n      ctx.clip();\n    }\n\n    var children = this.children;\n    var n = children.length;\n\n    for (var i = 0; i < n; i++) {\n      ctx.save();\n      var child = children[i];\n\n      if (child.visible) {\n        child.render(ctx);\n      }\n\n      ctx.restore();\n    }\n  };\n\n  return ClipRect;\n}(node_1.Node);\n\nexports.ClipRect = ClipRect;","map":null,"metadata":{},"sourceType":"script"}