{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar main_1 = require(\"ag-grid-community/main\");\n\nvar toolPanelColumnGroupComp_1 = require(\"./toolPanelColumnGroupComp\");\n\nvar toolPanelColumnComp_1 = require(\"./toolPanelColumnComp\");\n\nvar primaryColsHeaderPanel_1 = require(\"./primaryColsHeaderPanel\");\n\nvar PrimaryColsListPanel =\n/** @class */\nfunction (_super) {\n  __extends(PrimaryColsListPanel, _super);\n\n  function PrimaryColsListPanel() {\n    return _super.call(this, PrimaryColsListPanel.TEMPLATE) || this;\n  }\n\n  PrimaryColsListPanel.prototype.init = function (params, allowDragging) {\n    this.params = params;\n    this.allowDragging = allowDragging;\n    this.addDestroyableEventListener(this.globalEventService, main_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.onColumnsChanged.bind(this));\n    this.expandGroupsByDefault = !this.params.contractColumnSelection;\n\n    if (this.columnController.isReady()) {\n      this.onColumnsChanged();\n    }\n  };\n\n  PrimaryColsListPanel.prototype.onColumnsChanged = function () {\n    this.destroyColumnComps();\n    this.columnTree = this.columnController.getPrimaryColumnTree();\n    var groupsExist = this.columnController.isPrimaryColumnGroupsPresent();\n    this.recursivelyAddComps(this.columnTree, 0, groupsExist);\n    this.updateVisibilityOfRows();\n  };\n\n  PrimaryColsListPanel.prototype.destroyColumnComps = function () {\n    main_1._.clearElement(this.getGui());\n\n    if (this.columnComps) {\n      main_1._.iterateObject(this.columnComps, function (key, renderedItem) {\n        return renderedItem.destroy();\n      });\n    }\n\n    this.columnComps = {};\n  };\n\n  PrimaryColsListPanel.prototype.recursivelyAddGroupComps = function (columnGroup, dept, groupsExist) {\n    // only render group if user provided the definition\n    var newDept;\n\n    if (columnGroup.getColGroupDef() && columnGroup.getColGroupDef().suppressToolPanel) {\n      return;\n    }\n\n    if (!columnGroup.isPadding()) {\n      var renderedGroup = new toolPanelColumnGroupComp_1.ToolPanelColumnGroupComp(columnGroup, dept, this.onGroupExpanded.bind(this), this.allowDragging, this.expandGroupsByDefault);\n      this.getContext().wireBean(renderedGroup);\n      this.getGui().appendChild(renderedGroup.getGui()); // we want to indent on the gui for the children\n\n      newDept = dept + 1;\n      this.columnComps[columnGroup.getId()] = renderedGroup;\n    } else {\n      // no children, so no indent\n      newDept = dept;\n    }\n\n    this.recursivelyAddComps(columnGroup.getChildren(), newDept, groupsExist);\n  };\n\n  PrimaryColsListPanel.prototype.onGroupExpanded = function () {\n    this.updateVisibilityOfRows();\n    this.fireExpandedEvent();\n  };\n\n  PrimaryColsListPanel.prototype.fireExpandedEvent = function () {\n    var _this = this;\n\n    var expandedCount = 0;\n    var notExpandedCount = 0;\n\n    var recursiveFunc = function recursiveFunc(items) {\n      items.forEach(function (item) {\n        // only interested in groups\n        if (item instanceof main_1.OriginalColumnGroup) {\n          var comp = _this.columnComps[item.getId()];\n\n          if (comp) {\n            if (comp.isExpanded()) {\n              expandedCount++;\n            } else {\n              notExpandedCount++;\n            }\n          }\n\n          var columnGroup = item;\n          var groupChildren = columnGroup.getChildren();\n          recursiveFunc(groupChildren);\n        }\n      });\n    };\n\n    recursiveFunc(this.columnTree);\n    var state;\n\n    if (expandedCount > 0 && notExpandedCount > 0) {\n      state = primaryColsHeaderPanel_1.SELECTED_STATE.INDETERMINIATE;\n    } else if (notExpandedCount > 0) {\n      state = primaryColsHeaderPanel_1.SELECTED_STATE.UNCHECKED;\n    } else {\n      state = primaryColsHeaderPanel_1.SELECTED_STATE.CHECKED;\n    }\n\n    this.dispatchEvent({\n      type: 'groupExpanded',\n      state: state\n    });\n  };\n\n  PrimaryColsListPanel.prototype.recursivelyAddColumnComps = function (column, dept, groupsExist) {\n    if (column.getColDef() && column.getColDef().suppressToolPanel) {\n      return;\n    }\n\n    var columnComp = new toolPanelColumnComp_1.ToolPanelColumnComp(column, dept, this.allowDragging, groupsExist);\n    this.getContext().wireBean(columnComp);\n    this.getGui().appendChild(columnComp.getGui());\n    this.columnComps[column.getId()] = columnComp;\n  };\n\n  PrimaryColsListPanel.prototype.recursivelyAddComps = function (tree, dept, groupsExist) {\n    var _this = this;\n\n    tree.forEach(function (child) {\n      if (child instanceof main_1.OriginalColumnGroup) {\n        _this.recursivelyAddGroupComps(child, dept, groupsExist);\n      } else {\n        _this.recursivelyAddColumnComps(child, dept, groupsExist);\n      }\n    });\n  };\n\n  PrimaryColsListPanel.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.destroyColumnComps();\n  };\n\n  PrimaryColsListPanel.prototype.doSetExpandedAll = function (value) {\n    main_1._.iterateObject(this.columnComps, function (key, renderedItem) {\n      if (renderedItem.isExpandable()) {\n        renderedItem.setExpanded(value);\n      }\n    });\n  };\n\n  PrimaryColsListPanel.prototype.setFilterText = function (filterText) {\n    this.filterText = main_1._.exists(filterText) ? filterText.toLowerCase() : null;\n    this.updateVisibilityOfRows();\n  };\n\n  PrimaryColsListPanel.prototype.updateVisibilityOfRows = function () {\n    // we have to create the filter results first as that requires dept first search, then setting\n    // the visibility requires breadth first search. this is because a group passes filter if CHILDREN\n    // pass filter, a column passes group open/closed visibility if a PARENT is open. so we need to do\n    // two recursions. we pass the result of the first recursion to the second.\n    var filterResults = main_1._.exists(this.filterText) ? this.createFilterResults() : null;\n    this.recursivelySetVisibility(this.columnTree, true, filterResults);\n  };\n\n  PrimaryColsListPanel.prototype.createFilterResults = function () {\n    var _this = this;\n\n    var filterResults = {}; // we recurse dept first - as the item should show if any of the children are showing\n\n    var recursivelyCheckFilter = function recursivelyCheckFilter(items) {\n      var atLeastOneThisLevelPassed = false;\n      items.forEach(function (item) {\n        var atLeastOneChildPassed = false;\n\n        if (item instanceof main_1.OriginalColumnGroup) {\n          var columnGroup = item;\n          var groupChildren = columnGroup.getChildren();\n          atLeastOneChildPassed = recursivelyCheckFilter(groupChildren);\n        }\n\n        var filterPasses;\n\n        if (atLeastOneChildPassed) {\n          filterPasses = true;\n        } else {\n          var comp = _this.columnComps[item.getId()];\n\n          if (comp && _this.filterText) {\n            var displayName = comp.getDisplayName();\n            filterPasses = displayName !== null ? displayName.toLowerCase().indexOf(_this.filterText) >= 0 : true;\n          } else {\n            filterPasses = true;\n          }\n        }\n\n        filterResults[item.getId()] = filterPasses;\n\n        if (filterPasses) {\n          atLeastOneThisLevelPassed = true;\n        }\n      });\n      return atLeastOneThisLevelPassed;\n    };\n\n    recursivelyCheckFilter(this.columnTree);\n    return filterResults;\n  };\n\n  PrimaryColsListPanel.prototype.recursivelySetVisibility = function (columnTree, parentGroupsOpen, filterResults) {\n    var _this = this;\n\n    columnTree.forEach(function (child) {\n      var comp = _this.columnComps[child.getId()];\n\n      if (comp) {\n        var passesFilter = filterResults ? filterResults[child.getId()] : true;\n        comp.setVisible(parentGroupsOpen && passesFilter);\n      }\n\n      if (child instanceof main_1.OriginalColumnGroup) {\n        var columnGroup = child;\n        var childrenOpen = void 0;\n\n        if (comp) {\n          var expanded = comp.isExpanded();\n          childrenOpen = parentGroupsOpen ? expanded : false;\n        } else {\n          childrenOpen = parentGroupsOpen;\n        }\n\n        var children = columnGroup.getChildren();\n\n        _this.recursivelySetVisibility(children, childrenOpen, filterResults);\n      }\n    });\n  };\n\n  PrimaryColsListPanel.prototype.doSetSelectedAll = function (checked) {\n    main_1._.iterateObject(this.columnComps, function (key, column) {\n      column.onSelectAllChanged(checked);\n    });\n  };\n\n  PrimaryColsListPanel.TEMPLATE = \"<div class=\\\"ag-primary-cols-list-panel\\\"></div>\";\n\n  __decorate([main_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", main_1.GridOptionsWrapper)], PrimaryColsListPanel.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([main_1.Autowired('columnController'), __metadata(\"design:type\", main_1.ColumnController)], PrimaryColsListPanel.prototype, \"columnController\", void 0);\n\n  __decorate([main_1.Autowired('eventService'), __metadata(\"design:type\", main_1.EventService)], PrimaryColsListPanel.prototype, \"globalEventService\", void 0);\n\n  return PrimaryColsListPanel;\n}(main_1.Component);\n\nexports.PrimaryColsListPanel = PrimaryColsListPanel;","map":null,"metadata":{},"sourceType":"script"}