{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar main_1 = require(\"ag-grid-community/main\");\n\nvar PivotModePanel =\n/** @class */\nfunction (_super) {\n  __extends(PivotModePanel, _super);\n\n  function PivotModePanel() {\n    return _super.call(this) || this;\n  }\n\n  PivotModePanel.prototype.createTemplate = function () {\n    return \"<div class=\\\"ag-pivot-mode-panel\\\">\\n                <ag-checkbox ref=\\\"cbPivotMode\\\" class=\\\"ag-pivot-mode-select\\\"></ag-checkbox>\\n            </div>\";\n  };\n\n  PivotModePanel.prototype.init = function () {\n    this.setTemplate(this.createTemplate());\n    this.cbPivotMode.setSelected(this.columnController.isPivotMode());\n    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();\n    this.cbPivotMode.setLabel(localeTextFunc('pivotMode', 'Pivot Mode'));\n    this.addDestroyableEventListener(this.cbPivotMode, main_1.AgCheckbox.EVENT_CHANGED, this.onBtPivotMode.bind(this));\n    this.addDestroyableEventListener(this.eventService, main_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.onPivotModeChanged.bind(this));\n    this.addDestroyableEventListener(this.eventService, main_1.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.onPivotModeChanged.bind(this));\n  };\n\n  PivotModePanel.prototype.onBtPivotMode = function () {\n    var newValue = this.cbPivotMode.isSelected();\n\n    if (newValue !== this.columnController.isPivotMode()) {\n      this.columnController.setPivotMode(newValue, \"toolPanelUi\");\n      var api = this.gridOptionsWrapper.getApi();\n\n      if (api) {\n        api.refreshHeader();\n      }\n    }\n  };\n\n  PivotModePanel.prototype.onPivotModeChanged = function () {\n    var pivotModeActive = this.columnController.isPivotMode();\n    this.cbPivotMode.setSelected(pivotModeActive);\n  };\n\n  __decorate([main_1.Autowired('columnController'), __metadata(\"design:type\", main_1.ColumnController)], PivotModePanel.prototype, \"columnController\", void 0);\n\n  __decorate([main_1.Autowired('eventService'), __metadata(\"design:type\", main_1.EventService)], PivotModePanel.prototype, \"eventService\", void 0);\n\n  __decorate([main_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", main_1.GridOptionsWrapper)], PivotModePanel.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([main_1.RefSelector('cbPivotMode'), __metadata(\"design:type\", main_1.AgCheckbox)], PivotModePanel.prototype, \"cbPivotMode\", void 0);\n\n  __decorate([main_1.PreConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], PivotModePanel.prototype, \"init\", null);\n\n  return PivotModePanel;\n}(main_1.Component);\n\nexports.PivotModePanel = PivotModePanel;","map":null,"metadata":{},"sourceType":"script"}