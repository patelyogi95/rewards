{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar chart_1 = require(\"./chart\");\n\nvar clipRect_1 = require(\"../scene/clipRect\");\n\nvar CartesianChart =\n/** @class */\nfunction (_super) {\n  __extends(CartesianChart, _super);\n\n  function CartesianChart(xAxis, yAxis, parent) {\n    if (parent === void 0) {\n      parent = document.body;\n    }\n\n    var _this = _super.call(this, parent) || this;\n\n    _this.seriesClipRect = new clipRect_1.ClipRect();\n\n    _this.scene.root.append([xAxis.group, yAxis.group, _this.seriesClipRect]);\n\n    _this._xAxis = xAxis;\n    _this._yAxis = yAxis;\n    return _this;\n  }\n\n  Object.defineProperty(CartesianChart.prototype, \"xAxis\", {\n    get: function get() {\n      return this._xAxis;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CartesianChart.prototype, \"yAxis\", {\n    get: function get() {\n      return this._yAxis;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  CartesianChart.prototype.addSeries = function (series) {\n    this.seriesClipRect.append(series.group);\n\n    this._series.push(series);\n\n    series.chart = this;\n    this.layoutPending = true;\n  };\n\n  CartesianChart.prototype.performLayout = function () {\n    if (!(this.xAxis && this.yAxis)) {\n      return;\n    }\n\n    var shrinkRect = {\n      x: 0,\n      y: 0,\n      width: this.width,\n      height: this.height\n    };\n    var padding = this.padding;\n    shrinkRect.x += padding.left;\n    shrinkRect.y += padding.top;\n    shrinkRect.width -= padding.left + padding.right;\n    shrinkRect.height -= padding.top + padding.bottom;\n    var seriesClipRect = this.seriesClipRect;\n    seriesClipRect.x = shrinkRect.x;\n    seriesClipRect.y = shrinkRect.y - padding.top;\n    seriesClipRect.width = shrinkRect.width;\n    seriesClipRect.height = shrinkRect.height + padding.top;\n    var xAxis = this.xAxis;\n    var yAxis = this.yAxis; // xAxis.scale.\n\n    xAxis.scale.range = [0, shrinkRect.width];\n    xAxis.rotation = -90;\n    xAxis.translationX = shrinkRect.x;\n    xAxis.translationY = shrinkRect.y + shrinkRect.height + 1;\n    xAxis.parallelLabels = true;\n    xAxis.gridLength = shrinkRect.height;\n    yAxis.scale.range = [shrinkRect.height, 0];\n    yAxis.translationX = shrinkRect.x;\n    yAxis.translationY = shrinkRect.y;\n    yAxis.gridLength = shrinkRect.width;\n\n    this._series.forEach(function (series) {\n      series.group.translationX = shrinkRect.x;\n      series.group.translationY = shrinkRect.y;\n      series.processData();\n    }); // this.updateAxes();\n\n\n    this._series.forEach(function (series) {\n      series.update();\n    });\n  };\n\n  CartesianChart.prototype.updateAxes = function () {\n    var xAxis = this.xAxis;\n    var yAxis = this.yAxis;\n\n    if (!(xAxis && yAxis)) {\n      return;\n    }\n\n    if (this._series.length) {\n      var series = this.series[0];\n      xAxis.scale.domain = series.getDomainX();\n      yAxis.scale.domain = series.getDomainY();\n    }\n\n    xAxis.update();\n    yAxis.update();\n  };\n\n  return CartesianChart;\n}(chart_1.Chart);\n\nexports.CartesianChart = CartesianChart;","map":null,"metadata":{},"sourceType":"script"}