{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar main_1 = require(\"ag-grid-community/main\");\n\nvar baseDropZonePanel_1 = require(\"../dropZone/baseDropZonePanel\");\n\nvar PivotDropZonePanel =\n/** @class */\nfunction (_super) {\n  __extends(PivotDropZonePanel, _super);\n\n  function PivotDropZonePanel(horizontal) {\n    return _super.call(this, horizontal, false, 'pivot') || this;\n  }\n\n  PivotDropZonePanel.prototype.passBeansUp = function () {\n    _super.prototype.setBeans.call(this, {\n      gridOptionsWrapper: this.gridOptionsWrapper,\n      eventService: this.eventService,\n      context: this.getContext(),\n      loggerFactory: this.loggerFactory,\n      dragAndDropService: this.dragAndDropService\n    });\n\n    var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();\n    var emptyMessage = localeTextFunc('pivotColumnsEmptyMessage', 'Drag here to set column labels');\n    var title = localeTextFunc('pivots', 'Column Labels');\n\n    _super.prototype.init.call(this, {\n      dragAndDropIcon: main_1.DragAndDropService.ICON_GROUP,\n      icon: main_1._.createIconNoSpan('pivotPanel', this.gridOptionsWrapper, null),\n      emptyMessage: emptyMessage,\n      title: title\n    });\n\n    this.addDestroyableEventListener(this.eventService, main_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.refresh.bind(this));\n    this.addDestroyableEventListener(this.eventService, main_1.Events.EVENT_COLUMN_PIVOT_CHANGED, this.refresh.bind(this));\n    this.addDestroyableEventListener(this.eventService, main_1.Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, this.checkVisibility.bind(this));\n    this.refresh();\n  };\n\n  PivotDropZonePanel.prototype.refresh = function () {\n    this.checkVisibility();\n    this.refreshGui();\n  };\n\n  PivotDropZonePanel.prototype.checkVisibility = function () {\n    var pivotMode = this.columnController.isPivotMode();\n\n    if (this.isHorizontal()) {\n      // what we do for horizontal (ie the pivot panel at the top) depends\n      // on the user property as well as pivotMode.\n      switch (this.gridOptionsWrapper.getPivotPanelShow()) {\n        case 'always':\n          this.setVisible(pivotMode);\n          break;\n\n        case 'onlyWhenPivoting':\n          var pivotActive = this.columnController.isPivotActive();\n          this.setVisible(pivotMode && pivotActive);\n          break;\n\n        default:\n          // never show it\n          this.setVisible(false);\n          break;\n      }\n    } else {\n      // in toolPanel, the pivot panel is always shown when pivot mode is on\n      this.setVisible(pivotMode);\n    }\n  };\n\n  PivotDropZonePanel.prototype.isColumnDroppable = function (column) {\n    if (this.gridOptionsWrapper.isFunctionsReadOnly()) {\n      return false;\n    } // we never allow grouping of secondary columns\n\n\n    if (!column.isPrimary()) {\n      return false;\n    }\n\n    var allowPivot = column.isAllowPivot();\n    var columnNotAlreadyPivoted = !column.isPivotActive();\n    return allowPivot && columnNotAlreadyPivoted;\n  };\n\n  PivotDropZonePanel.prototype.updateColumns = function (columns) {\n    if (this.gridOptionsWrapper.isFunctionsPassive()) {\n      var event_1 = {\n        type: main_1.Events.EVENT_COLUMN_PIVOT_CHANGE_REQUEST,\n        columns: columns,\n        api: this.gridApi,\n        columnApi: this.columnApi\n      };\n      this.eventService.dispatchEvent(event_1);\n    } else {\n      this.columnController.setPivotColumns(columns, \"toolPanelUi\");\n    }\n  };\n\n  PivotDropZonePanel.prototype.getIconName = function () {\n    return this.isPotentialDndColumns() ? main_1.DragAndDropService.ICON_PIVOT : main_1.DragAndDropService.ICON_NOT_ALLOWED;\n  };\n\n  PivotDropZonePanel.prototype.getExistingColumns = function () {\n    return this.columnController.getPivotColumns();\n  };\n\n  __decorate([main_1.Autowired('columnController'), __metadata(\"design:type\", main_1.ColumnController)], PivotDropZonePanel.prototype, \"columnController\", void 0);\n\n  __decorate([main_1.Autowired('eventService'), __metadata(\"design:type\", main_1.EventService)], PivotDropZonePanel.prototype, \"eventService\", void 0);\n\n  __decorate([main_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", main_1.GridOptionsWrapper)], PivotDropZonePanel.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([main_1.Autowired('loggerFactory'), __metadata(\"design:type\", main_1.LoggerFactory)], PivotDropZonePanel.prototype, \"loggerFactory\", void 0);\n\n  __decorate([main_1.Autowired('dragAndDropService'), __metadata(\"design:type\", main_1.DragAndDropService)], PivotDropZonePanel.prototype, \"dragAndDropService\", void 0);\n\n  __decorate([main_1.Autowired('columnApi'), __metadata(\"design:type\", main_1.ColumnApi)], PivotDropZonePanel.prototype, \"columnApi\", void 0);\n\n  __decorate([main_1.Autowired('gridApi'), __metadata(\"design:type\", main_1.GridApi)], PivotDropZonePanel.prototype, \"gridApi\", void 0);\n\n  __decorate([main_1.PostConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], PivotDropZonePanel.prototype, \"passBeansUp\", null);\n\n  return PivotDropZonePanel;\n}(baseDropZonePanel_1.BaseDropZonePanel);\n\nexports.PivotDropZonePanel = PivotDropZonePanel;","map":null,"metadata":{},"sourceType":"script"}