{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar main_1 = require(\"ag-grid-community/main\");\n\nvar dropZoneColumnComp_1 = require(\"./dropZoneColumnComp\");\n\nvar BaseDropZonePanel =\n/** @class */\nfunction (_super) {\n  __extends(BaseDropZonePanel, _super);\n\n  function BaseDropZonePanel(horizontal, valueColumn, name) {\n    var _this = _super.call(this, \"<div class=\\\"ag-column-drop ag-unselectable ag-column-drop-\" + (horizontal ? 'horizontal' : 'vertical') + \" ag-column-drop-\" + name + \"\\\"></div>\") || this;\n\n    _this.state = BaseDropZonePanel.STATE_NOT_DRAGGING;\n    _this.guiDestroyFunctions = [];\n    _this.childColumnComponents = [];\n    _this.horizontal = horizontal;\n    _this.valueColumn = valueColumn;\n    _this.eColumnDropList = main_1._.loadTemplate('<div class=\"ag-column-drop-list\"></div>');\n    return _this;\n  }\n\n  BaseDropZonePanel.prototype.isHorizontal = function () {\n    return this.horizontal;\n  };\n\n  BaseDropZonePanel.prototype.setBeans = function (beans) {\n    this.beans = beans;\n  };\n\n  BaseDropZonePanel.prototype.destroy = function () {\n    this.destroyGui();\n\n    _super.prototype.destroy.call(this);\n  };\n\n  BaseDropZonePanel.prototype.destroyGui = function () {\n    this.guiDestroyFunctions.forEach(function (func) {\n      return func();\n    });\n    this.guiDestroyFunctions.length = 0;\n    this.childColumnComponents.length = 0;\n\n    main_1._.clearElement(this.getGui());\n\n    main_1._.clearElement(this.eColumnDropList);\n  };\n\n  BaseDropZonePanel.prototype.init = function (params) {\n    this.params = params;\n    this.logger = this.beans.loggerFactory.create('AbstractColumnDropPanel');\n    this.beans.eventService.addEventListener(main_1.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.refreshGui.bind(this));\n    this.addDestroyableEventListener(this.beans.gridOptionsWrapper, 'functionsReadOnly', this.refreshGui.bind(this));\n    this.setupDropTarget(); // we don't know if this bean will be initialised before columnController.\n    // if columnController first, then below will work\n    // if columnController second, then below will put blank in, and then above event gets first when columnController is set up\n\n    this.refreshGui();\n  };\n\n  BaseDropZonePanel.prototype.setupDropTarget = function () {\n    this.dropTarget = {\n      getContainer: this.getGui.bind(this),\n      getIconName: this.getIconName.bind(this),\n      onDragging: this.onDragging.bind(this),\n      onDragEnter: this.onDragEnter.bind(this),\n      onDragLeave: this.onDragLeave.bind(this),\n      onDragStop: this.onDragStop.bind(this),\n      isInterestedIn: this.isInterestedIn.bind(this)\n    };\n    this.beans.dragAndDropService.addDropTarget(this.dropTarget);\n  };\n\n  BaseDropZonePanel.prototype.isInterestedIn = function (type) {\n    // not interested in row drags\n    return type === main_1.DragSourceType.HeaderCell || type === main_1.DragSourceType.ToolPanel;\n  };\n\n  BaseDropZonePanel.prototype.checkInsertIndex = function (draggingEvent) {\n    var newIndex;\n\n    if (this.horizontal) {\n      newIndex = this.getNewHorizontalInsertIndex(draggingEvent);\n    } else {\n      newIndex = this.getNewVerticalInsertIndex(draggingEvent);\n    } // <0 happens when drag is no a direction we are interested in, eg drag is up/down but in horizontal panel\n\n\n    if (newIndex < 0) {\n      return false;\n    }\n\n    var changed = newIndex !== this.insertIndex;\n\n    if (changed) {\n      this.insertIndex = newIndex;\n    }\n\n    return changed;\n  };\n\n  BaseDropZonePanel.prototype.getNewHorizontalInsertIndex = function (draggingEvent) {\n    if (main_1._.missing(draggingEvent.hDirection)) {\n      return -1;\n    }\n\n    var newIndex = 0;\n    var mouseEvent = draggingEvent.event;\n    var enableRtl = this.beans.gridOptionsWrapper.isEnableRtl();\n    var goingLeft = draggingEvent.hDirection === main_1.HDirection.Left;\n    var mouseX = mouseEvent.clientX;\n    this.childColumnComponents.forEach(function (childColumn) {\n      var rect = childColumn.getGui().getBoundingClientRect();\n      var rectX = goingLeft ? rect.right : rect.left;\n      var horizontalFit = enableRtl ? mouseX <= rectX : mouseX >= rectX;\n\n      if (horizontalFit) {\n        newIndex++;\n      }\n    });\n    return newIndex;\n  };\n\n  BaseDropZonePanel.prototype.getNewVerticalInsertIndex = function (draggingEvent) {\n    if (main_1._.missing(draggingEvent.vDirection)) {\n      return -1;\n    }\n\n    var newIndex = 0;\n    var mouseEvent = draggingEvent.event;\n    this.childColumnComponents.forEach(function (childColumn) {\n      var rect = childColumn.getGui().getBoundingClientRect();\n\n      if (draggingEvent.vDirection === main_1.VDirection.Down) {\n        var verticalFit = mouseEvent.clientY >= rect.top;\n\n        if (verticalFit) {\n          newIndex++;\n        }\n      } else {\n        var verticalFit = mouseEvent.clientY >= rect.bottom;\n\n        if (verticalFit) {\n          newIndex++;\n        }\n      }\n    });\n    return newIndex;\n  };\n\n  BaseDropZonePanel.prototype.checkDragStartedBySelf = function (draggingEvent) {\n    if (this.state !== BaseDropZonePanel.STATE_NOT_DRAGGING) {\n      return;\n    }\n\n    this.state = BaseDropZonePanel.STATE_REARRANGE_COLUMNS;\n    this.potentialDndColumns = draggingEvent.dragSource.dragItemCallback().columns || [];\n    this.refreshGui();\n    this.checkInsertIndex(draggingEvent);\n    this.refreshGui();\n  };\n\n  BaseDropZonePanel.prototype.onDragging = function (draggingEvent) {\n    this.checkDragStartedBySelf(draggingEvent);\n    var positionChanged = this.checkInsertIndex(draggingEvent);\n\n    if (positionChanged) {\n      this.refreshGui();\n    }\n  };\n\n  BaseDropZonePanel.prototype.onDragEnter = function (draggingEvent) {\n    // this will contain all columns that are potential drops\n    var dragColumns = draggingEvent.dragSource.dragItemCallback().columns || [];\n    this.state = BaseDropZonePanel.STATE_NEW_COLUMNS_IN; // take out columns that are not groupable\n\n    var goodDragColumns = main_1._.filter(dragColumns, this.isColumnDroppable.bind(this));\n\n    var weHaveColumnsToDrag = goodDragColumns.length > 0;\n\n    if (weHaveColumnsToDrag) {\n      this.potentialDndColumns = goodDragColumns;\n      this.checkInsertIndex(draggingEvent);\n      this.refreshGui();\n    }\n  };\n\n  BaseDropZonePanel.prototype.isPotentialDndColumns = function () {\n    return main_1._.existsAndNotEmpty(this.potentialDndColumns);\n  };\n\n  BaseDropZonePanel.prototype.onDragLeave = function (draggingEvent) {\n    // if the dragging started from us, we remove the group, however if it started\n    // someplace else, then we don't, as it was only 'asking'\n    if (this.state === BaseDropZonePanel.STATE_REARRANGE_COLUMNS) {\n      var columns = draggingEvent.dragSource.dragItemCallback().columns || [];\n      this.removeColumns(columns);\n    }\n\n    if (this.isPotentialDndColumns()) {\n      this.potentialDndColumns = [];\n      this.refreshGui();\n    }\n\n    this.state = BaseDropZonePanel.STATE_NOT_DRAGGING;\n  };\n\n  BaseDropZonePanel.prototype.onDragStop = function () {\n    if (this.isPotentialDndColumns()) {\n      var success = void 0;\n\n      if (this.state === BaseDropZonePanel.STATE_NEW_COLUMNS_IN) {\n        this.addColumns(this.potentialDndColumns);\n        success = true;\n      } else {\n        success = this.rearrangeColumns(this.potentialDndColumns);\n      }\n\n      this.potentialDndColumns = []; // if the function is passive, then we don't refresh, as we assume the client application\n      // is going to call setRowGroups / setPivots / setValues at a later point which will then\n      // cause a refresh. this gives a nice gui where the ghost stays until the app has caught\n      // up with the changes.\n\n      if (this.beans.gridOptionsWrapper.isFunctionsPassive()) {\n        // when functions are passive, we don't refresh,\n        // unless there was no change in the order, then we\n        // do need to refresh to reset the columns\n        if (!success) {\n          this.refreshGui();\n        }\n      } else {\n        this.refreshGui();\n      }\n    }\n\n    this.state = BaseDropZonePanel.STATE_NOT_DRAGGING;\n  };\n\n  BaseDropZonePanel.prototype.removeColumns = function (columnsToRemove) {\n    var newColumnList = this.getExistingColumns().slice();\n    columnsToRemove.forEach(function (column) {\n      return main_1._.removeFromArray(newColumnList, column);\n    });\n    this.updateColumns(newColumnList);\n  };\n\n  BaseDropZonePanel.prototype.addColumns = function (columnsToAdd) {\n    var newColumnList = this.getExistingColumns().slice();\n\n    main_1._.insertArrayIntoArray(newColumnList, columnsToAdd, this.insertIndex);\n\n    this.updateColumns(newColumnList);\n  };\n\n  BaseDropZonePanel.prototype.rearrangeColumns = function (columnsToAdd) {\n    var newColumnList = this.getNonGhostColumns().slice();\n\n    main_1._.insertArrayIntoArray(newColumnList, columnsToAdd, this.insertIndex);\n\n    var noChangeDetected = main_1._.shallowCompare(newColumnList, this.getExistingColumns());\n\n    if (noChangeDetected) {\n      return false;\n    } else {\n      this.updateColumns(newColumnList);\n      return true;\n    }\n  };\n\n  BaseDropZonePanel.prototype.refreshGui = function () {\n    // we reset the scroll position after the refresh.\n    // if we don't do this, then the list will always scroll to the top\n    // each time we refresh it. this is because part of the refresh empties\n    // out the list which sets scroll to zero. so the user could be just\n    // reordering the list - we want to prevent the resetting of the scroll.\n    // this is relevant for vertical display only (as horizontal has no scroll)\n    var scrollTop = this.eColumnDropList.scrollTop;\n    this.destroyGui();\n    this.addIconAndTitleToGui();\n    this.addEmptyMessageToGui();\n    this.addColumnsToGui();\n\n    if (!this.isHorizontal()) {\n      this.eColumnDropList.scrollTop = scrollTop;\n    }\n  };\n\n  BaseDropZonePanel.prototype.getNonGhostColumns = function () {\n    var _this = this;\n\n    var existingColumns = this.getExistingColumns();\n    var nonGhostColumns;\n\n    if (this.isPotentialDndColumns()) {\n      nonGhostColumns = main_1._.filter(existingColumns, function (column) {\n        return _this.potentialDndColumns.indexOf(column) < 0;\n      });\n    } else {\n      nonGhostColumns = existingColumns;\n    }\n\n    return nonGhostColumns;\n  };\n\n  BaseDropZonePanel.prototype.addColumnsToGui = function () {\n    var _this = this;\n\n    var nonGhostColumns = this.getNonGhostColumns();\n    var itemsToAddToGui = [];\n    var addingGhosts = this.isPotentialDndColumns();\n    nonGhostColumns.forEach(function (column, index) {\n      if (addingGhosts && index >= _this.insertIndex) {\n        return;\n      }\n\n      var columnComponent = _this.createColumnComponent(column, false);\n\n      itemsToAddToGui.push(columnComponent);\n    });\n\n    if (this.isPotentialDndColumns()) {\n      this.potentialDndColumns.forEach(function (column) {\n        var columnComponent = _this.createColumnComponent(column, true);\n\n        itemsToAddToGui.push(columnComponent);\n      });\n      nonGhostColumns.forEach(function (column, index) {\n        if (index < _this.insertIndex) {\n          return;\n        }\n\n        var columnComponent = _this.createColumnComponent(column, false);\n\n        itemsToAddToGui.push(columnComponent);\n      });\n    }\n\n    this.getGui().appendChild(this.eColumnDropList);\n    itemsToAddToGui.forEach(function (columnComponent, index) {\n      var needSeparator = index !== 0;\n\n      if (needSeparator) {\n        _this.addArrow(_this.eColumnDropList);\n      }\n\n      _this.eColumnDropList.appendChild(columnComponent.getGui());\n    });\n  };\n\n  BaseDropZonePanel.prototype.createColumnComponent = function (column, ghost) {\n    var columnComponent = new dropZoneColumnComp_1.DropZoneColumnComp(column, this.dropTarget, ghost, this.valueColumn);\n    columnComponent.addEventListener(dropZoneColumnComp_1.DropZoneColumnComp.EVENT_COLUMN_REMOVE, this.removeColumns.bind(this, [column]));\n    this.beans.context.wireBean(columnComponent);\n    this.guiDestroyFunctions.push(function () {\n      return columnComponent.destroy();\n    });\n\n    if (!ghost) {\n      this.childColumnComponents.push(columnComponent);\n    }\n\n    return columnComponent;\n  };\n\n  BaseDropZonePanel.prototype.addIconAndTitleToGui = function () {\n    var iconFaded = this.horizontal && this.isExistingColumnsEmpty();\n    var eGroupIcon = this.params.icon;\n    var eContainer = document.createElement('div');\n\n    main_1._.addCssClass(eGroupIcon, 'ag-column-drop-icon');\n\n    main_1._.addOrRemoveCssClass(eGroupIcon, 'ag-faded', iconFaded);\n\n    eContainer.appendChild(eGroupIcon);\n\n    if (!this.horizontal) {\n      var eTitle = document.createElement('span');\n      eTitle.innerHTML = this.params.title;\n\n      main_1._.addCssClass(eTitle, 'ag-column-drop-title');\n\n      main_1._.addOrRemoveCssClass(eTitle, 'ag-faded', iconFaded);\n\n      eContainer.appendChild(eTitle);\n    }\n\n    this.getGui().appendChild(eContainer);\n  };\n\n  BaseDropZonePanel.prototype.isExistingColumnsEmpty = function () {\n    return this.getExistingColumns().length === 0;\n  };\n\n  BaseDropZonePanel.prototype.addEmptyMessageToGui = function () {\n    var showEmptyMessage = this.isExistingColumnsEmpty() && !this.isPotentialDndColumns();\n\n    if (!showEmptyMessage) {\n      return;\n    }\n\n    var eMessage = document.createElement('span');\n    eMessage.innerHTML = this.params.emptyMessage;\n\n    main_1._.addCssClass(eMessage, 'ag-column-drop-empty-message');\n\n    this.getGui().appendChild(eMessage);\n  };\n\n  BaseDropZonePanel.prototype.addArrow = function (eParent) {\n    // only add the arrows if the layout is horizontal\n    if (this.horizontal) {\n      // for RTL it's a left arrow, otherwise it's a right arrow\n      var enableRtl = this.beans.gridOptionsWrapper.isEnableRtl();\n      var charCode = enableRtl ? BaseDropZonePanel.CHAR_LEFT_ARROW : BaseDropZonePanel.CHAR_RIGHT_ARROW;\n      var spanClass = enableRtl ? 'ag-left-arrow' : 'ag-right-arrow';\n      var eArrow = document.createElement('span');\n      eArrow.className = spanClass;\n      eArrow.innerHTML = charCode;\n      eParent.appendChild(eArrow);\n    }\n  };\n\n  BaseDropZonePanel.STATE_NOT_DRAGGING = 'notDragging';\n  BaseDropZonePanel.STATE_NEW_COLUMNS_IN = 'newColumnsIn';\n  BaseDropZonePanel.STATE_REARRANGE_COLUMNS = 'rearrangeColumns';\n  BaseDropZonePanel.CHAR_LEFT_ARROW = '&#8592;';\n  BaseDropZonePanel.CHAR_RIGHT_ARROW = '&#8594;';\n  return BaseDropZonePanel;\n}(main_1.Component);\n\nexports.BaseDropZonePanel = BaseDropZonePanel;","map":null,"metadata":{},"sourceType":"script"}