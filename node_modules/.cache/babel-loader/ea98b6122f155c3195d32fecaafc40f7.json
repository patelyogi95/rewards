{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar stylesheet_1 = require(\"./stylesheet\");\n\nvar getBorderColor = function getBorderColor(color) {\n  return {\n    name: 'color',\n    properties: {\n      rawMap: {\n        rgb: stylesheet_1.convertLegacyColor(color || '#000000')\n      }\n    }\n  };\n};\n\nvar borderFactory = {\n  getTemplate: function getTemplate(border) {\n    var left = border.left,\n        right = border.right,\n        top = border.top,\n        bottom = border.bottom,\n        diagonal = border.diagonal;\n    var leftChildren = left ? [getBorderColor(left.color)] : undefined;\n    var rightChildren = right ? [getBorderColor(right.color)] : undefined;\n    var topChildren = top ? [getBorderColor(top.color)] : undefined;\n    var bottomChildren = bottom ? [getBorderColor(bottom.color)] : undefined;\n    var diagonalChildren = diagonal ? [getBorderColor(diagonal.color)] : undefined;\n    return {\n      name: 'border',\n      children: [{\n        name: 'left',\n        properties: {\n          rawMap: {\n            style: left && left.style\n          }\n        },\n        children: leftChildren\n      }, {\n        name: 'right',\n        properties: {\n          rawMap: {\n            style: right && right.style\n          }\n        },\n        children: rightChildren\n      }, {\n        name: 'top',\n        properties: {\n          rawMap: {\n            style: top && top.style\n          }\n        },\n        children: topChildren\n      }, {\n        name: 'bottom',\n        properties: {\n          rawMap: {\n            style: bottom && bottom.style\n          }\n        },\n        children: bottomChildren\n      }, {\n        name: 'diagonal',\n        properties: {\n          rawMap: {\n            style: diagonal && diagonal.style\n          }\n        },\n        children: diagonalChildren\n      }]\n    };\n  }\n};\nexports.default = borderFactory;\n\nvar getWeightName = function getWeightName(value) {\n  if (value === 1) {\n    return 'thin';\n  }\n\n  if (value === 2) {\n    return 'medium';\n  }\n\n  if (value === 3) {\n    return 'thick';\n  }\n\n  return 'hair';\n};\n\nvar mappedNames = {\n  None: 'None',\n  Dot: 'Dotted',\n  Dash: 'Dashed',\n  Double: 'Double',\n  DashDot: 'DashDot',\n  DashDotDot: 'DashDotDot',\n  SlantDashDot: 'SlantDashDot'\n};\nvar mediumBorders = ['Dashed', 'DashDot', 'DashDotDot'];\n\nexports.convertLegacyBorder = function (type, weight) {\n  // Legacy Types are: None, Continuous, Dash, Dot, DashDot, DashDotDot, SlantDashDot, and Double\n  // Weight represents: 0—Hairline, 1—Thin , 2—Medium, 3—Thick\n  // New types: none, thin, medium, dashed, dotted, thick, double, hair, mediumDashed, dashDot, mediumDashDot,\n  // dashDotDot, mediumDashDotDot, slantDashDot\n  var namedWeight = getWeightName(weight);\n  var mappedName = mappedNames[type];\n\n  if (!type) {\n    return 'thin';\n  }\n\n  if (type === 'Continuous') {\n    return namedWeight;\n  }\n\n  if (namedWeight === 'medium' && mediumBorders.indexOf(mappedName) > 0) {\n    return \"medium\" + mappedName;\n  }\n\n  return mappedName.charAt(0).toLowerCase() + mappedName.substr(1);\n};","map":null,"metadata":{},"sourceType":"script"}