{"ast":null,"code":"// ag-grid-enterprise v20.2.0\n\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ag_grid_community_1 = require(\"ag-grid-community\");\n\nvar menuList_1 = require(\"./menuList\");\n\nvar menuItemComponent_1 = require(\"./menuItemComponent\");\n\nvar menuItemMapper_1 = require(\"./menuItemMapper\");\n\nvar primaryColsPanel_1 = require(\"../sideBar/providedPanels/columns/panels/primaryColsPanel/primaryColsPanel\");\n\nvar EnterpriseMenuFactory =\n/** @class */\nfunction () {\n  function EnterpriseMenuFactory() {}\n\n  EnterpriseMenuFactory.prototype.hideActiveMenu = function () {\n    if (this.activeMenu) {\n      this.activeMenu.destroy();\n    }\n  };\n\n  EnterpriseMenuFactory.prototype.showMenuAfterMouseEvent = function (column, mouseEvent, defaultTab) {\n    var _this = this;\n\n    this.showMenu(column, function (menu) {\n      _this.popupService.positionPopupUnderMouseEvent({\n        column: column,\n        type: 'columnMenu',\n        mouseEvent: mouseEvent,\n        ePopup: menu.getGui()\n      });\n\n      if (defaultTab) {\n        menu.showTab(defaultTab);\n      }\n    }, defaultTab);\n  };\n\n  EnterpriseMenuFactory.prototype.showMenuAfterButtonClick = function (column, eventSource, defaultTab, restrictToTabs) {\n    var _this = this;\n\n    this.showMenu(column, function (menu) {\n      var minDims = menu.getMinDimensions();\n\n      _this.popupService.positionPopupUnderComponent({\n        column: column,\n        type: 'columnMenu',\n        eventSource: eventSource,\n        ePopup: menu.getGui(),\n        nudgeX: -9,\n        nudgeY: -26,\n        minWidth: minDims.width,\n        minHeight: minDims.height,\n        keepWithinBounds: true\n      });\n\n      if (defaultTab) {\n        menu.showTab(defaultTab);\n      }\n    }, defaultTab, restrictToTabs);\n  };\n\n  EnterpriseMenuFactory.prototype.showMenu = function (column, positionCallback, defaultTab, restrictToTabs) {\n    var _this = this;\n\n    var menu = new EnterpriseMenu(column, this.lastSelectedTab, restrictToTabs);\n    this.context.wireBean(menu);\n    var eMenuGui = menu.getGui(); // need to show filter before positioning, as only after filter\n    // is visible can we find out what the width of it is\n\n    var hidePopup = this.popupService.addAsModalPopup(eMenuGui, true, function () {\n      menu.destroy();\n      column.setMenuVisible(false, \"contextMenu\");\n    });\n    menu.afterGuiAttached({\n      hidePopup: hidePopup\n    });\n    positionCallback(menu);\n\n    if (!defaultTab) {\n      menu.showTabBasedOnPreviousSelection();\n    }\n\n    menu.addEventListener(EnterpriseMenu.EVENT_TAB_SELECTED, function (event) {\n      _this.lastSelectedTab = event.key;\n    });\n    column.setMenuVisible(true, \"contextMenu\");\n    this.activeMenu = menu;\n    menu.addEventListener(ag_grid_community_1.BeanStub.EVENT_DESTROYED, function () {\n      if (_this.activeMenu === menu) {\n        _this.activeMenu = null;\n      }\n    });\n  };\n\n  EnterpriseMenuFactory.prototype.isMenuEnabled = function (column) {\n    return column.getMenuTabs(EnterpriseMenu.TABS_DEFAULT).length > 0;\n  };\n\n  __decorate([ag_grid_community_1.Autowired('context'), __metadata(\"design:type\", ag_grid_community_1.Context)], EnterpriseMenuFactory.prototype, \"context\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('popupService'), __metadata(\"design:type\", ag_grid_community_1.PopupService)], EnterpriseMenuFactory.prototype, \"popupService\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", ag_grid_community_1.GridOptionsWrapper)], EnterpriseMenuFactory.prototype, \"gridOptionsWrapper\", void 0);\n\n  EnterpriseMenuFactory = __decorate([ag_grid_community_1.Bean('menuFactory')], EnterpriseMenuFactory);\n  return EnterpriseMenuFactory;\n}();\n\nexports.EnterpriseMenuFactory = EnterpriseMenuFactory;\n\nvar EnterpriseMenu =\n/** @class */\nfunction (_super) {\n  __extends(EnterpriseMenu, _super);\n\n  function EnterpriseMenu(column, initialSelection, restrictTo) {\n    var _this = _super.call(this) || this;\n\n    _this.tabFactories = {};\n    _this.includeChecks = {};\n    _this.column = column;\n    _this.initialSelection = initialSelection;\n    _this.tabFactories[EnterpriseMenu.TAB_GENERAL] = _this.createMainPanel.bind(_this);\n    _this.tabFactories[EnterpriseMenu.TAB_FILTER] = _this.createFilterPanel.bind(_this);\n    _this.tabFactories[EnterpriseMenu.TAB_COLUMNS] = _this.createColumnsPanel.bind(_this);\n\n    _this.includeChecks[EnterpriseMenu.TAB_GENERAL] = function () {\n      return true;\n    };\n\n    _this.includeChecks[EnterpriseMenu.TAB_FILTER] = function () {\n      return column.isFilterAllowed();\n    };\n\n    _this.includeChecks[EnterpriseMenu.TAB_COLUMNS] = function () {\n      return true;\n    };\n\n    _this.restrictTo = restrictTo;\n    return _this;\n  }\n\n  EnterpriseMenu.prototype.getMinDimensions = function () {\n    return this.tabbedLayout.getMinDimensions();\n  };\n\n  EnterpriseMenu.prototype.init = function () {\n    var _this = this;\n\n    var tabs = this.getTabsToCreate().map(function (menuTabName) {\n      return _this.createTab(menuTabName);\n    });\n    this.tabbedLayout = new ag_grid_community_1.TabbedLayout({\n      items: tabs,\n      cssClass: 'ag-menu',\n      onActiveItemClicked: this.onHidePopup.bind(this),\n      onItemClicked: this.onTabItemClicked.bind(this)\n    });\n  };\n\n  EnterpriseMenu.prototype.getTabsToCreate = function () {\n    var _this = this;\n\n    if (this.restrictTo) return this.restrictTo;\n    return this.column.getMenuTabs(EnterpriseMenu.TABS_DEFAULT).filter(function (tabName) {\n      return _this.isValidMenuTabItem(tabName);\n    }).filter(function (tabName) {\n      return _this.isNotSuppressed(tabName);\n    });\n  };\n\n  EnterpriseMenu.prototype.isValidMenuTabItem = function (menuTabName) {\n    var isValid = true;\n    var itemsToConsider = EnterpriseMenu.TABS_DEFAULT;\n\n    if (this.restrictTo != null) {\n      isValid = this.restrictTo.indexOf(menuTabName) > -1;\n      itemsToConsider = this.restrictTo;\n    }\n\n    isValid = isValid && EnterpriseMenu.TABS_DEFAULT.indexOf(menuTabName) > -1;\n\n    if (!isValid) {\n      console.warn(\"Trying to render an invalid menu item '\" + menuTabName + \"'. Check that your 'menuTabs' contains one of [\" + itemsToConsider + \"]\");\n    }\n\n    return isValid;\n  };\n\n  EnterpriseMenu.prototype.isNotSuppressed = function (menuTabName) {\n    return this.includeChecks[menuTabName]();\n  };\n\n  EnterpriseMenu.prototype.createTab = function (name) {\n    return this.tabFactories[name]();\n  };\n\n  EnterpriseMenu.prototype.showTabBasedOnPreviousSelection = function () {\n    // show the tab the user was on last time they had a menu open\n    this.showTab(this.initialSelection);\n  };\n\n  EnterpriseMenu.prototype.showTab = function (toShow) {\n    if (this.tabItemColumns && toShow === EnterpriseMenu.TAB_COLUMNS) {\n      this.tabbedLayout.showItem(this.tabItemColumns);\n    } else if (this.tabItemFilter && toShow === EnterpriseMenu.TAB_FILTER) {\n      this.tabbedLayout.showItem(this.tabItemFilter);\n    } else if (this.tabItemGeneral && toShow === EnterpriseMenu.TAB_GENERAL) {\n      this.tabbedLayout.showItem(this.tabItemGeneral);\n    } else {\n      this.tabbedLayout.showFirstItem();\n    }\n  };\n\n  EnterpriseMenu.prototype.onTabItemClicked = function (event) {\n    var key = null;\n\n    switch (event.item) {\n      case this.tabItemColumns:\n        key = EnterpriseMenu.TAB_COLUMNS;\n        break;\n\n      case this.tabItemFilter:\n        key = EnterpriseMenu.TAB_FILTER;\n        break;\n\n      case this.tabItemGeneral:\n        key = EnterpriseMenu.TAB_GENERAL;\n        break;\n    }\n\n    if (key) {\n      var ev = {\n        type: EnterpriseMenu.EVENT_TAB_SELECTED,\n        key: key\n      };\n      this.dispatchEvent(ev);\n    }\n  };\n\n  EnterpriseMenu.prototype.destroy = function () {\n    if (this.columnSelectPanel) {\n      this.columnSelectPanel.destroy();\n    }\n\n    if (this.mainMenuList) {\n      this.mainMenuList.destroy();\n    }\n\n    _super.prototype.destroy.call(this);\n  };\n\n  EnterpriseMenu.prototype.getMenuItems = function () {\n    var defaultMenuOptions = this.getDefaultMenuOptions();\n    var result;\n    var userFunc = this.gridOptionsWrapper.getMainMenuItemsFunc();\n\n    if (userFunc) {\n      var userOptions = userFunc({\n        column: this.column,\n        api: this.gridOptionsWrapper.getApi(),\n        columnApi: this.gridOptionsWrapper.getColumnApi(),\n        context: this.gridOptionsWrapper.getContext(),\n        defaultItems: defaultMenuOptions\n      });\n      result = userOptions;\n    } else {\n      result = defaultMenuOptions;\n    } // GUI looks weird when two separators are side by side. this can happen accidentally\n    // if we remove items from the menu then two separators can edit up adjacent.\n\n\n    ag_grid_community_1._.removeRepeatsFromArray(result, EnterpriseMenu.MENU_ITEM_SEPARATOR);\n\n    return result;\n  };\n\n  EnterpriseMenu.prototype.getDefaultMenuOptions = function () {\n    var result = [];\n    var allowPinning = !this.column.isLockPinned();\n    var rowGroupCount = this.columnController.getRowGroupColumns().length;\n    var doingGrouping = rowGroupCount > 0;\n    var groupedByThisColumn = this.columnController.getRowGroupColumns().indexOf(this.column) >= 0;\n    var allowValue = this.column.isAllowValue();\n    var allowRowGroup = this.column.isAllowRowGroup();\n    var isPrimary = this.column.isPrimary();\n    var pivotModeOn = this.columnController.isPivotMode();\n    var isInMemoryRowModel = this.rowModel.getType() === ag_grid_community_1.Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n    var usingTreeData = this.gridOptionsWrapper.isTreeData();\n    var allowValueAgg = // if primary, then only allow aggValue if grouping and it's a value columns\n    isPrimary && doingGrouping && allowValue || // secondary columns can always have aggValue, as it means it's a pivot value column\n    !isPrimary;\n\n    if (allowPinning) {\n      result.push('pinSubMenu');\n    }\n\n    if (allowValueAgg) {\n      result.push('valueAggSubMenu');\n    }\n\n    if (allowPinning || allowValueAgg) {\n      result.push(EnterpriseMenu.MENU_ITEM_SEPARATOR);\n    }\n\n    result.push('autoSizeThis');\n    result.push('autoSizeAll');\n    result.push(EnterpriseMenu.MENU_ITEM_SEPARATOR);\n\n    if (allowRowGroup && this.column.isPrimary()) {\n      if (groupedByThisColumn) {\n        result.push('rowUnGroup');\n      } else {\n        result.push('rowGroup');\n      }\n    }\n\n    result.push(EnterpriseMenu.MENU_ITEM_SEPARATOR);\n    result.push('resetColumns'); // only add grouping expand/collapse if grouping in the InMemoryRowModel\n    // if pivoting, we only have expandable groups if grouping by 2 or more columns\n    // as the lowest level group is not expandable while pivoting.\n    // if not pivoting, then any active row group can be expanded.\n\n    var allowExpandAndContract = false;\n\n    if (isInMemoryRowModel) {\n      if (usingTreeData) {\n        allowExpandAndContract = true;\n      } else {\n        allowExpandAndContract = pivotModeOn ? rowGroupCount > 1 : rowGroupCount > 0;\n      }\n    }\n\n    if (allowExpandAndContract) {\n      result.push('expandAll');\n      result.push('contractAll');\n    }\n\n    return result;\n  };\n\n  EnterpriseMenu.prototype.createMainPanel = function () {\n    this.mainMenuList = new menuList_1.MenuList();\n    this.getContext().wireBean(this.mainMenuList);\n    var menuItems = this.getMenuItems();\n    var menuItemsMapped = this.menuItemMapper.mapWithStockItems(menuItems, this.column);\n    this.mainMenuList.addMenuItems(menuItemsMapped);\n    this.mainMenuList.addEventListener(menuItemComponent_1.MenuItemComponent.EVENT_ITEM_SELECTED, this.onHidePopup.bind(this));\n    this.tabItemGeneral = {\n      title: ag_grid_community_1._.createIconNoSpan('menu', this.gridOptionsWrapper, this.column),\n      bodyPromise: ag_grid_community_1.Promise.resolve(this.mainMenuList.getGui()),\n      name: EnterpriseMenu.TAB_GENERAL\n    };\n    return this.tabItemGeneral;\n  };\n\n  EnterpriseMenu.prototype.onHidePopup = function () {\n    this.hidePopupFunc();\n  };\n\n  EnterpriseMenu.prototype.createFilterPanel = function () {\n    var filterWrapper = this.filterManager.getOrCreateFilterWrapper(this.column, 'COLUMN_MENU');\n    var afterFilterAttachedCallback = null; // slightly odd block this - this promise will always have been resolved by the time it gets here, so won't be\n    // async (_unless_ in react or similar, but if so why not encountered before now?).\n    // I'd suggest a future improvement would be to remove/replace this promise as this block just wont work if it is\n    // async and is confusing if you don't have this context\n\n    filterWrapper.filterPromise.then(function (filter) {\n      if (filter.afterGuiAttached) {\n        afterFilterAttachedCallback = filter.afterGuiAttached.bind(filter);\n      }\n    });\n    this.tabItemFilter = {\n      title: ag_grid_community_1._.createIconNoSpan('filter', this.gridOptionsWrapper, this.column),\n      bodyPromise: filterWrapper.guiPromise.promise,\n      afterAttachedCallback: afterFilterAttachedCallback,\n      name: EnterpriseMenu.TAB_FILTER\n    };\n    return this.tabItemFilter;\n  };\n\n  EnterpriseMenu.prototype.createColumnsPanel = function () {\n    var eWrapperDiv = document.createElement('div');\n\n    ag_grid_community_1._.addCssClass(eWrapperDiv, 'ag-menu-column-select-wrapper');\n\n    this.columnSelectPanel = new primaryColsPanel_1.PrimaryColsPanel(false, {\n      suppressValues: false,\n      suppressPivots: false,\n      suppressRowGroups: false,\n      suppressPivotMode: false,\n      contractColumnSelection: false,\n      suppressColumnExpandAll: false,\n      suppressColumnFilter: false,\n      suppressColumnSelectAll: false,\n      suppressSideButtons: false,\n      api: this.gridApi\n    });\n    this.getContext().wireBean(this.columnSelectPanel);\n    eWrapperDiv.appendChild(this.columnSelectPanel.getGui());\n    this.tabItemColumns = {\n      title: ag_grid_community_1._.createIconNoSpan('columns', this.gridOptionsWrapper, this.column),\n      bodyPromise: ag_grid_community_1.Promise.resolve(eWrapperDiv),\n      name: EnterpriseMenu.TAB_COLUMNS\n    };\n    return this.tabItemColumns;\n  };\n\n  EnterpriseMenu.prototype.afterGuiAttached = function (params) {\n    var _this = this;\n\n    this.tabbedLayout.setAfterAttachedParams({\n      hidePopup: params.hidePopup\n    });\n    this.hidePopupFunc = params.hidePopup;\n    var initialScroll = this.gridApi.getHorizontalPixelRange().left; // if the body scrolls, we want to hide the menu, as the menu will not appear in the right location anymore\n\n    var onBodyScroll = function onBodyScroll(event) {\n      // if h scroll, popup is no longer over the column\n      if (event.direction === 'horizontal') {\n        var newScroll = _this.gridApi.getHorizontalPixelRange().left;\n\n        if (Math.abs(newScroll - initialScroll) > _this.gridOptionsWrapper.getScrollbarWidth()) {\n          params.hidePopup();\n        }\n      }\n    };\n\n    this.addDestroyFunc(params.hidePopup);\n    this.addDestroyableEventListener(this.eventService, 'bodyScroll', onBodyScroll);\n  };\n\n  EnterpriseMenu.prototype.getGui = function () {\n    return this.tabbedLayout.getGui();\n  };\n\n  EnterpriseMenu.EVENT_TAB_SELECTED = 'tabSelected';\n  EnterpriseMenu.TAB_FILTER = 'filterMenuTab';\n  EnterpriseMenu.TAB_GENERAL = 'generalMenuTab';\n  EnterpriseMenu.TAB_COLUMNS = 'columnsMenuTab';\n  EnterpriseMenu.TABS_DEFAULT = [EnterpriseMenu.TAB_GENERAL, EnterpriseMenu.TAB_FILTER, EnterpriseMenu.TAB_COLUMNS];\n  EnterpriseMenu.MENU_ITEM_SEPARATOR = 'separator';\n\n  __decorate([ag_grid_community_1.Autowired('columnController'), __metadata(\"design:type\", ag_grid_community_1.ColumnController)], EnterpriseMenu.prototype, \"columnController\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('filterManager'), __metadata(\"design:type\", ag_grid_community_1.FilterManager)], EnterpriseMenu.prototype, \"filterManager\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('gridApi'), __metadata(\"design:type\", ag_grid_community_1.GridApi)], EnterpriseMenu.prototype, \"gridApi\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('gridOptionsWrapper'), __metadata(\"design:type\", ag_grid_community_1.GridOptionsWrapper)], EnterpriseMenu.prototype, \"gridOptionsWrapper\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('eventService'), __metadata(\"design:type\", ag_grid_community_1.EventService)], EnterpriseMenu.prototype, \"eventService\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('menuItemMapper'), __metadata(\"design:type\", menuItemMapper_1.MenuItemMapper)], EnterpriseMenu.prototype, \"menuItemMapper\", void 0);\n\n  __decorate([ag_grid_community_1.Autowired('rowModel'), __metadata(\"design:type\", Object)], EnterpriseMenu.prototype, \"rowModel\", void 0);\n\n  __decorate([ag_grid_community_1.PostConstruct, __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], EnterpriseMenu.prototype, \"init\", null);\n\n  return EnterpriseMenu;\n}(ag_grid_community_1.BeanStub);\n\nexports.EnterpriseMenu = EnterpriseMenu;","map":null,"metadata":{},"sourceType":"script"}